
uC test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b26  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cc  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  000023c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 32       	cpi	r26, 0x2D	; 45
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_IO>:
    }
}

void init_IO()
{
	DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//PORTD -> Output
  94:	1b b8       	out	0x0b, r1	; 11
  96:	08 95       	ret

00000098 <main>:
#include <util/delay.h>

void init_IO(void);
int main(void)
{
    init_IO();
  98:	0e 94 48 00 	call	0x90	; 0x90 <init_IO>
    while (1) 
    {
		PORTD = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	88 e3       	ldi	r24, 0x38	; 56
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0xe>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x18>
  b0:	00 00       	nop
		_delay_ms(50);
		PORTD = 0x00;
  b2:	1b b8       	out	0x0b, r1	; 11
  b4:	2f e7       	ldi	r18, 0x7F	; 127
  b6:	88 e3       	ldi	r24, 0x38	; 56
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x22>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x2c>
  c4:	00 00       	nop
  c6:	ea cf       	rjmp	.-44     	; 0x9c <main+0x4>

000000c8 <__vector_14>:
#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )
#define get_rx_pin_status()    ( SOFTUART_RXPIN  &   ( 1 << SOFTUART_RXBIT ) )

ISR(SOFTUART_T_COMP_LABEL)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	
	unsigned char start_bit, flag_in;
	unsigned char tmp;
	
	// Transmitter Section
	if ( flag_tx_busy == SU_TRUE ) {
  da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <flag_tx_busy>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	49 f5       	brne	.+82     	; 0x134 <__vector_14+0x6c>
		tmp = timer_tx_ctr;
  e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timer_tx_ctr>
		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	19 f5       	brne	.+70     	; 0x130 <__vector_14+0x68>
			if ( internal_tx_buffer & 0x01 ) {
  ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <internal_tx_buffer>
  ee:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <internal_tx_buffer+0x1>
  f2:	80 ff       	sbrs	r24, 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <__vector_14+0x36>
				set_tx_pin_high();
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	03 c0       	rjmp	.+6      	; 0x104 <__vector_14+0x3c>
			}
			else {
				set_tx_pin_low();
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	8b b9       	out	0x0b, r24	; 11
			}
			internal_tx_buffer >>= 1;
 104:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <internal_tx_buffer>
 108:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <internal_tx_buffer+0x1>
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <internal_tx_buffer+0x1>
 114:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <internal_tx_buffer>
			tmp = 3; // timer_tx_ctr = 3;
			if ( --bits_left_in_tx == 0 ) {
 118:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bits_left_in_tx>
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bits_left_in_tx>
 122:	81 11       	cpse	r24, r1
 124:	04 c0       	rjmp	.+8      	; 0x12e <__vector_14+0x66>
				flag_tx_busy = SU_FALSE;
 126:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <flag_tx_busy>
			}
			else {
				set_tx_pin_low();
			}
			internal_tx_buffer >>= 1;
			tmp = 3; // timer_tx_ctr = 3;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	01 c0       	rjmp	.+2      	; 0x130 <__vector_14+0x68>
 12e:	83 e0       	ldi	r24, 0x03	; 3
			if ( --bits_left_in_tx == 0 ) {
				flag_tx_busy = SU_FALSE;
			}
		}
		timer_tx_ctr = tmp;
 130:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timer_tx_ctr>
	}

	// Receiver Section
	if ( flag_rx_off == SU_FALSE ) {
 134:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <flag_rx_off>
 138:	81 11       	cpse	r24, r1
 13a:	56 c0       	rjmp	.+172    	; 0x1e8 <__vector_14+0x120>
		if ( flag_rx_waiting_for_stop_bit ) {
 13c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag_rx_waiting_for_stop_bit.1794>
 140:	88 23       	and	r24, r24
 142:	e9 f0       	breq	.+58     	; 0x17e <__vector_14+0xb6>
			if ( --timer_rx_ctr == 0 ) {
 144:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_rx_ctr.1796>
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer_rx_ctr.1796>
 14e:	81 11       	cpse	r24, r1
 150:	4b c0       	rjmp	.+150    	; 0x1e8 <__vector_14+0x120>
				flag_rx_waiting_for_stop_bit = SU_FALSE;
 152:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag_rx_waiting_for_stop_bit.1794>
				flag_rx_ready = SU_FALSE;
 156:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag_rx_ready>
				inbuf[qin] = internal_rx_buffer;
 15a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <qin>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <internal_rx_buffer.1798>
 164:	e3 5f       	subi	r30, 0xF3	; 243
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	80 83       	st	Z, r24
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <qin>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <qin>
 174:	80 32       	cpi	r24, 0x20	; 32
 176:	c0 f1       	brcs	.+112    	; 0x1e8 <__vector_14+0x120>
					// overflow - reset inbuf-index
					qin = 0;
 178:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <qin>
 17c:	35 c0       	rjmp	.+106    	; 0x1e8 <__vector_14+0x120>
				}
			}
		}
		else {  // rx_test_busy
			if ( flag_rx_ready == SU_FALSE ) {
 17e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag_rx_ready>
 182:	81 11       	cpse	r24, r1
 184:	10 c0       	rjmp	.+32     	; 0x1a6 <__vector_14+0xde>
				start_bit = get_rx_pin_status();
				// test for start bit
				if ( start_bit == 0 ) {
 186:	48 99       	sbic	0x09, 0	; 9
 188:	2f c0       	rjmp	.+94     	; 0x1e8 <__vector_14+0x120>
					flag_rx_ready      = SU_TRUE;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag_rx_ready>
					internal_rx_buffer = 0;
 190:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <internal_rx_buffer.1798>
					timer_rx_ctr       = 4;
 194:	94 e0       	ldi	r25, 0x04	; 4
 196:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer_rx_ctr.1796>
					bits_left_in_rx    = RX_NUM_OF_BITS;
 19a:	98 e0       	ldi	r25, 0x08	; 8
 19c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <bits_left_in_rx.1797>
					rx_mask            = 1;
 1a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a4:	21 c0       	rjmp	.+66     	; 0x1e8 <__vector_14+0x120>
				}
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
 1a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_rx_ctr.1796>
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	d9 f4       	brne	.+54     	; 0x1e4 <__vector_14+0x11c>
					// rcv
					tmp = 3;
					flag_in = get_rx_pin_status();
					if ( flag_in ) {
 1ae:	48 9b       	sbis	0x09, 0	; 9
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__vector_14+0xf8>
						internal_rx_buffer |= rx_mask;
 1b2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <internal_rx_buffer.1798>
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	89 2b       	or	r24, r25
 1bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <internal_rx_buffer.1798>
					}
					rx_mask <<= 1;
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	88 0f       	add	r24, r24
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					if ( --bits_left_in_rx == 0 ) {
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bits_left_in_rx.1797>
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bits_left_in_rx.1797>
 1d4:	81 11       	cpse	r24, r1
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__vector_14+0x11a>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag_rx_waiting_for_stop_bit.1794>
			}
			else {  // rx_busy
				tmp = timer_rx_ctr;
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
					// rcv
					tmp = 3;
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <__vector_14+0x11c>
 1e2:	83 e0       	ldi	r24, 0x03	; 3
					rx_mask <<= 1;
					if ( --bits_left_in_rx == 0 ) {
						flag_rx_waiting_for_stop_bit = SU_TRUE;
					}
				}
				timer_rx_ctr = tmp;
 1e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer_rx_ctr.1796>
			}
		}
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
