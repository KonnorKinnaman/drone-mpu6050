
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ced  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b8  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f0  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f9  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ab  00000000  00000000  00003379  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__gesf2+0x6>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e6 ed       	ldi	r30, 0xD6	; 214
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 30       	cpi	r26, 0x00	; 0
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a0 30       	cpi	r26, 0x00	; 0
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
  f8:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
#define F_CPU 16000000UL

void init_ALL(void);

int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	66 97       	sbiw	r28, 0x16	; 22
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	init_ALL();
 114:	0e 94 16 01 	call	0x22c	; 0x22c <init_ALL>
	int received_data = 0;
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	19 82       	std	Y+1, r1	; 0x01
	int16_t gx, gy;
	int16_t ax, ay;
	uint16_t testVal2 = 65.879;
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9c 83       	std	Y+4, r25	; 0x04
 122:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t address = 0;
 124:	1d 82       	std	Y+5, r1	; 0x05
    
	//address = I2C_scan();
    while (1) 
    {
		
		mpu6050_read_gyro_x(&gx);
 126:	ce 01       	movw	r24, r28
 128:	45 96       	adiw	r24, 0x15	; 21
 12a:	0e 94 ef 01 	call	0x3de	; 0x3de <mpu6050_read_gyro_x>
		int8_t scaled_x = gx/2;
 12e:	8d 89       	ldd	r24, Y+21	; 0x15
 130:	9e 89       	ldd	r25, Y+22	; 0x16
 132:	99 23       	and	r25, r25
 134:	0c f4       	brge	.+2      	; 0x138 <main+0x38>
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	8e 83       	std	Y+6, r24	; 0x06
		USART_int_transmit(gx);
 13e:	8d 89       	ldd	r24, Y+21	; 0x15
 140:	9e 89       	ldd	r25, Y+22	; 0x16
 142:	0e 94 45 02 	call	0x48a	; 0x48a <USART_int_transmit>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	aa e7       	ldi	r26, 0x7A	; 122
 14c:	b4 e4       	ldi	r27, 0x44	; 68
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	98 87       	std	Y+8, r25	; 0x08
 152:	a9 87       	std	Y+9, r26	; 0x09
 154:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	4a e7       	ldi	r20, 0x7A	; 122
 15c:	53 e4       	ldi	r21, 0x43	; 67
 15e:	6f 81       	ldd	r22, Y+7	; 0x07
 160:	78 85       	ldd	r23, Y+8	; 0x08
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	9a 85       	ldd	r25, Y+10	; 0x0a
 166:	0e 94 b8 04 	call	0x970	; 0x970 <__mulsf3>
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
 16e:	8b 87       	std	Y+11, r24	; 0x0b
 170:	9c 87       	std	Y+12, r25	; 0x0c
 172:	ad 87       	std	Y+13, r26	; 0x0d
 174:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e8       	ldi	r20, 0x80	; 128
 17c:	5f e3       	ldi	r21, 0x3F	; 63
 17e:	6b 85       	ldd	r22, Y+11	; 0x0b
 180:	7c 85       	ldd	r23, Y+12	; 0x0c
 182:	8d 85       	ldd	r24, Y+13	; 0x0d
 184:	9e 85       	ldd	r25, Y+14	; 0x0e
 186:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__cmpsf2>
 18a:	88 23       	and	r24, r24
 18c:	2c f4       	brge	.+10     	; 0x198 <main+0x98>
		__ticks = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	98 8b       	std	Y+16, r25	; 0x10
 194:	8f 87       	std	Y+15, r24	; 0x0f
 196:	3f c0       	rjmp	.+126    	; 0x216 <main+0x116>
	else if (__tmp > 65535)
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	3f ef       	ldi	r19, 0xFF	; 255
 19c:	4f e7       	ldi	r20, 0x7F	; 127
 19e:	57 e4       	ldi	r21, 0x47	; 71
 1a0:	6b 85       	ldd	r22, Y+11	; 0x0b
 1a2:	7c 85       	ldd	r23, Y+12	; 0x0c
 1a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a6:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__gesf2>
 1ac:	18 16       	cp	r1, r24
 1ae:	4c f5       	brge	.+82     	; 0x202 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e2       	ldi	r20, 0x20	; 32
 1b6:	51 e4       	ldi	r21, 0x41	; 65
 1b8:	6f 81       	ldd	r22, Y+7	; 0x07
 1ba:	78 85       	ldd	r23, Y+8	; 0x08
 1bc:	89 85       	ldd	r24, Y+9	; 0x09
 1be:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c0:	0e 94 b8 04 	call	0x970	; 0x970 <__mulsf3>
 1c4:	dc 01       	movw	r26, r24
 1c6:	cb 01       	movw	r24, r22
 1c8:	bc 01       	movw	r22, r24
 1ca:	cd 01       	movw	r24, r26
 1cc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixunssfsi>
 1d0:	dc 01       	movw	r26, r24
 1d2:	cb 01       	movw	r24, r22
 1d4:	98 8b       	std	Y+16, r25	; 0x10
 1d6:	8f 87       	std	Y+15, r24	; 0x0f
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <main+0xf8>
 1da:	89 e1       	ldi	r24, 0x19	; 25
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9a 8b       	std	Y+18, r25	; 0x12
 1e0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	89 89       	ldd	r24, Y+17	; 0x11
 1e4:	9a 89       	ldd	r25, Y+18	; 0x12
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0xe6>
 1ea:	9a 8b       	std	Y+18, r25	; 0x12
 1ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f0:	98 89       	ldd	r25, Y+16	; 0x10
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	98 8b       	std	Y+16, r25	; 0x10
 1f6:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 1fa:	98 89       	ldd	r25, Y+16	; 0x10
 1fc:	89 2b       	or	r24, r25
 1fe:	69 f7       	brne	.-38     	; 0x1da <main+0xda>
 200:	14 c0       	rjmp	.+40     	; 0x22a <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 202:	6b 85       	ldd	r22, Y+11	; 0x0b
 204:	7c 85       	ldd	r23, Y+12	; 0x0c
 206:	8d 85       	ldd	r24, Y+13	; 0x0d
 208:	9e 85       	ldd	r25, Y+14	; 0x0e
 20a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixunssfsi>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	98 8b       	std	Y+16, r25	; 0x10
 214:	8f 87       	std	Y+15, r24	; 0x0f
 216:	8f 85       	ldd	r24, Y+15	; 0x0f
 218:	98 89       	ldd	r25, Y+16	; 0x10
 21a:	9c 8b       	std	Y+20, r25	; 0x14
 21c:	8b 8b       	std	Y+19, r24	; 0x13
 21e:	8b 89       	ldd	r24, Y+19	; 0x13
 220:	9c 89       	ldd	r25, Y+20	; 0x14
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x122>
 226:	9c 8b       	std	Y+20, r25	; 0x14
 228:	8b 8b       	std	Y+19, r24	; 0x13
		//USART_int_transmit(gy);
		//USART_int_transmit(gz);
		_delay_ms(1000);
    }
 22a:	7d cf       	rjmp	.-262    	; 0x126 <main+0x26>

0000022c <init_ALL>:
}

void init_ALL(void)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	//init_USART();
	init_I2C();
 234:	0e 94 22 01 	call	0x244	; 0x244 <init_I2C>
	mpu6050_init();
 238:	0e 94 da 01 	call	0x3b4	; 0x3b4 <mpu6050_init>
}
 23c:	00 00       	nop
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <init_I2C>:
 *  Author: Konnor Kinnaman
 */ 
#include "mpu6050.h"

void init_I2C(void)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
 24c:	87 e2       	ldi	r24, 0x27	; 39
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	27 e2       	ldi	r18, 0x27	; 39
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	2f 7c       	andi	r18, 0xCF	; 207
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
	PORTC |= (1<<PORTC4) | (1<<PORTC5);
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	28 e2       	ldi	r18, 0x28	; 40
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	f9 01       	movw	r30, r18
 268:	20 81       	ld	r18, Z
 26a:	20 63       	ori	r18, 0x30	; 48
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
	
	TWSR = 0x00; //Prescalar of 1
 270:	89 eb       	ldi	r24, 0xB9	; 185
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	10 82       	st	Z, r1
	TWBR = ((F_CPU/SCL_CLOCK) - 16) / 2;	//Set Baud Rate for Transmission
 278:	88 eb       	ldi	r24, 0xB8	; 184
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	28 e4       	ldi	r18, 0x48	; 72
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
}
 282:	00 00       	nop
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <I2C_start>:

uint8_t I2C_start(void)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	1f 92       	push	r1
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	TWCR = START;
 294:	8c eb       	ldi	r24, 0xBC	; 188
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	24 ea       	ldi	r18, 0xA4	; 164
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
 29e:	00 00       	nop
 2a0:	8c eb       	ldi	r24, 0xBC	; 188
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	d4 f7       	brge	.-12     	; 0x2a0 <I2C_start+0x16>
	
	uint8_t status = TWSR & 0xF8;
 2ac:	89 eb       	ldi	r24, 0xB9	; 185
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 7f       	andi	r24, 0xF8	; 248
 2b6:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08 && status != 0x10)
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	29 f0       	breq	.+10     	; 0x2c8 <I2C_start+0x3e>
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <I2C_start+0x3e>
	{
		return 0;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <I2C_start+0x40>
	}
	return 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
}
 2ca:	0f 90       	pop	r0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <I2C_write>:

uint8_t I2C_write(uint8_t data)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <I2C_write+0x6>
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	8a 83       	std	Y+2, r24	; 0x02
	//Write to I2C device
	TWDR = data;
 2de:	8b eb       	ldi	r24, 0xBB	; 187
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	2a 81       	ldd	r18, Y+2	; 0x02
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	TWCR = CLEAR;
 2e8:	8c eb       	ldi	r24, 0xBC	; 188
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	24 e8       	ldi	r18, 0x84	; 132
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	
	while(!(TWCR & (1<<TWINT)));
 2f2:	00 00       	nop
 2f4:	8c eb       	ldi	r24, 0xBC	; 188
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	88 23       	and	r24, r24
 2fe:	d4 f7       	brge	.-12     	; 0x2f4 <I2C_write+0x22>
	
	uint8_t status = TWSR & 0xF8;
 300:	89 eb       	ldi	r24, 0xB9	; 185
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	80 81       	ld	r24, Z
 308:	88 7f       	andi	r24, 0xF8	; 248
 30a:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x18 && status != 0x28)
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	88 31       	cpi	r24, 0x18	; 24
 310:	29 f0       	breq	.+10     	; 0x31c <I2C_write+0x4a>
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	88 32       	cpi	r24, 0x28	; 40
 316:	11 f0       	breq	.+4      	; 0x31c <I2C_write+0x4a>
	{
		return 0;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	01 c0       	rjmp	.+2      	; 0x31e <I2C_write+0x4c>
	}
	return 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <I2C_read_ACK>:

uint8_t I2C_read_ACK(void)
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
	//Device Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 330:	8c eb       	ldi	r24, 0xBC	; 188
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	24 ec       	ldi	r18, 0xC4	; 196
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
 33a:	00 00       	nop
 33c:	8c eb       	ldi	r24, 0xBC	; 188
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	d4 f7       	brge	.-12     	; 0x33c <I2C_read_ACK+0x14>
	
	return TWDR;
 348:	8b eb       	ldi	r24, 0xBB	; 187
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <I2C_read_NACK>:

uint8_t I2C_read_NACK(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	//Device not Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT);
 35e:	8c eb       	ldi	r24, 0xBC	; 188
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	24 e8       	ldi	r18, 0x84	; 132
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
 368:	00 00       	nop
 36a:	8c eb       	ldi	r24, 0xBC	; 188
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	d4 f7       	brge	.-12     	; 0x36a <I2C_read_NACK+0x14>
	
	return TWDR;
 376:	8b eb       	ldi	r24, 0xBB	; 187
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <I2C_stop>:

void I2C_stop(void)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
	//Stop I2C Communication
	TWCR = STOP;
 38c:	8c eb       	ldi	r24, 0xBC	; 188
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	24 e9       	ldi	r18, 0x94	; 148
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
	while(TWCR & (1<<TWSTO));
 396:	00 00       	nop
 398:	8c eb       	ldi	r24, 0xBC	; 188
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	fc 01       	movw	r30, r24
 39e:	80 81       	ld	r24, Z
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	80 71       	andi	r24, 0x10	; 16
 3a6:	99 27       	eor	r25, r25
 3a8:	89 2b       	or	r24, r25
 3aa:	b1 f7       	brne	.-20     	; 0x398 <I2C_stop+0x14>
}
 3ac:	00 00       	nop
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <mpu6050_init>:

void mpu6050_init(void)
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
	//Initialize mpu6050
	I2C_start();
 3bc:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
 3c0:	80 ed       	ldi	r24, 0xD0	; 208
 3c2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_write(0x6B);	//Access PWR_MGMT_1 register
 3c6:	8b e6       	ldi	r24, 0x6B	; 107
 3c8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_write(0x00);	//Start mpu6050 module
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_stop();
 3d2:	0e 94 c2 01 	call	0x384	; 0x384 <I2C_stop>
}
 3d6:	00 00       	nop
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <mpu6050_read_gyro_x>:

void mpu6050_read_gyro_x(int8_t *gx)
{
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <mpu6050_read_gyro_x+0x8>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <mpu6050_read_gyro_x+0xa>
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	9c 83       	std	Y+4, r25	; 0x04
 3ee:	8b 83       	std	Y+3, r24	; 0x03
	int8_t gyro_xh;
	int8_t gyro_xl;
	
	//Read from upper GYRO_X register
	I2C_start();
 3f0:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
 3f4:	80 ed       	ldi	r24, 0xD0	; 208
 3f6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_write(GYRO_XOUT_H);	
 3fa:	83 e4       	ldi	r24, 0x43	; 67
 3fc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_start();
 400:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);	
 404:	81 ed       	ldi	r24, 0xD1	; 209
 406:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	gyro_xh = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
 40a:	0e 94 94 01 	call	0x328	; 0x328 <I2C_read_ACK>
 40e:	08 2e       	mov	r0, r24
 410:	00 0c       	add	r0, r0
 412:	99 0b       	sbc	r25, r25
 414:	98 2f       	mov	r25, r24
 416:	88 27       	eor	r24, r24
 418:	18 2f       	mov	r17, r24
 41a:	0e 94 ab 01 	call	0x356	; 0x356 <I2C_read_NACK>
 41e:	81 2b       	or	r24, r17
 420:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
 422:	0e 94 c2 01 	call	0x384	; 0x384 <I2C_stop>
	
	//Read from lower GYRO_X register
	I2C_start();
 426:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
 42a:	80 ed       	ldi	r24, 0xD0	; 208
 42c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_write(GYRO_XOUT_L);
 430:	84 e4       	ldi	r24, 0x44	; 68
 432:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	I2C_start();
 436:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
 43a:	81 ed       	ldi	r24, 0xD1	; 209
 43c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_write>
	gyro_xl = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
 440:	0e 94 94 01 	call	0x328	; 0x328 <I2C_read_ACK>
 444:	08 2e       	mov	r0, r24
 446:	00 0c       	add	r0, r0
 448:	99 0b       	sbc	r25, r25
 44a:	98 2f       	mov	r25, r24
 44c:	88 27       	eor	r24, r24
 44e:	18 2f       	mov	r17, r24
 450:	0e 94 ab 01 	call	0x356	; 0x356 <I2C_read_NACK>
 454:	81 2b       	or	r24, r17
 456:	8a 83       	std	Y+2, r24	; 0x02
	//*gy = ((int16_t)I2C_read_ACK() << 8 | I2C_read_ACK());
	//*gz = ((int16_t)I2C_read_ACK() << 8 | I2C_read_NACK());
	*gx = (gyro_xh << 8) | gyro_xl ;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	08 2e       	mov	r0, r24
 45c:	00 0c       	add	r0, r0
 45e:	99 0b       	sbc	r25, r25
 460:	98 2f       	mov	r25, r24
 462:	88 27       	eor	r24, r24
 464:	98 2f       	mov	r25, r24
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	29 2f       	mov	r18, r25
 46a:	28 2b       	or	r18, r24
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	9c 81       	ldd	r25, Y+4	; 0x04
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
	I2C_stop();
 474:	0e 94 c2 01 	call	0x384	; 0x384 <I2C_stop>
	
}
 478:	00 00       	nop
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	08 95       	ret

0000048a <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	64 97       	sbiw	r28, 0x14	; 20
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	9c 8b       	std	Y+20, r25	; 0x14
 4a0:	8b 8b       	std	Y+19, r24	; 0x13
	int nDigits = log10(data)+1;
 4a2:	8b 89       	ldd	r24, Y+19	; 0x13
 4a4:	9c 89       	ldd	r25, Y+20	; 0x14
 4a6:	cc 01       	movw	r24, r24
 4a8:	a0 e0       	ldi	r26, 0x00	; 0
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	bc 01       	movw	r22, r24
 4ae:	cd 01       	movw	r24, r26
 4b0:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 4b4:	dc 01       	movw	r26, r24
 4b6:	cb 01       	movw	r24, r22
 4b8:	bc 01       	movw	r22, r24
 4ba:	cd 01       	movw	r24, r26
 4bc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <log10>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e8       	ldi	r20, 0x80	; 128
 4ca:	5f e3       	ldi	r21, 0x3F	; 63
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	0e 94 02 03 	call	0x604	; 0x604 <__addsf3>
 4d4:	dc 01       	movw	r26, r24
 4d6:	cb 01       	movw	r24, r22
 4d8:	bc 01       	movw	r22, r24
 4da:	cd 01       	movw	r24, r26
 4dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixsfsi>
 4e0:	dc 01       	movw	r26, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	9e 83       	std	Y+6, r25	; 0x06
 4e6:	8d 83       	std	Y+5, r24	; 0x05
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 4e8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ea:	9e 81       	ldd	r25, Y+6	; 0x06
 4ec:	9a 83       	std	Y+2, r25	; 0x02
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	3c c0       	rjmp	.+120    	; 0x56a <USART_int_transmit+0xe0>
	{
		numParser = data % 10;
 4f2:	4b 89       	ldd	r20, Y+19	; 0x13
 4f4:	5c 89       	ldd	r21, Y+20	; 0x14
 4f6:	9a 01       	movw	r18, r20
 4f8:	ad ec       	ldi	r26, 0xCD	; 205
 4fa:	bc ec       	ldi	r27, 0xCC	; 204
 4fc:	0e 94 5a 05 	call	0xab4	; 0xab4 <__umulhisi3>
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	9c 01       	movw	r18, r24
 512:	22 0f       	add	r18, r18
 514:	33 1f       	adc	r19, r19
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	82 0f       	add	r24, r18
 51c:	93 1f       	adc	r25, r19
 51e:	9a 01       	movw	r18, r20
 520:	28 1b       	sub	r18, r24
 522:	39 0b       	sbc	r19, r25
 524:	c9 01       	movw	r24, r18
 526:	98 87       	std	Y+8, r25	; 0x08
 528:	8f 83       	std	Y+7, r24	; 0x07
		data = data / 10;
 52a:	8b 89       	ldd	r24, Y+19	; 0x13
 52c:	9c 89       	ldd	r25, Y+20	; 0x14
 52e:	9c 01       	movw	r18, r24
 530:	ad ec       	ldi	r26, 0xCD	; 205
 532:	bc ec       	ldi	r27, 0xCC	; 204
 534:	0e 94 5a 05 	call	0xab4	; 0xab4 <__umulhisi3>
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	9c 8b       	std	Y+20, r25	; 0x14
 546:	8b 8b       	std	Y+19, r24	; 0x13
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
 548:	8f 81       	ldd	r24, Y+7	; 0x07
 54a:	40 e3       	ldi	r20, 0x30	; 48
 54c:	48 0f       	add	r20, r24
 54e:	9e 01       	movw	r18, r28
 550:	27 5f       	subi	r18, 0xF7	; 247
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	9a 81       	ldd	r25, Y+2	; 0x02
 558:	82 0f       	add	r24, r18
 55a:	93 1f       	adc	r25, r19
 55c:	fc 01       	movw	r30, r24
 55e:	40 83       	st	Z, r20
	int nDigits = log10(data)+1;
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	9a 81       	ldd	r25, Y+2	; 0x02
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	9a 83       	std	Y+2, r25	; 0x02
 568:	89 83       	std	Y+1, r24	; 0x01
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	18 16       	cp	r1, r24
 570:	19 06       	cpc	r1, r25
 572:	0c f4       	brge	.+2      	; 0x576 <USART_int_transmit+0xec>
 574:	be cf       	rjmp	.-132    	; 0x4f2 <USART_int_transmit+0x68>
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	9c 83       	std	Y+4, r25	; 0x04
 57c:	8b 83       	std	Y+3, r24	; 0x03
 57e:	1d c0       	rjmp	.+58     	; 0x5ba <USART_int_transmit+0x130>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 580:	00 00       	nop
 582:	80 ec       	ldi	r24, 0xC0	; 192
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	fc 01       	movw	r30, r24
 588:	80 81       	ld	r24, Z
 58a:	88 2f       	mov	r24, r24
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	80 72       	andi	r24, 0x20	; 32
 590:	99 27       	eor	r25, r25
 592:	89 2b       	or	r24, r25
 594:	b1 f3       	breq	.-20     	; 0x582 <USART_int_transmit+0xf8>
		UDR0 = transmit_buffer[i];
 596:	86 ec       	ldi	r24, 0xC6	; 198
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	ae 01       	movw	r20, r28
 59c:	47 5f       	subi	r20, 0xF7	; 247
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	2b 81       	ldd	r18, Y+3	; 0x03
 5a2:	3c 81       	ldd	r19, Y+4	; 0x04
 5a4:	24 0f       	add	r18, r20
 5a6:	35 1f       	adc	r19, r21
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	9c 81       	ldd	r25, Y+4	; 0x04
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	9c 83       	std	Y+4, r25	; 0x04
 5b8:	8b 83       	std	Y+3, r24	; 0x03
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	9e 81       	ldd	r25, Y+6	; 0x06
 5be:	9c 01       	movw	r18, r24
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	3f 4f       	sbci	r19, 0xFF	; 255
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	82 17       	cp	r24, r18
 5ca:	93 07       	cpc	r25, r19
 5cc:	cc f2       	brlt	.-78     	; 0x580 <USART_int_transmit+0xf6>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
		UDR0 = transmit_buffer[i];
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 5ce:	00 00       	nop
 5d0:	80 ec       	ldi	r24, 0xC0	; 192
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	fc 01       	movw	r30, r24
 5d6:	80 81       	ld	r24, Z
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	80 72       	andi	r24, 0x20	; 32
 5de:	99 27       	eor	r25, r25
 5e0:	89 2b       	or	r24, r25
 5e2:	b1 f3       	breq	.-20     	; 0x5d0 <USART_int_transmit+0x146>
	UDR0 = 0x0A;	//New Line
 5e4:	86 ec       	ldi	r24, 0xC6	; 198
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	2a e0       	ldi	r18, 0x0A	; 10
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
}
 5ee:	00 00       	nop
 5f0:	64 96       	adiw	r28, 0x14	; 20
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <__subsf3>:
 602:	50 58       	subi	r21, 0x80	; 128

00000604 <__addsf3>:
 604:	bb 27       	eor	r27, r27
 606:	aa 27       	eor	r26, r26
 608:	0e 94 19 03 	call	0x632	; 0x632 <__addsf3x>
 60c:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 610:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 614:	38 f0       	brcs	.+14     	; 0x624 <__addsf3+0x20>
 616:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 61a:	20 f0       	brcs	.+8      	; 0x624 <__addsf3+0x20>
 61c:	39 f4       	brne	.+14     	; 0x62c <__addsf3+0x28>
 61e:	9f 3f       	cpi	r25, 0xFF	; 255
 620:	19 f4       	brne	.+6      	; 0x628 <__addsf3+0x24>
 622:	26 f4       	brtc	.+8      	; 0x62c <__addsf3+0x28>
 624:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>
 628:	0e f4       	brtc	.+2      	; 0x62c <__addsf3+0x28>
 62a:	e0 95       	com	r30
 62c:	e7 fb       	bst	r30, 7
 62e:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>

00000632 <__addsf3x>:
 632:	e9 2f       	mov	r30, r25
 634:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 638:	58 f3       	brcs	.-42     	; 0x610 <__addsf3+0xc>
 63a:	ba 17       	cp	r27, r26
 63c:	62 07       	cpc	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	95 07       	cpc	r25, r21
 644:	20 f0       	brcs	.+8      	; 0x64e <__addsf3x+0x1c>
 646:	79 f4       	brne	.+30     	; 0x666 <__addsf3x+0x34>
 648:	a6 f5       	brtc	.+104    	; 0x6b2 <__addsf3x+0x80>
 64a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_zero>
 64e:	0e f4       	brtc	.+2      	; 0x652 <__addsf3x+0x20>
 650:	e0 95       	com	r30
 652:	0b 2e       	mov	r0, r27
 654:	ba 2f       	mov	r27, r26
 656:	a0 2d       	mov	r26, r0
 658:	0b 01       	movw	r0, r22
 65a:	b9 01       	movw	r22, r18
 65c:	90 01       	movw	r18, r0
 65e:	0c 01       	movw	r0, r24
 660:	ca 01       	movw	r24, r20
 662:	a0 01       	movw	r20, r0
 664:	11 24       	eor	r1, r1
 666:	ff 27       	eor	r31, r31
 668:	59 1b       	sub	r21, r25
 66a:	99 f0       	breq	.+38     	; 0x692 <__addsf3x+0x60>
 66c:	59 3f       	cpi	r21, 0xF9	; 249
 66e:	50 f4       	brcc	.+20     	; 0x684 <__addsf3x+0x52>
 670:	50 3e       	cpi	r21, 0xE0	; 224
 672:	68 f1       	brcs	.+90     	; 0x6ce <__addsf3x+0x9c>
 674:	1a 16       	cp	r1, r26
 676:	f0 40       	sbci	r31, 0x00	; 0
 678:	a2 2f       	mov	r26, r18
 67a:	23 2f       	mov	r18, r19
 67c:	34 2f       	mov	r19, r20
 67e:	44 27       	eor	r20, r20
 680:	58 5f       	subi	r21, 0xF8	; 248
 682:	f3 cf       	rjmp	.-26     	; 0x66a <__addsf3x+0x38>
 684:	46 95       	lsr	r20
 686:	37 95       	ror	r19
 688:	27 95       	ror	r18
 68a:	a7 95       	ror	r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	53 95       	inc	r21
 690:	c9 f7       	brne	.-14     	; 0x684 <__addsf3x+0x52>
 692:	7e f4       	brtc	.+30     	; 0x6b2 <__addsf3x+0x80>
 694:	1f 16       	cp	r1, r31
 696:	ba 0b       	sbc	r27, r26
 698:	62 0b       	sbc	r22, r18
 69a:	73 0b       	sbc	r23, r19
 69c:	84 0b       	sbc	r24, r20
 69e:	ba f0       	brmi	.+46     	; 0x6ce <__addsf3x+0x9c>
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	a1 f0       	breq	.+40     	; 0x6cc <__addsf3x+0x9a>
 6a4:	ff 0f       	add	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	c2 f7       	brpl	.-16     	; 0x6a0 <__addsf3x+0x6e>
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <__addsf3x+0x9c>
 6b2:	ba 0f       	add	r27, r26
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 1f       	adc	r23, r19
 6b8:	84 1f       	adc	r24, r20
 6ba:	48 f4       	brcc	.+18     	; 0x6ce <__addsf3x+0x9c>
 6bc:	87 95       	ror	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	9e 3f       	cpi	r25, 0xFE	; 254
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <__addsf3x+0x9a>
 6ca:	b0 cf       	rjmp	.-160    	; 0x62c <__addsf3+0x28>
 6cc:	93 95       	inc	r25
 6ce:	88 0f       	add	r24, r24
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <__addsf3x+0xa2>
 6d2:	99 27       	eor	r25, r25
 6d4:	ee 0f       	add	r30, r30
 6d6:	97 95       	ror	r25
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret

000006dc <__cmpsf2>:
 6dc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_cmp>
 6e0:	08 f4       	brcc	.+2      	; 0x6e4 <__cmpsf2+0x8>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	08 95       	ret

000006e6 <__fixsfsi>:
 6e6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixunssfsi>
 6ea:	68 94       	set
 6ec:	b1 11       	cpse	r27, r1
 6ee:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 6f2:	08 95       	ret

000006f4 <__fixunssfsi>:
 6f4:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_splitA>
 6f8:	88 f0       	brcs	.+34     	; 0x71c <__fixunssfsi+0x28>
 6fa:	9f 57       	subi	r25, 0x7F	; 127
 6fc:	98 f0       	brcs	.+38     	; 0x724 <__fixunssfsi+0x30>
 6fe:	b9 2f       	mov	r27, r25
 700:	99 27       	eor	r25, r25
 702:	b7 51       	subi	r27, 0x17	; 23
 704:	b0 f0       	brcs	.+44     	; 0x732 <__fixunssfsi+0x3e>
 706:	e1 f0       	breq	.+56     	; 0x740 <__fixunssfsi+0x4c>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	1a f0       	brmi	.+6      	; 0x718 <__fixunssfsi+0x24>
 712:	ba 95       	dec	r27
 714:	c9 f7       	brne	.-14     	; 0x708 <__fixunssfsi+0x14>
 716:	14 c0       	rjmp	.+40     	; 0x740 <__fixunssfsi+0x4c>
 718:	b1 30       	cpi	r27, 0x01	; 1
 71a:	91 f0       	breq	.+36     	; 0x740 <__fixunssfsi+0x4c>
 71c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_zero>
 720:	b1 e0       	ldi	r27, 0x01	; 1
 722:	08 95       	ret
 724:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_zero>
 728:	67 2f       	mov	r22, r23
 72a:	78 2f       	mov	r23, r24
 72c:	88 27       	eor	r24, r24
 72e:	b8 5f       	subi	r27, 0xF8	; 248
 730:	39 f0       	breq	.+14     	; 0x740 <__fixunssfsi+0x4c>
 732:	b9 3f       	cpi	r27, 0xF9	; 249
 734:	cc f3       	brlt	.-14     	; 0x728 <__fixunssfsi+0x34>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b3 95       	inc	r27
 73e:	d9 f7       	brne	.-10     	; 0x736 <__fixunssfsi+0x42>
 740:	3e f4       	brtc	.+14     	; 0x750 <__fixunssfsi+0x5c>
 742:	90 95       	com	r25
 744:	80 95       	com	r24
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__floatunsisf>:
 752:	e8 94       	clt
 754:	09 c0       	rjmp	.+18     	; 0x768 <__floatsisf+0x12>

00000756 <__floatsisf>:
 756:	97 fb       	bst	r25, 7
 758:	3e f4       	brtc	.+14     	; 0x768 <__floatsisf+0x12>
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	99 23       	and	r25, r25
 76a:	a9 f0       	breq	.+42     	; 0x796 <__floatsisf+0x40>
 76c:	f9 2f       	mov	r31, r25
 76e:	96 e9       	ldi	r25, 0x96	; 150
 770:	bb 27       	eor	r27, r27
 772:	93 95       	inc	r25
 774:	f6 95       	lsr	r31
 776:	87 95       	ror	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f1 11       	cpse	r31, r1
 780:	f8 cf       	rjmp	.-16     	; 0x772 <__floatsisf+0x1c>
 782:	fa f4       	brpl	.+62     	; 0x7c2 <__floatsisf+0x6c>
 784:	bb 0f       	add	r27, r27
 786:	11 f4       	brne	.+4      	; 0x78c <__floatsisf+0x36>
 788:	60 ff       	sbrs	r22, 0
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <__floatsisf+0x6c>
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <__floatsisf+0x6c>
 796:	88 23       	and	r24, r24
 798:	11 f0       	breq	.+4      	; 0x79e <__floatsisf+0x48>
 79a:	96 e9       	ldi	r25, 0x96	; 150
 79c:	11 c0       	rjmp	.+34     	; 0x7c0 <__floatsisf+0x6a>
 79e:	77 23       	and	r23, r23
 7a0:	21 f0       	breq	.+8      	; 0x7aa <__floatsisf+0x54>
 7a2:	9e e8       	ldi	r25, 0x8E	; 142
 7a4:	87 2f       	mov	r24, r23
 7a6:	76 2f       	mov	r23, r22
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <__floatsisf+0x5e>
 7aa:	66 23       	and	r22, r22
 7ac:	71 f0       	breq	.+28     	; 0x7ca <__floatsisf+0x74>
 7ae:	96 e8       	ldi	r25, 0x86	; 134
 7b0:	86 2f       	mov	r24, r22
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	2a f0       	brmi	.+10     	; 0x7c2 <__floatsisf+0x6c>
 7b8:	9a 95       	dec	r25
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	da f7       	brpl	.-10     	; 0x7b8 <__floatsisf+0x62>
 7c2:	88 0f       	add	r24, r24
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__fp_cmp>:
 7cc:	99 0f       	add	r25, r25
 7ce:	00 08       	sbc	r0, r0
 7d0:	55 0f       	add	r21, r21
 7d2:	aa 0b       	sbc	r26, r26
 7d4:	e0 e8       	ldi	r30, 0x80	; 128
 7d6:	fe ef       	ldi	r31, 0xFE	; 254
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	e8 07       	cpc	r30, r24
 7de:	f9 07       	cpc	r31, r25
 7e0:	c0 f0       	brcs	.+48     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	e4 07       	cpc	r30, r20
 7e8:	f5 07       	cpc	r31, r21
 7ea:	98 f0       	brcs	.+38     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ec:	62 1b       	sub	r22, r18
 7ee:	73 0b       	sbc	r23, r19
 7f0:	84 0b       	sbc	r24, r20
 7f2:	95 0b       	sbc	r25, r21
 7f4:	39 f4       	brne	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	0a 26       	eor	r0, r26
 7f8:	61 f0       	breq	.+24     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7fa:	23 2b       	or	r18, r19
 7fc:	24 2b       	or	r18, r20
 7fe:	25 2b       	or	r18, r21
 800:	21 f4       	brne	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	08 95       	ret
 804:	0a 26       	eor	r0, r26
 806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	a1 40       	sbci	r26, 0x01	; 1
 80a:	a6 95       	lsr	r26
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	81 1d       	adc	r24, r1
 810:	81 1d       	adc	r24, r1
 812:	08 95       	ret

00000814 <__fp_inf>:
 814:	97 f9       	bld	r25, 7
 816:	9f 67       	ori	r25, 0x7F	; 127
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	08 95       	ret

00000820 <__fp_nan>:
 820:	9f ef       	ldi	r25, 0xFF	; 255
 822:	80 ec       	ldi	r24, 0xC0	; 192
 824:	08 95       	ret

00000826 <__fp_pscA>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	09 06       	cpc	r0, r25
 832:	08 95       	ret

00000834 <__fp_pscB>:
 834:	00 24       	eor	r0, r0
 836:	0a 94       	dec	r0
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	14 06       	cpc	r1, r20
 83e:	05 06       	cpc	r0, r21
 840:	08 95       	ret

00000842 <__fp_round>:
 842:	09 2e       	mov	r0, r25
 844:	03 94       	inc	r0
 846:	00 0c       	add	r0, r0
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0xc>
 84a:	88 23       	and	r24, r24
 84c:	52 f0       	brmi	.+20     	; 0x862 <__fp_round+0x20>
 84e:	bb 0f       	add	r27, r27
 850:	40 f4       	brcc	.+16     	; 0x862 <__fp_round+0x20>
 852:	bf 2b       	or	r27, r31
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0x18>
 856:	60 ff       	sbrs	r22, 0
 858:	04 c0       	rjmp	.+8      	; 0x862 <__fp_round+0x20>
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__fp_split3>:
 864:	57 fd       	sbrc	r21, 7
 866:	90 58       	subi	r25, 0x80	; 128
 868:	44 0f       	add	r20, r20
 86a:	55 1f       	adc	r21, r21
 86c:	59 f0       	breq	.+22     	; 0x884 <__fp_splitA+0x10>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	71 f0       	breq	.+28     	; 0x88e <__fp_splitA+0x1a>
 872:	47 95       	ror	r20

00000874 <__fp_splitA>:
 874:	88 0f       	add	r24, r24
 876:	97 fb       	bst	r25, 7
 878:	99 1f       	adc	r25, r25
 87a:	61 f0       	breq	.+24     	; 0x894 <__fp_splitA+0x20>
 87c:	9f 3f       	cpi	r25, 0xFF	; 255
 87e:	79 f0       	breq	.+30     	; 0x89e <__fp_splitA+0x2a>
 880:	87 95       	ror	r24
 882:	08 95       	ret
 884:	12 16       	cp	r1, r18
 886:	13 06       	cpc	r1, r19
 888:	14 06       	cpc	r1, r20
 88a:	55 1f       	adc	r21, r21
 88c:	f2 cf       	rjmp	.-28     	; 0x872 <__fp_split3+0xe>
 88e:	46 95       	lsr	r20
 890:	f1 df       	rcall	.-30     	; 0x874 <__fp_splitA>
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <__fp_splitA+0x30>
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	99 1f       	adc	r25, r25
 89c:	f1 cf       	rjmp	.-30     	; 0x880 <__fp_splitA+0xc>
 89e:	86 95       	lsr	r24
 8a0:	71 05       	cpc	r23, r1
 8a2:	61 05       	cpc	r22, r1
 8a4:	08 94       	sec
 8a6:	08 95       	ret

000008a8 <__fp_zero>:
 8a8:	e8 94       	clt

000008aa <__fp_szero>:
 8aa:	bb 27       	eor	r27, r27
 8ac:	66 27       	eor	r22, r22
 8ae:	77 27       	eor	r23, r23
 8b0:	cb 01       	movw	r24, r22
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__gesf2>:
 8b6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_cmp>
 8ba:	08 f4       	brcc	.+2      	; 0x8be <__gesf2+0x8>
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <log10>:
 8c0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <log>
 8c4:	29 ed       	ldi	r18, 0xD9	; 217
 8c6:	3b e5       	ldi	r19, 0x5B	; 91
 8c8:	4e ed       	ldi	r20, 0xDE	; 222
 8ca:	5e e3       	ldi	r21, 0x3E	; 62
 8cc:	0c 94 b8 04 	jmp	0x970	; 0x970 <__mulsf3>
 8d0:	16 f0       	brts	.+4      	; 0x8d6 <log10+0x16>
 8d2:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_mpack>
 8d6:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>
 8da:	68 94       	set
 8dc:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>

000008e0 <log>:
 8e0:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_splitA>
 8e4:	a8 f3       	brcs	.-22     	; 0x8d0 <log10+0x10>
 8e6:	99 23       	and	r25, r25
 8e8:	c1 f3       	breq	.-16     	; 0x8da <log10+0x1a>
 8ea:	ae f3       	brts	.-22     	; 0x8d6 <log10+0x16>
 8ec:	df 93       	push	r29
 8ee:	cf 93       	push	r28
 8f0:	1f 93       	push	r17
 8f2:	0f 93       	push	r16
 8f4:	ff 92       	push	r15
 8f6:	c9 2f       	mov	r28, r25
 8f8:	dd 27       	eor	r29, r29
 8fa:	88 23       	and	r24, r24
 8fc:	2a f0       	brmi	.+10     	; 0x908 <__stack+0x9>
 8fe:	21 97       	sbiw	r28, 0x01	; 1
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	da f7       	brpl	.-10     	; 0x8fe <log+0x1e>
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	40 e8       	ldi	r20, 0x80	; 128
 90e:	5f eb       	ldi	r21, 0xBF	; 191
 910:	9f e3       	ldi	r25, 0x3F	; 63
 912:	88 39       	cpi	r24, 0x98	; 152
 914:	20 f0       	brcs	.+8      	; 0x91e <__stack+0x1f>
 916:	80 3e       	cpi	r24, 0xE0	; 224
 918:	38 f0       	brcs	.+14     	; 0x928 <__stack+0x29>
 91a:	21 96       	adiw	r28, 0x01	; 1
 91c:	8f 77       	andi	r24, 0x7F	; 127
 91e:	0e 94 02 03 	call	0x604	; 0x604 <__addsf3>
 922:	e8 e6       	ldi	r30, 0x68	; 104
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	04 c0       	rjmp	.+8      	; 0x930 <__stack+0x31>
 928:	0e 94 02 03 	call	0x604	; 0x604 <__addsf3>
 92c:	e5 e9       	ldi	r30, 0x95	; 149
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_powser>
 934:	8b 01       	movw	r16, r22
 936:	be 01       	movw	r22, r28
 938:	ec 01       	movw	r28, r24
 93a:	fb 2e       	mov	r15, r27
 93c:	6f 57       	subi	r22, 0x7F	; 127
 93e:	71 09       	sbc	r23, r1
 940:	75 95       	asr	r23
 942:	77 1f       	adc	r23, r23
 944:	88 0b       	sbc	r24, r24
 946:	99 0b       	sbc	r25, r25
 948:	0e 94 ab 03 	call	0x756	; 0x756 <__floatsisf>
 94c:	28 e1       	ldi	r18, 0x18	; 24
 94e:	32 e7       	ldi	r19, 0x72	; 114
 950:	41 e3       	ldi	r20, 0x31	; 49
 952:	5f e3       	ldi	r21, 0x3F	; 63
 954:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsf3x>
 958:	af 2d       	mov	r26, r15
 95a:	98 01       	movw	r18, r16
 95c:	ae 01       	movw	r20, r28
 95e:	ff 90       	pop	r15
 960:	0f 91       	pop	r16
 962:	1f 91       	pop	r17
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	0e 94 19 03 	call	0x632	; 0x632 <__addsf3x>
 96c:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>

00000970 <__mulsf3>:
 970:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsf3x>
 974:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 978:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 97c:	38 f0       	brcs	.+14     	; 0x98c <__mulsf3+0x1c>
 97e:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 982:	20 f0       	brcs	.+8      	; 0x98c <__mulsf3+0x1c>
 984:	95 23       	and	r25, r21
 986:	11 f0       	breq	.+4      	; 0x98c <__mulsf3+0x1c>
 988:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 98c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>
 990:	11 24       	eor	r1, r1
 992:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>

00000996 <__mulsf3x>:
 996:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 99a:	70 f3       	brcs	.-36     	; 0x978 <__mulsf3+0x8>

0000099c <__mulsf3_pse>:
 99c:	95 9f       	mul	r25, r21
 99e:	c1 f3       	breq	.-16     	; 0x990 <__mulsf3+0x20>
 9a0:	95 0f       	add	r25, r21
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	55 1f       	adc	r21, r21
 9a6:	62 9f       	mul	r22, r18
 9a8:	f0 01       	movw	r30, r0
 9aa:	72 9f       	mul	r23, r18
 9ac:	bb 27       	eor	r27, r27
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	63 9f       	mul	r22, r19
 9b4:	aa 27       	eor	r26, r26
 9b6:	f0 0d       	add	r31, r0
 9b8:	b1 1d       	adc	r27, r1
 9ba:	aa 1f       	adc	r26, r26
 9bc:	64 9f       	mul	r22, r20
 9be:	66 27       	eor	r22, r22
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	66 1f       	adc	r22, r22
 9c6:	82 9f       	mul	r24, r18
 9c8:	22 27       	eor	r18, r18
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	73 9f       	mul	r23, r19
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	62 1f       	adc	r22, r18
 9d8:	83 9f       	mul	r24, r19
 9da:	a0 0d       	add	r26, r0
 9dc:	61 1d       	adc	r22, r1
 9de:	22 1f       	adc	r18, r18
 9e0:	74 9f       	mul	r23, r20
 9e2:	33 27       	eor	r19, r19
 9e4:	a0 0d       	add	r26, r0
 9e6:	61 1d       	adc	r22, r1
 9e8:	23 1f       	adc	r18, r19
 9ea:	84 9f       	mul	r24, r20
 9ec:	60 0d       	add	r22, r0
 9ee:	21 1d       	adc	r18, r1
 9f0:	82 2f       	mov	r24, r18
 9f2:	76 2f       	mov	r23, r22
 9f4:	6a 2f       	mov	r22, r26
 9f6:	11 24       	eor	r1, r1
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	9a f0       	brmi	.+38     	; 0xa24 <__mulsf3_pse+0x88>
 9fe:	f1 f0       	breq	.+60     	; 0xa3c <__mulsf3_pse+0xa0>
 a00:	88 23       	and	r24, r24
 a02:	4a f0       	brmi	.+18     	; 0xa16 <__mulsf3_pse+0x7a>
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	bb 1f       	adc	r27, r27
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	91 50       	subi	r25, 0x01	; 1
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	a9 f7       	brne	.-22     	; 0xa00 <__mulsf3_pse+0x64>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	80 f0       	brcs	.+32     	; 0xa3c <__mulsf3_pse+0xa0>
 a1c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 a20:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	e4 f3       	brlt	.-8      	; 0xa20 <__mulsf3_pse+0x84>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	d4 f3       	brlt	.-12     	; 0xa20 <__mulsf3_pse+0x84>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	e7 95       	ror	r30
 a38:	9f 5f       	subi	r25, 0xFF	; 255
 a3a:	c1 f7       	brne	.-16     	; 0xa2c <__mulsf3_pse+0x90>
 a3c:	fe 2b       	or	r31, r30
 a3e:	88 0f       	add	r24, r24
 a40:	91 1d       	adc	r25, r1
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__fp_mpack>:
 a4a:	9f 3f       	cpi	r25, 0xFF	; 255
 a4c:	31 f0       	breq	.+12     	; 0xa5a <__fp_mpack_finite+0xc>

00000a4e <__fp_mpack_finite>:
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	20 f4       	brcc	.+8      	; 0xa5a <__fp_mpack_finite+0xc>
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b7 95       	ror	r27
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <__fp_powser>:
 a66:	df 93       	push	r29
 a68:	cf 93       	push	r28
 a6a:	1f 93       	push	r17
 a6c:	0f 93       	push	r16
 a6e:	ff 92       	push	r15
 a70:	ef 92       	push	r14
 a72:	df 92       	push	r13
 a74:	7b 01       	movw	r14, r22
 a76:	8c 01       	movw	r16, r24
 a78:	68 94       	set
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__fp_powser+0x22>
 a7c:	da 2e       	mov	r13, r26
 a7e:	ef 01       	movw	r28, r30
 a80:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsf3x>
 a84:	fe 01       	movw	r30, r28
 a86:	e8 94       	clt
 a88:	a5 91       	lpm	r26, Z+
 a8a:	25 91       	lpm	r18, Z+
 a8c:	35 91       	lpm	r19, Z+
 a8e:	45 91       	lpm	r20, Z+
 a90:	55 91       	lpm	r21, Z+
 a92:	a6 f3       	brts	.-24     	; 0xa7c <__fp_powser+0x16>
 a94:	ef 01       	movw	r28, r30
 a96:	0e 94 19 03 	call	0x632	; 0x632 <__addsf3x>
 a9a:	fe 01       	movw	r30, r28
 a9c:	97 01       	movw	r18, r14
 a9e:	a8 01       	movw	r20, r16
 aa0:	da 94       	dec	r13
 aa2:	69 f7       	brne	.-38     	; 0xa7e <__fp_powser+0x18>
 aa4:	df 90       	pop	r13
 aa6:	ef 90       	pop	r14
 aa8:	ff 90       	pop	r15
 aaa:	0f 91       	pop	r16
 aac:	1f 91       	pop	r17
 aae:	cf 91       	pop	r28
 ab0:	df 91       	pop	r29
 ab2:	08 95       	ret

00000ab4 <__umulhisi3>:
 ab4:	a2 9f       	mul	r26, r18
 ab6:	b0 01       	movw	r22, r0
 ab8:	b3 9f       	mul	r27, r19
 aba:	c0 01       	movw	r24, r0
 abc:	a3 9f       	mul	r26, r19
 abe:	70 0d       	add	r23, r0
 ac0:	81 1d       	adc	r24, r1
 ac2:	11 24       	eor	r1, r1
 ac4:	91 1d       	adc	r25, r1
 ac6:	b2 9f       	mul	r27, r18
 ac8:	70 0d       	add	r23, r0
 aca:	81 1d       	adc	r24, r1
 acc:	11 24       	eor	r1, r1
 ace:	91 1d       	adc	r25, r1
 ad0:	08 95       	ret

00000ad2 <_exit>:
 ad2:	f8 94       	cli

00000ad4 <__stop_program>:
 ad4:	ff cf       	rjmp	.-2      	; 0xad4 <__stop_program>
