
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b8  00800100  00000a8e  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000727  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000529  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026b  00000000  00000000  00002ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <log+0x24>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	12 e0       	ldi	r17, 0x02	; 2
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ee e8       	ldi	r30, 0x8E	; 142
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a8 3b       	cpi	r26, 0xB8	; 184
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	a8 eb       	ldi	r26, 0xB8	; 184
  e8:	b2 e0       	ldi	r27, 0x02	; 2
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a8 3b       	cpi	r26, 0xB8	; 184
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
  f8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
#define F_CPU 16000000UL

void init_ALL(void);

int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	00 d0       	rcall	.+0      	; 0x106 <main+0x6>
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x8>
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	
	int received_data = 0;
 10e:	1a 82       	std	Y+2, r1	; 0x02
 110:	19 82       	std	Y+1, r1	; 0x01
	uint16_t testVal2 = 65.879;
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9c 83       	std	Y+4, r25	; 0x04
 118:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t address = 0;
 11a:	1d 82       	std	Y+5, r1	; 0x05
    
	init_I2C();
 11c:	0e 94 9a 00 	call	0x134	; 0x134 <init_I2C>
	//address = I2C_scan();
    while (1) 
    {
		
		received_data = I2C_recieve(104);
 120:	88 e6       	ldi	r24, 0x68	; 104
 122:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_recieve>
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
		USART_int_transmit(received_data);
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <USART_int_transmit>
    }
 132:	f6 cf       	rjmp	.-20     	; 0x120 <main+0x20>

00000134 <init_I2C>:
		}
		TWCR = STOP;
	}
	USART_char_transmit("No Devices Found");
	return 0;
}
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	87 e2       	ldi	r24, 0x27	; 39
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	27 e2       	ldi	r18, 0x27	; 39
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	2f 7c       	andi	r18, 0xCF	; 207
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	88 e2       	ldi	r24, 0x28	; 40
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	28 e2       	ldi	r18, 0x28	; 40
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	20 63       	ori	r18, 0x30	; 48
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
 160:	89 eb       	ldi	r24, 0xB9	; 185
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	10 82       	st	Z, r1
 168:	88 eb       	ldi	r24, 0xB8	; 184
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	28 e4       	ldi	r18, 0x48	; 72
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
 172:	00 00       	nop
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <I2C_recieve>:

uint16_t I2C_recieve(uint8_t address)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	63 97       	sbiw	r28, 0x13	; 19
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	8b 8b       	std	Y+19, r24	; 0x13
	int data = 0;
 190:	1a 82       	std	Y+2, r1	; 0x02
 192:	19 82       	std	Y+1, r1	; 0x01
	TWCR = START;
 194:	8c eb       	ldi	r24, 0xBC	; 188
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	24 ea       	ldi	r18, 0xA4	; 164
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)))
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <I2C_recieve+0x2e>
	{
		USART_char_transmit("Waiting for Acknowledgment of START");
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>

uint16_t I2C_recieve(uint8_t address)
{
	int data = 0;
	TWCR = START;
	while (!(TWCR & (1<<TWINT)))
 1a8:	8c eb       	ldi	r24, 0xBC	; 188
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	b4 f7       	brge	.-20     	; 0x1a0 <I2C_recieve+0x26>
	{
		USART_char_transmit("Waiting for Acknowledgment of START");
	}
	USART_char_transmit("START Acknowledged");
 1b4:	86 e6       	ldi	r24, 0x66	; 102
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
	while (TWSR != 0x08)
 1bc:	88 c0       	rjmp	.+272    	; 0x2ce <I2C_recieve+0x154>
	{
		uint16_t error = 0;
 1be:	1c 82       	std	Y+4, r1	; 0x04
 1c0:	1b 82       	std	Y+3, r1	; 0x03
		USART_char_transmit("An Error Occurred While Initializing I2C");
 1c2:	89 e7       	ldi	r24, 0x79	; 121
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		USART_char_transmit("Expected 08 but got the following:");
 1ca:	82 ea       	ldi	r24, 0xA2	; 162
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		error = TWSR;
 1d2:	89 eb       	ldi	r24, 0xB9	; 185
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 83       	std	Y+4, r25	; 0x04
 1e0:	8b 83       	std	Y+3, r24	; 0x03
		USART_int_transmit(error);
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <USART_int_transmit>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	aa e7       	ldi	r26, 0x7A	; 122
 1f0:	b4 e4       	ldi	r27, 0x44	; 68
 1f2:	8d 83       	std	Y+5, r24	; 0x05
 1f4:	9e 83       	std	Y+6, r25	; 0x06
 1f6:	af 83       	std	Y+7, r26	; 0x07
 1f8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	4a e7       	ldi	r20, 0x7A	; 122
 200:	53 e4       	ldi	r21, 0x43	; 67
 202:	6d 81       	ldd	r22, Y+5	; 0x05
 204:	7e 81       	ldd	r23, Y+6	; 0x06
 206:	8f 81       	ldd	r24, Y+7	; 0x07
 208:	98 85       	ldd	r25, Y+8	; 0x08
 20a:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	89 87       	std	Y+9, r24	; 0x09
 214:	9a 87       	std	Y+10, r25	; 0x0a
 216:	ab 87       	std	Y+11, r26	; 0x0b
 218:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e8       	ldi	r20, 0x80	; 128
 220:	5f e3       	ldi	r21, 0x3F	; 63
 222:	69 85       	ldd	r22, Y+9	; 0x09
 224:	7a 85       	ldd	r23, Y+10	; 0x0a
 226:	8b 85       	ldd	r24, Y+11	; 0x0b
 228:	9c 85       	ldd	r25, Y+12	; 0x0c
 22a:	0e 94 4a 03 	call	0x694	; 0x694 <__cmpsf2>
 22e:	88 23       	and	r24, r24
 230:	2c f4       	brge	.+10     	; 0x23c <I2C_recieve+0xc2>
		__ticks = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	9e 87       	std	Y+14, r25	; 0x0e
 238:	8d 87       	std	Y+13, r24	; 0x0d
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <I2C_recieve+0x140>
	else if (__tmp > 65535)
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	3f ef       	ldi	r19, 0xFF	; 255
 240:	4f e7       	ldi	r20, 0x7F	; 127
 242:	57 e4       	ldi	r21, 0x47	; 71
 244:	69 85       	ldd	r22, Y+9	; 0x09
 246:	7a 85       	ldd	r23, Y+10	; 0x0a
 248:	8b 85       	ldd	r24, Y+11	; 0x0b
 24a:	9c 85       	ldd	r25, Y+12	; 0x0c
 24c:	0e 94 37 04 	call	0x86e	; 0x86e <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	4c f5       	brge	.+82     	; 0x2a6 <I2C_recieve+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e2       	ldi	r20, 0x20	; 32
 25a:	51 e4       	ldi	r21, 0x41	; 65
 25c:	6d 81       	ldd	r22, Y+5	; 0x05
 25e:	7e 81       	ldd	r23, Y+6	; 0x06
 260:	8f 81       	ldd	r24, Y+7	; 0x07
 262:	98 85       	ldd	r25, Y+8	; 0x08
 264:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	bc 01       	movw	r22, r24
 26e:	cd 01       	movw	r24, r26
 270:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixunssfsi>
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	9e 87       	std	Y+14, r25	; 0x0e
 27a:	8d 87       	std	Y+13, r24	; 0x0d
 27c:	0f c0       	rjmp	.+30     	; 0x29c <I2C_recieve+0x122>
 27e:	89 e1       	ldi	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	98 8b       	std	Y+16, r25	; 0x10
 284:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 286:	8f 85       	ldd	r24, Y+15	; 0x0f
 288:	98 89       	ldd	r25, Y+16	; 0x10
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <I2C_recieve+0x110>
 28e:	98 8b       	std	Y+16, r25	; 0x10
 290:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	8d 85       	ldd	r24, Y+13	; 0x0d
 294:	9e 85       	ldd	r25, Y+14	; 0x0e
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	9e 87       	std	Y+14, r25	; 0x0e
 29a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	8d 85       	ldd	r24, Y+13	; 0x0d
 29e:	9e 85       	ldd	r25, Y+14	; 0x0e
 2a0:	89 2b       	or	r24, r25
 2a2:	69 f7       	brne	.-38     	; 0x27e <I2C_recieve+0x104>
 2a4:	14 c0       	rjmp	.+40     	; 0x2ce <I2C_recieve+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a6:	69 85       	ldd	r22, Y+9	; 0x09
 2a8:	7a 85       	ldd	r23, Y+10	; 0x0a
 2aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ac:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ae:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixunssfsi>
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	9e 87       	std	Y+14, r25	; 0x0e
 2b8:	8d 87       	std	Y+13, r24	; 0x0d
 2ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 2bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2be:	9a 8b       	std	Y+18, r25	; 0x12
 2c0:	89 8b       	std	Y+17, r24	; 0x11
 2c2:	89 89       	ldd	r24, Y+17	; 0x11
 2c4:	9a 89       	ldd	r25, Y+18	; 0x12
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <I2C_recieve+0x14c>
 2ca:	9a 8b       	std	Y+18, r25	; 0x12
 2cc:	89 8b       	std	Y+17, r24	; 0x11
	while (!(TWCR & (1<<TWINT)))
	{
		USART_char_transmit("Waiting for Acknowledgment of START");
	}
	USART_char_transmit("START Acknowledged");
	while (TWSR != 0x08)
 2ce:	89 eb       	ldi	r24, 0xB9	; 185
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	09 f0       	breq	.+2      	; 0x2dc <I2C_recieve+0x162>
 2da:	71 cf       	rjmp	.-286    	; 0x1be <I2C_recieve+0x44>
		error = TWSR;
		USART_int_transmit(error);
		_delay_ms(1000);
		
	}
	USART_char_transmit("I2C Initialization Successful");
 2dc:	85 ec       	ldi	r24, 0xC5	; 197
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
	TWCR = CLEAR;
 2e4:	8c eb       	ldi	r24, 0xBC	; 188
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	24 e8       	ldi	r18, 0x84	; 132
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
	TWDR = ((address<<1) | PORTC4);
 2ee:	8b eb       	ldi	r24, 0xBB	; 187
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	2b 89       	ldd	r18, Y+19	; 0x13
 2f4:	22 2f       	mov	r18, r18
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	24 60       	ori	r18, 0x04	; 4
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
	while (!(TWCR & (1<< TWINT)));
 302:	00 00       	nop
 304:	8c eb       	ldi	r24, 0xBC	; 188
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	88 23       	and	r24, r24
 30e:	d4 f7       	brge	.-12     	; 0x304 <I2C_recieve+0x18a>
	
	if (TWSR == 0x38)
 310:	89 eb       	ldi	r24, 0xB9	; 185
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	88 33       	cpi	r24, 0x38	; 56
 31a:	29 f4       	brne	.+10     	; 0x326 <I2C_recieve+0x1ac>
	{
		USART_char_transmit("Arbitration Lost");
 31c:	83 ee       	ldi	r24, 0xE3	; 227
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
 324:	42 c0       	rjmp	.+132    	; 0x3aa <I2C_recieve+0x230>
	}
	else if (TWSR == 0x40)
 326:	89 eb       	ldi	r24, 0xB9	; 185
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	80 34       	cpi	r24, 0x40	; 64
 330:	99 f4       	brne	.+38     	; 0x358 <I2C_recieve+0x1de>
	{
		USART_char_transmit("Mode Transmitted: Master Receive Mode. Device Acknowledged");
 332:	84 ef       	ldi	r24, 0xF4	; 244
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		data = TWDR*100;
 33a:	8b eb       	ldi	r24, 0xBB	; 187
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	fc 01       	movw	r30, r24
 340:	80 81       	ld	r24, Z
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	44 e6       	ldi	r20, 0x64	; 100
 348:	42 9f       	mul	r20, r18
 34a:	c0 01       	movw	r24, r0
 34c:	43 9f       	mul	r20, r19
 34e:	90 0d       	add	r25, r0
 350:	11 24       	eor	r1, r1
 352:	9a 83       	std	Y+2, r25	; 0x02
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	29 c0       	rjmp	.+82     	; 0x3aa <I2C_recieve+0x230>
	}
	else if (TWSR == 0x48)
 358:	89 eb       	ldi	r24, 0xB9	; 185
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	88 34       	cpi	r24, 0x48	; 72
 362:	99 f4       	brne	.+38     	; 0x38a <I2C_recieve+0x210>
	{
		USART_char_transmit("No Acknowledgment from Device: Attempting to Fix");
 364:	8f e2       	ldi	r24, 0x2F	; 47
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		data = TWDR*100;
 36c:	8b eb       	ldi	r24, 0xBB	; 187
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	44 e6       	ldi	r20, 0x64	; 100
 37a:	42 9f       	mul	r20, r18
 37c:	c0 01       	movw	r24, r0
 37e:	43 9f       	mul	r20, r19
 380:	90 0d       	add	r25, r0
 382:	11 24       	eor	r1, r1
 384:	9a 83       	std	Y+2, r25	; 0x02
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	10 c0       	rjmp	.+32     	; 0x3aa <I2C_recieve+0x230>
		
	}
	else
	{
		USART_char_transmit("Did not register valid status code!");
 38a:	80 e6       	ldi	r24, 0x60	; 96
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		USART_char_transmit("Expected 38, 40, or 48, but received the following:");
 392:	84 e8       	ldi	r24, 0x84	; 132
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	0e 94 a1 02 	call	0x542	; 0x542 <USART_char_transmit>
		USART_int_transmit(TWSR);
 39a:	89 eb       	ldi	r24, 0xB9	; 185
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <USART_int_transmit>
		
	}
	TWCR = STOP;
 3aa:	8c eb       	ldi	r24, 0xBC	; 188
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	24 e9       	ldi	r18, 0x94	; 148
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
	return data;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	9a 81       	ldd	r25, Y+2	; 0x02
 3b8:	63 96       	adiw	r28, 0x13	; 19
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	64 97       	sbiw	r28, 0x14	; 20
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	9c 8b       	std	Y+20, r25	; 0x14
 3e0:	8b 8b       	std	Y+19, r24	; 0x13
	int nDigits = log10(data)+1;
 3e2:	8b 89       	ldd	r24, Y+19	; 0x13
 3e4:	9c 89       	ldd	r25, Y+20	; 0x14
 3e6:	cc 01       	movw	r24, r24
 3e8:	a0 e0       	ldi	r26, 0x00	; 0
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	0e 94 85 03 	call	0x70a	; 0x70a <__floatunsisf>
 3f4:	dc 01       	movw	r26, r24
 3f6:	cb 01       	movw	r24, r22
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	0e 94 3c 04 	call	0x878	; 0x878 <log10>
 400:	dc 01       	movw	r26, r24
 402:	cb 01       	movw	r24, r22
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 e8       	ldi	r20, 0x80	; 128
 40a:	5f e3       	ldi	r21, 0x3F	; 63
 40c:	bc 01       	movw	r22, r24
 40e:	cd 01       	movw	r24, r26
 410:	0e 94 de 02 	call	0x5bc	; 0x5bc <__addsf3>
 414:	dc 01       	movw	r26, r24
 416:	cb 01       	movw	r24, r22
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixsfsi>
 420:	dc 01       	movw	r26, r24
 422:	cb 01       	movw	r24, r22
 424:	9e 83       	std	Y+6, r25	; 0x06
 426:	8d 83       	std	Y+5, r24	; 0x05
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	9e 81       	ldd	r25, Y+6	; 0x06
 42c:	9a 83       	std	Y+2, r25	; 0x02
 42e:	89 83       	std	Y+1, r24	; 0x01
 430:	3c c0       	rjmp	.+120    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		numParser = data % 10;
 432:	4b 89       	ldd	r20, Y+19	; 0x13
 434:	5c 89       	ldd	r21, Y+20	; 0x14
 436:	9a 01       	movw	r18, r20
 438:	ad ec       	ldi	r26, 0xCD	; 205
 43a:	bc ec       	ldi	r27, 0xCC	; 204
 43c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__umulhisi3>
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	9c 01       	movw	r18, r24
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	82 0f       	add	r24, r18
 45c:	93 1f       	adc	r25, r19
 45e:	9a 01       	movw	r18, r20
 460:	28 1b       	sub	r18, r24
 462:	39 0b       	sbc	r19, r25
 464:	c9 01       	movw	r24, r18
 466:	98 87       	std	Y+8, r25	; 0x08
 468:	8f 83       	std	Y+7, r24	; 0x07
		data = data / 10;
 46a:	8b 89       	ldd	r24, Y+19	; 0x13
 46c:	9c 89       	ldd	r25, Y+20	; 0x14
 46e:	9c 01       	movw	r18, r24
 470:	ad ec       	ldi	r26, 0xCD	; 205
 472:	bc ec       	ldi	r27, 0xCC	; 204
 474:	0e 94 36 05 	call	0xa6c	; 0xa6c <__umulhisi3>
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	9c 8b       	std	Y+20, r25	; 0x14
 486:	8b 8b       	std	Y+19, r24	; 0x13
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
 488:	8f 81       	ldd	r24, Y+7	; 0x07
 48a:	40 e3       	ldi	r20, 0x30	; 48
 48c:	48 0f       	add	r20, r24
 48e:	9e 01       	movw	r18, r28
 490:	27 5f       	subi	r18, 0xF7	; 247
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	82 0f       	add	r24, r18
 49a:	93 1f       	adc	r25, r19
 49c:	fc 01       	movw	r30, r24
 49e:	40 83       	st	Z, r20
	int nDigits = log10(data)+1;
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	18 16       	cp	r1, r24
 4b0:	19 06       	cpc	r1, r25
 4b2:	0c f4       	brge	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b4:	be cf       	rjmp	.-132    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9c 83       	std	Y+4, r25	; 0x04
 4bc:	8b 83       	std	Y+3, r24	; 0x03
 4be:	1d c0       	rjmp	.+58     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 4c0:	00 00       	nop
 4c2:	80 ec       	ldi	r24, 0xC0	; 192
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	80 81       	ld	r24, Z
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	80 72       	andi	r24, 0x20	; 32
 4d0:	99 27       	eor	r25, r25
 4d2:	89 2b       	or	r24, r25
 4d4:	b1 f3       	breq	.-20     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		UDR0 = transmit_buffer[i];
 4d6:	86 ec       	ldi	r24, 0xC6	; 198
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	ae 01       	movw	r20, r28
 4dc:	47 5f       	subi	r20, 0xF7	; 247
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	2b 81       	ldd	r18, Y+3	; 0x03
 4e2:	3c 81       	ldd	r19, Y+4	; 0x04
 4e4:	24 0f       	add	r18, r20
 4e6:	35 1f       	adc	r19, r21
 4e8:	f9 01       	movw	r30, r18
 4ea:	20 81       	ld	r18, Z
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	9c 81       	ldd	r25, Y+4	; 0x04
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	9c 83       	std	Y+4, r25	; 0x04
 4f8:	8b 83       	std	Y+3, r24	; 0x03
 4fa:	8d 81       	ldd	r24, Y+5	; 0x05
 4fc:	9e 81       	ldd	r25, Y+6	; 0x06
 4fe:	9c 01       	movw	r18, r24
 500:	2f 5f       	subi	r18, 0xFF	; 255
 502:	3f 4f       	sbci	r19, 0xFF	; 255
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	9c 81       	ldd	r25, Y+4	; 0x04
 508:	82 17       	cp	r24, r18
 50a:	93 07       	cpc	r25, r19
 50c:	cc f2       	brlt	.-78     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
		UDR0 = transmit_buffer[i];
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 50e:	00 00       	nop
 510:	80 ec       	ldi	r24, 0xC0	; 192
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	80 81       	ld	r24, Z
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	80 72       	andi	r24, 0x20	; 32
 51e:	99 27       	eor	r25, r25
 520:	89 2b       	or	r24, r25
 522:	b1 f3       	breq	.-20     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
	UDR0 = 0x0A;	//New Line
 524:	86 ec       	ldi	r24, 0xC6	; 198
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2a e0       	ldi	r18, 0x0A	; 10
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
}
 52e:	00 00       	nop
 530:	64 96       	adiw	r28, 0x14	; 20
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <USART_char_transmit>:

void USART_char_transmit(const char *buffer)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <USART_char_transmit+0x6>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
	while(*buffer)
 550:	18 c0       	rjmp	.+48     	; 0x582 <USART_char_transmit+0x40>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 552:	00 00       	nop
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	fc 01       	movw	r30, r24
 55a:	80 81       	ld	r24, Z
 55c:	88 2f       	mov	r24, r24
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	80 72       	andi	r24, 0x20	; 32
 562:	99 27       	eor	r25, r25
 564:	89 2b       	or	r24, r25
 566:	b1 f3       	breq	.-20     	; 0x554 <USART_char_transmit+0x12>
		UDR0 = *buffer; //set UDR0 to character
 568:	86 ec       	ldi	r24, 0xC6	; 198
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	29 81       	ldd	r18, Y+1	; 0x01
 56e:	3a 81       	ldd	r19, Y+2	; 0x02
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
		buffer++;
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	9a 81       	ldd	r25, Y+2	; 0x02
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	9a 83       	std	Y+2, r25	; 0x02
 580:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = 0x0A;	//New Line
}

void USART_char_transmit(const char *buffer)
{
	while(*buffer)
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	fc 01       	movw	r30, r24
 588:	80 81       	ld	r24, Z
 58a:	88 23       	and	r24, r24
 58c:	11 f7       	brne	.-60     	; 0x552 <USART_char_transmit+0x10>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = *buffer; //set UDR0 to character
		buffer++;
	}
	while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 58e:	00 00       	nop
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	fc 01       	movw	r30, r24
 596:	80 81       	ld	r24, Z
 598:	88 2f       	mov	r24, r24
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	80 72       	andi	r24, 0x20	; 32
 59e:	99 27       	eor	r25, r25
 5a0:	89 2b       	or	r24, r25
 5a2:	b1 f3       	breq	.-20     	; 0x590 <USART_char_transmit+0x4e>
	UDR0 = 0x0A;
 5a4:	86 ec       	ldi	r24, 0xC6	; 198
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	2a e0       	ldi	r18, 0x0A	; 10
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
}
 5ae:	00 00       	nop
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <__subsf3>:
 5ba:	50 58       	subi	r21, 0x80	; 128

000005bc <__addsf3>:
 5bc:	bb 27       	eor	r27, r27
 5be:	aa 27       	eor	r26, r26
 5c0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__addsf3x>
 5c4:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_round>
 5c8:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscA>
 5cc:	38 f0       	brcs	.+14     	; 0x5dc <__addsf3+0x20>
 5ce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_pscB>
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__addsf3+0x20>
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <__addsf3+0x28>
 5d6:	9f 3f       	cpi	r25, 0xFF	; 255
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <__addsf3+0x24>
 5da:	26 f4       	brtc	.+8      	; 0x5e4 <__addsf3+0x28>
 5dc:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_nan>
 5e0:	0e f4       	brtc	.+2      	; 0x5e4 <__addsf3+0x28>
 5e2:	e0 95       	com	r30
 5e4:	e7 fb       	bst	r30, 7
 5e6:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_inf>

000005ea <__addsf3x>:
 5ea:	e9 2f       	mov	r30, r25
 5ec:	0e 94 0e 04 	call	0x81c	; 0x81c <__fp_split3>
 5f0:	58 f3       	brcs	.-42     	; 0x5c8 <__addsf3+0xc>
 5f2:	ba 17       	cp	r27, r26
 5f4:	62 07       	cpc	r22, r18
 5f6:	73 07       	cpc	r23, r19
 5f8:	84 07       	cpc	r24, r20
 5fa:	95 07       	cpc	r25, r21
 5fc:	20 f0       	brcs	.+8      	; 0x606 <__addsf3x+0x1c>
 5fe:	79 f4       	brne	.+30     	; 0x61e <__addsf3x+0x34>
 600:	a6 f5       	brtc	.+104    	; 0x66a <__addsf3x+0x80>
 602:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_zero>
 606:	0e f4       	brtc	.+2      	; 0x60a <__addsf3x+0x20>
 608:	e0 95       	com	r30
 60a:	0b 2e       	mov	r0, r27
 60c:	ba 2f       	mov	r27, r26
 60e:	a0 2d       	mov	r26, r0
 610:	0b 01       	movw	r0, r22
 612:	b9 01       	movw	r22, r18
 614:	90 01       	movw	r18, r0
 616:	0c 01       	movw	r0, r24
 618:	ca 01       	movw	r24, r20
 61a:	a0 01       	movw	r20, r0
 61c:	11 24       	eor	r1, r1
 61e:	ff 27       	eor	r31, r31
 620:	59 1b       	sub	r21, r25
 622:	99 f0       	breq	.+38     	; 0x64a <__addsf3x+0x60>
 624:	59 3f       	cpi	r21, 0xF9	; 249
 626:	50 f4       	brcc	.+20     	; 0x63c <__addsf3x+0x52>
 628:	50 3e       	cpi	r21, 0xE0	; 224
 62a:	68 f1       	brcs	.+90     	; 0x686 <__addsf3x+0x9c>
 62c:	1a 16       	cp	r1, r26
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	a2 2f       	mov	r26, r18
 632:	23 2f       	mov	r18, r19
 634:	34 2f       	mov	r19, r20
 636:	44 27       	eor	r20, r20
 638:	58 5f       	subi	r21, 0xF8	; 248
 63a:	f3 cf       	rjmp	.-26     	; 0x622 <__addsf3x+0x38>
 63c:	46 95       	lsr	r20
 63e:	37 95       	ror	r19
 640:	27 95       	ror	r18
 642:	a7 95       	ror	r26
 644:	f0 40       	sbci	r31, 0x00	; 0
 646:	53 95       	inc	r21
 648:	c9 f7       	brne	.-14     	; 0x63c <__addsf3x+0x52>
 64a:	7e f4       	brtc	.+30     	; 0x66a <__addsf3x+0x80>
 64c:	1f 16       	cp	r1, r31
 64e:	ba 0b       	sbc	r27, r26
 650:	62 0b       	sbc	r22, r18
 652:	73 0b       	sbc	r23, r19
 654:	84 0b       	sbc	r24, r20
 656:	ba f0       	brmi	.+46     	; 0x686 <__addsf3x+0x9c>
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	a1 f0       	breq	.+40     	; 0x684 <__addsf3x+0x9a>
 65c:	ff 0f       	add	r31, r31
 65e:	bb 1f       	adc	r27, r27
 660:	66 1f       	adc	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	c2 f7       	brpl	.-16     	; 0x658 <__addsf3x+0x6e>
 668:	0e c0       	rjmp	.+28     	; 0x686 <__addsf3x+0x9c>
 66a:	ba 0f       	add	r27, r26
 66c:	62 1f       	adc	r22, r18
 66e:	73 1f       	adc	r23, r19
 670:	84 1f       	adc	r24, r20
 672:	48 f4       	brcc	.+18     	; 0x686 <__addsf3x+0x9c>
 674:	87 95       	ror	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	f7 95       	ror	r31
 67e:	9e 3f       	cpi	r25, 0xFE	; 254
 680:	08 f0       	brcs	.+2      	; 0x684 <__addsf3x+0x9a>
 682:	b0 cf       	rjmp	.-160    	; 0x5e4 <__addsf3+0x28>
 684:	93 95       	inc	r25
 686:	88 0f       	add	r24, r24
 688:	08 f0       	brcs	.+2      	; 0x68c <__addsf3x+0xa2>
 68a:	99 27       	eor	r25, r25
 68c:	ee 0f       	add	r30, r30
 68e:	97 95       	ror	r25
 690:	87 95       	ror	r24
 692:	08 95       	ret

00000694 <__cmpsf2>:
 694:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_cmp>
 698:	08 f4       	brcc	.+2      	; 0x69c <__cmpsf2+0x8>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret

0000069e <__fixsfsi>:
 69e:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixunssfsi>
 6a2:	68 94       	set
 6a4:	b1 11       	cpse	r27, r1
 6a6:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_szero>
 6aa:	08 95       	ret

000006ac <__fixunssfsi>:
 6ac:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_splitA>
 6b0:	88 f0       	brcs	.+34     	; 0x6d4 <__fixunssfsi+0x28>
 6b2:	9f 57       	subi	r25, 0x7F	; 127
 6b4:	98 f0       	brcs	.+38     	; 0x6dc <__fixunssfsi+0x30>
 6b6:	b9 2f       	mov	r27, r25
 6b8:	99 27       	eor	r25, r25
 6ba:	b7 51       	subi	r27, 0x17	; 23
 6bc:	b0 f0       	brcs	.+44     	; 0x6ea <__fixunssfsi+0x3e>
 6be:	e1 f0       	breq	.+56     	; 0x6f8 <__fixunssfsi+0x4c>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	1a f0       	brmi	.+6      	; 0x6d0 <__fixunssfsi+0x24>
 6ca:	ba 95       	dec	r27
 6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__fixunssfsi+0x14>
 6ce:	14 c0       	rjmp	.+40     	; 0x6f8 <__fixunssfsi+0x4c>
 6d0:	b1 30       	cpi	r27, 0x01	; 1
 6d2:	91 f0       	breq	.+36     	; 0x6f8 <__fixunssfsi+0x4c>
 6d4:	0e 94 30 04 	call	0x860	; 0x860 <__fp_zero>
 6d8:	b1 e0       	ldi	r27, 0x01	; 1
 6da:	08 95       	ret
 6dc:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_zero>
 6e0:	67 2f       	mov	r22, r23
 6e2:	78 2f       	mov	r23, r24
 6e4:	88 27       	eor	r24, r24
 6e6:	b8 5f       	subi	r27, 0xF8	; 248
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <__fixunssfsi+0x4c>
 6ea:	b9 3f       	cpi	r27, 0xF9	; 249
 6ec:	cc f3       	brlt	.-14     	; 0x6e0 <__fixunssfsi+0x34>
 6ee:	86 95       	lsr	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b3 95       	inc	r27
 6f6:	d9 f7       	brne	.-10     	; 0x6ee <__fixunssfsi+0x42>
 6f8:	3e f4       	brtc	.+14     	; 0x708 <__fixunssfsi+0x5c>
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__floatunsisf>:
 70a:	e8 94       	clt
 70c:	09 c0       	rjmp	.+18     	; 0x720 <__floatsisf+0x12>

0000070e <__floatsisf>:
 70e:	97 fb       	bst	r25, 7
 710:	3e f4       	brtc	.+14     	; 0x720 <__floatsisf+0x12>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	99 23       	and	r25, r25
 722:	a9 f0       	breq	.+42     	; 0x74e <__floatsisf+0x40>
 724:	f9 2f       	mov	r31, r25
 726:	96 e9       	ldi	r25, 0x96	; 150
 728:	bb 27       	eor	r27, r27
 72a:	93 95       	inc	r25
 72c:	f6 95       	lsr	r31
 72e:	87 95       	ror	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	b7 95       	ror	r27
 736:	f1 11       	cpse	r31, r1
 738:	f8 cf       	rjmp	.-16     	; 0x72a <__floatsisf+0x1c>
 73a:	fa f4       	brpl	.+62     	; 0x77a <__floatsisf+0x6c>
 73c:	bb 0f       	add	r27, r27
 73e:	11 f4       	brne	.+4      	; 0x744 <__floatsisf+0x36>
 740:	60 ff       	sbrs	r22, 0
 742:	1b c0       	rjmp	.+54     	; 0x77a <__floatsisf+0x6c>
 744:	6f 5f       	subi	r22, 0xFF	; 255
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	16 c0       	rjmp	.+44     	; 0x77a <__floatsisf+0x6c>
 74e:	88 23       	and	r24, r24
 750:	11 f0       	breq	.+4      	; 0x756 <__floatsisf+0x48>
 752:	96 e9       	ldi	r25, 0x96	; 150
 754:	11 c0       	rjmp	.+34     	; 0x778 <__floatsisf+0x6a>
 756:	77 23       	and	r23, r23
 758:	21 f0       	breq	.+8      	; 0x762 <__floatsisf+0x54>
 75a:	9e e8       	ldi	r25, 0x8E	; 142
 75c:	87 2f       	mov	r24, r23
 75e:	76 2f       	mov	r23, r22
 760:	05 c0       	rjmp	.+10     	; 0x76c <__floatsisf+0x5e>
 762:	66 23       	and	r22, r22
 764:	71 f0       	breq	.+28     	; 0x782 <__floatsisf+0x74>
 766:	96 e8       	ldi	r25, 0x86	; 134
 768:	86 2f       	mov	r24, r22
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	2a f0       	brmi	.+10     	; 0x77a <__floatsisf+0x6c>
 770:	9a 95       	dec	r25
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	da f7       	brpl	.-10     	; 0x770 <__floatsisf+0x62>
 77a:	88 0f       	add	r24, r24
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	97 f9       	bld	r25, 7
 782:	08 95       	ret

00000784 <__fp_cmp>:
 784:	99 0f       	add	r25, r25
 786:	00 08       	sbc	r0, r0
 788:	55 0f       	add	r21, r21
 78a:	aa 0b       	sbc	r26, r26
 78c:	e0 e8       	ldi	r30, 0x80	; 128
 78e:	fe ef       	ldi	r31, 0xFE	; 254
 790:	16 16       	cp	r1, r22
 792:	17 06       	cpc	r1, r23
 794:	e8 07       	cpc	r30, r24
 796:	f9 07       	cpc	r31, r25
 798:	c0 f0       	brcs	.+48     	; 0x7ca <__fp_cmp+0x46>
 79a:	12 16       	cp	r1, r18
 79c:	13 06       	cpc	r1, r19
 79e:	e4 07       	cpc	r30, r20
 7a0:	f5 07       	cpc	r31, r21
 7a2:	98 f0       	brcs	.+38     	; 0x7ca <__fp_cmp+0x46>
 7a4:	62 1b       	sub	r22, r18
 7a6:	73 0b       	sbc	r23, r19
 7a8:	84 0b       	sbc	r24, r20
 7aa:	95 0b       	sbc	r25, r21
 7ac:	39 f4       	brne	.+14     	; 0x7bc <__fp_cmp+0x38>
 7ae:	0a 26       	eor	r0, r26
 7b0:	61 f0       	breq	.+24     	; 0x7ca <__fp_cmp+0x46>
 7b2:	23 2b       	or	r18, r19
 7b4:	24 2b       	or	r18, r20
 7b6:	25 2b       	or	r18, r21
 7b8:	21 f4       	brne	.+8      	; 0x7c2 <__fp_cmp+0x3e>
 7ba:	08 95       	ret
 7bc:	0a 26       	eor	r0, r26
 7be:	09 f4       	brne	.+2      	; 0x7c2 <__fp_cmp+0x3e>
 7c0:	a1 40       	sbci	r26, 0x01	; 1
 7c2:	a6 95       	lsr	r26
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	81 1d       	adc	r24, r1
 7c8:	81 1d       	adc	r24, r1
 7ca:	08 95       	ret

000007cc <__fp_inf>:
 7cc:	97 f9       	bld	r25, 7
 7ce:	9f 67       	ori	r25, 0x7F	; 127
 7d0:	80 e8       	ldi	r24, 0x80	; 128
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	08 95       	ret

000007d8 <__fp_nan>:
 7d8:	9f ef       	ldi	r25, 0xFF	; 255
 7da:	80 ec       	ldi	r24, 0xC0	; 192
 7dc:	08 95       	ret

000007de <__fp_pscA>:
 7de:	00 24       	eor	r0, r0
 7e0:	0a 94       	dec	r0
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	18 06       	cpc	r1, r24
 7e8:	09 06       	cpc	r0, r25
 7ea:	08 95       	ret

000007ec <__fp_pscB>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	12 16       	cp	r1, r18
 7f2:	13 06       	cpc	r1, r19
 7f4:	14 06       	cpc	r1, r20
 7f6:	05 06       	cpc	r0, r21
 7f8:	08 95       	ret

000007fa <__fp_round>:
 7fa:	09 2e       	mov	r0, r25
 7fc:	03 94       	inc	r0
 7fe:	00 0c       	add	r0, r0
 800:	11 f4       	brne	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	88 23       	and	r24, r24
 804:	52 f0       	brmi	.+20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 806:	bb 0f       	add	r27, r27
 808:	40 f4       	brcc	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80a:	bf 2b       	or	r27, r31
 80c:	11 f4       	brne	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	60 ff       	sbrs	r22, 0
 810:	04 c0       	rjmp	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	6f 5f       	subi	r22, 0xFF	; 255
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	08 95       	ret

0000081c <__fp_split3>:
 81c:	57 fd       	sbrc	r21, 7
 81e:	90 58       	subi	r25, 0x80	; 128
 820:	44 0f       	add	r20, r20
 822:	55 1f       	adc	r21, r21
 824:	59 f0       	breq	.+22     	; 0x83c <__fp_splitA+0x10>
 826:	5f 3f       	cpi	r21, 0xFF	; 255
 828:	71 f0       	breq	.+28     	; 0x846 <__fp_splitA+0x1a>
 82a:	47 95       	ror	r20

0000082c <__fp_splitA>:
 82c:	88 0f       	add	r24, r24
 82e:	97 fb       	bst	r25, 7
 830:	99 1f       	adc	r25, r25
 832:	61 f0       	breq	.+24     	; 0x84c <__fp_splitA+0x20>
 834:	9f 3f       	cpi	r25, 0xFF	; 255
 836:	79 f0       	breq	.+30     	; 0x856 <__fp_splitA+0x2a>
 838:	87 95       	ror	r24
 83a:	08 95       	ret
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	14 06       	cpc	r1, r20
 842:	55 1f       	adc	r21, r21
 844:	f2 cf       	rjmp	.-28     	; 0x82a <__fp_split3+0xe>
 846:	46 95       	lsr	r20
 848:	f1 df       	rcall	.-30     	; 0x82c <__fp_splitA>
 84a:	08 c0       	rjmp	.+16     	; 0x85c <__fp_splitA+0x30>
 84c:	16 16       	cp	r1, r22
 84e:	17 06       	cpc	r1, r23
 850:	18 06       	cpc	r1, r24
 852:	99 1f       	adc	r25, r25
 854:	f1 cf       	rjmp	.-30     	; 0x838 <__fp_splitA+0xc>
 856:	86 95       	lsr	r24
 858:	71 05       	cpc	r23, r1
 85a:	61 05       	cpc	r22, r1
 85c:	08 94       	sec
 85e:	08 95       	ret

00000860 <__fp_zero>:
 860:	e8 94       	clt

00000862 <__fp_szero>:
 862:	bb 27       	eor	r27, r27
 864:	66 27       	eor	r22, r22
 866:	77 27       	eor	r23, r23
 868:	cb 01       	movw	r24, r22
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__gesf2>:
 86e:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_cmp>
 872:	08 f4       	brcc	.+2      	; 0x876 <__gesf2+0x8>
 874:	8f ef       	ldi	r24, 0xFF	; 255
 876:	08 95       	ret

00000878 <log10>:
 878:	0e 94 4c 04 	call	0x898	; 0x898 <log>
 87c:	29 ed       	ldi	r18, 0xD9	; 217
 87e:	3b e5       	ldi	r19, 0x5B	; 91
 880:	4e ed       	ldi	r20, 0xDE	; 222
 882:	5e e3       	ldi	r21, 0x3E	; 62
 884:	0c 94 94 04 	jmp	0x928	; 0x928 <__mulsf3>
 888:	16 f0       	brts	.+4      	; 0x88e <log10+0x16>
 88a:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_mpack>
 88e:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_nan>
 892:	68 94       	set
 894:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_inf>

00000898 <log>:
 898:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_splitA>
 89c:	a8 f3       	brcs	.-22     	; 0x888 <log10+0x10>
 89e:	99 23       	and	r25, r25
 8a0:	c1 f3       	breq	.-16     	; 0x892 <log10+0x1a>
 8a2:	ae f3       	brts	.-22     	; 0x88e <log10+0x16>
 8a4:	df 93       	push	r29
 8a6:	cf 93       	push	r28
 8a8:	1f 93       	push	r17
 8aa:	0f 93       	push	r16
 8ac:	ff 92       	push	r15
 8ae:	c9 2f       	mov	r28, r25
 8b0:	dd 27       	eor	r29, r29
 8b2:	88 23       	and	r24, r24
 8b4:	2a f0       	brmi	.+10     	; 0x8c0 <log+0x28>
 8b6:	21 97       	sbiw	r28, 0x01	; 1
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	da f7       	brpl	.-10     	; 0x8b6 <log+0x1e>
 8c0:	20 e0       	ldi	r18, 0x00	; 0
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	40 e8       	ldi	r20, 0x80	; 128
 8c6:	5f eb       	ldi	r21, 0xBF	; 191
 8c8:	9f e3       	ldi	r25, 0x3F	; 63
 8ca:	88 39       	cpi	r24, 0x98	; 152
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <log+0x3e>
 8ce:	80 3e       	cpi	r24, 0xE0	; 224
 8d0:	38 f0       	brcs	.+14     	; 0x8e0 <log+0x48>
 8d2:	21 96       	adiw	r28, 0x01	; 1
 8d4:	8f 77       	andi	r24, 0x7F	; 127
 8d6:	0e 94 de 02 	call	0x5bc	; 0x5bc <__addsf3>
 8da:	e8 e6       	ldi	r30, 0x68	; 104
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <log+0x50>
 8e0:	0e 94 de 02 	call	0x5bc	; 0x5bc <__addsf3>
 8e4:	e5 e9       	ldi	r30, 0x95	; 149
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_powser>
 8ec:	8b 01       	movw	r16, r22
 8ee:	be 01       	movw	r22, r28
 8f0:	ec 01       	movw	r28, r24
 8f2:	fb 2e       	mov	r15, r27
 8f4:	6f 57       	subi	r22, 0x7F	; 127
 8f6:	71 09       	sbc	r23, r1
 8f8:	75 95       	asr	r23
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 0b       	sbc	r24, r24
 8fe:	99 0b       	sbc	r25, r25
 900:	0e 94 87 03 	call	0x70e	; 0x70e <__floatsisf>
 904:	28 e1       	ldi	r18, 0x18	; 24
 906:	32 e7       	ldi	r19, 0x72	; 114
 908:	41 e3       	ldi	r20, 0x31	; 49
 90a:	5f e3       	ldi	r21, 0x3F	; 63
 90c:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3x>
 910:	af 2d       	mov	r26, r15
 912:	98 01       	movw	r18, r16
 914:	ae 01       	movw	r20, r28
 916:	ff 90       	pop	r15
 918:	0f 91       	pop	r16
 91a:	1f 91       	pop	r17
 91c:	cf 91       	pop	r28
 91e:	df 91       	pop	r29
 920:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__addsf3x>
 924:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_round>

00000928 <__mulsf3>:
 928:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3x>
 92c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_round>
 930:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscA>
 934:	38 f0       	brcs	.+14     	; 0x944 <__mulsf3+0x1c>
 936:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_pscB>
 93a:	20 f0       	brcs	.+8      	; 0x944 <__mulsf3+0x1c>
 93c:	95 23       	and	r25, r21
 93e:	11 f0       	breq	.+4      	; 0x944 <__mulsf3+0x1c>
 940:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_inf>
 944:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_nan>
 948:	11 24       	eor	r1, r1
 94a:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_szero>

0000094e <__mulsf3x>:
 94e:	0e 94 0e 04 	call	0x81c	; 0x81c <__fp_split3>
 952:	70 f3       	brcs	.-36     	; 0x930 <__mulsf3+0x8>

00000954 <__mulsf3_pse>:
 954:	95 9f       	mul	r25, r21
 956:	c1 f3       	breq	.-16     	; 0x948 <__mulsf3+0x20>
 958:	95 0f       	add	r25, r21
 95a:	50 e0       	ldi	r21, 0x00	; 0
 95c:	55 1f       	adc	r21, r21
 95e:	62 9f       	mul	r22, r18
 960:	f0 01       	movw	r30, r0
 962:	72 9f       	mul	r23, r18
 964:	bb 27       	eor	r27, r27
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	63 9f       	mul	r22, r19
 96c:	aa 27       	eor	r26, r26
 96e:	f0 0d       	add	r31, r0
 970:	b1 1d       	adc	r27, r1
 972:	aa 1f       	adc	r26, r26
 974:	64 9f       	mul	r22, r20
 976:	66 27       	eor	r22, r22
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	66 1f       	adc	r22, r22
 97e:	82 9f       	mul	r24, r18
 980:	22 27       	eor	r18, r18
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	73 9f       	mul	r23, r19
 98a:	b0 0d       	add	r27, r0
 98c:	a1 1d       	adc	r26, r1
 98e:	62 1f       	adc	r22, r18
 990:	83 9f       	mul	r24, r19
 992:	a0 0d       	add	r26, r0
 994:	61 1d       	adc	r22, r1
 996:	22 1f       	adc	r18, r18
 998:	74 9f       	mul	r23, r20
 99a:	33 27       	eor	r19, r19
 99c:	a0 0d       	add	r26, r0
 99e:	61 1d       	adc	r22, r1
 9a0:	23 1f       	adc	r18, r19
 9a2:	84 9f       	mul	r24, r20
 9a4:	60 0d       	add	r22, r0
 9a6:	21 1d       	adc	r18, r1
 9a8:	82 2f       	mov	r24, r18
 9aa:	76 2f       	mov	r23, r22
 9ac:	6a 2f       	mov	r22, r26
 9ae:	11 24       	eor	r1, r1
 9b0:	9f 57       	subi	r25, 0x7F	; 127
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	9a f0       	brmi	.+38     	; 0x9dc <__mulsf3_pse+0x88>
 9b6:	f1 f0       	breq	.+60     	; 0x9f4 <__mulsf3_pse+0xa0>
 9b8:	88 23       	and	r24, r24
 9ba:	4a f0       	brmi	.+18     	; 0x9ce <__mulsf3_pse+0x7a>
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	bb 1f       	adc	r27, r27
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	91 50       	subi	r25, 0x01	; 1
 9ca:	50 40       	sbci	r21, 0x00	; 0
 9cc:	a9 f7       	brne	.-22     	; 0x9b8 <__mulsf3_pse+0x64>
 9ce:	9e 3f       	cpi	r25, 0xFE	; 254
 9d0:	51 05       	cpc	r21, r1
 9d2:	80 f0       	brcs	.+32     	; 0x9f4 <__mulsf3_pse+0xa0>
 9d4:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_inf>
 9d8:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	e4 f3       	brlt	.-8      	; 0x9d8 <__mulsf3_pse+0x84>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	d4 f3       	brlt	.-12     	; 0x9d8 <__mulsf3_pse+0x84>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	e7 95       	ror	r30
 9f0:	9f 5f       	subi	r25, 0xFF	; 255
 9f2:	c1 f7       	brne	.-16     	; 0x9e4 <__mulsf3_pse+0x90>
 9f4:	fe 2b       	or	r31, r30
 9f6:	88 0f       	add	r24, r24
 9f8:	91 1d       	adc	r25, r1
 9fa:	96 95       	lsr	r25
 9fc:	87 95       	ror	r24
 9fe:	97 f9       	bld	r25, 7
 a00:	08 95       	ret

00000a02 <__fp_mpack>:
 a02:	9f 3f       	cpi	r25, 0xFF	; 255
 a04:	31 f0       	breq	.+12     	; 0xa12 <__fp_mpack_finite+0xc>

00000a06 <__fp_mpack_finite>:
 a06:	91 50       	subi	r25, 0x01	; 1
 a08:	20 f4       	brcc	.+8      	; 0xa12 <__fp_mpack_finite+0xc>
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b7 95       	ror	r27
 a12:	88 0f       	add	r24, r24
 a14:	91 1d       	adc	r25, r1
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__fp_powser>:
 a1e:	df 93       	push	r29
 a20:	cf 93       	push	r28
 a22:	1f 93       	push	r17
 a24:	0f 93       	push	r16
 a26:	ff 92       	push	r15
 a28:	ef 92       	push	r14
 a2a:	df 92       	push	r13
 a2c:	7b 01       	movw	r14, r22
 a2e:	8c 01       	movw	r16, r24
 a30:	68 94       	set
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <__fp_powser+0x22>
 a34:	da 2e       	mov	r13, r26
 a36:	ef 01       	movw	r28, r30
 a38:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3x>
 a3c:	fe 01       	movw	r30, r28
 a3e:	e8 94       	clt
 a40:	a5 91       	lpm	r26, Z+
 a42:	25 91       	lpm	r18, Z+
 a44:	35 91       	lpm	r19, Z+
 a46:	45 91       	lpm	r20, Z+
 a48:	55 91       	lpm	r21, Z+
 a4a:	a6 f3       	brts	.-24     	; 0xa34 <__fp_powser+0x16>
 a4c:	ef 01       	movw	r28, r30
 a4e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__addsf3x>
 a52:	fe 01       	movw	r30, r28
 a54:	97 01       	movw	r18, r14
 a56:	a8 01       	movw	r20, r16
 a58:	da 94       	dec	r13
 a5a:	69 f7       	brne	.-38     	; 0xa36 <__fp_powser+0x18>
 a5c:	df 90       	pop	r13
 a5e:	ef 90       	pop	r14
 a60:	ff 90       	pop	r15
 a62:	0f 91       	pop	r16
 a64:	1f 91       	pop	r17
 a66:	cf 91       	pop	r28
 a68:	df 91       	pop	r29
 a6a:	08 95       	ret

00000a6c <__umulhisi3>:
 a6c:	a2 9f       	mul	r26, r18
 a6e:	b0 01       	movw	r22, r0
 a70:	b3 9f       	mul	r27, r19
 a72:	c0 01       	movw	r24, r0
 a74:	a3 9f       	mul	r26, r19
 a76:	70 0d       	add	r23, r0
 a78:	81 1d       	adc	r24, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	b2 9f       	mul	r27, r18
 a80:	70 0d       	add	r23, r0
 a82:	81 1d       	adc	r24, r1
 a84:	11 24       	eor	r1, r1
 a86:	91 1d       	adc	r25, r1
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
