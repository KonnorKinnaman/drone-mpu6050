
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d31  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092d  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d5  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000587  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000448  00000000  00000000  000033eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <log+0x56>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ec e5       	ldi	r30, 0x5C	; 92
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 30       	cpi	r26, 0x00	; 0
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a0 30       	cpi	r26, 0x00	; 0
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
  f8:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
#define F_CPU 16000000UL

void init_ALL(void);

int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	69 97       	sbiw	r28, 0x19	; 25
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	
	int received_data = 0;
 114:	1a 82       	std	Y+2, r1	; 0x02
 116:	19 82       	std	Y+1, r1	; 0x01
	int16_t gx, gy, gz;
	uint16_t testVal2 = 65.879;
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	9c 83       	std	Y+4, r25	; 0x04
 11e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t address = 0;
 120:	1d 82       	std	Y+5, r1	; 0x05
    
	//address = I2C_scan();
    while (1) 
    {
		
		mpu6050_read_gyro(&gx, &gy, &gz);
 122:	ae 01       	movw	r20, r28
 124:	48 5e       	subi	r20, 0xE8	; 232
 126:	5f 4f       	sbci	r21, 0xFF	; 255
 128:	9e 01       	movw	r18, r28
 12a:	2a 5e       	subi	r18, 0xEA	; 234
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	ce 01       	movw	r24, r28
 130:	44 96       	adiw	r24, 0x14	; 20
 132:	b9 01       	movw	r22, r18
 134:	0e 94 a8 01 	call	0x350	; 0x350 <mpu6050_read_gyro>
		USART_int_transmit(gx);
 138:	8c 89       	ldd	r24, Y+20	; 0x14
 13a:	9d 89       	ldd	r25, Y+21	; 0x15
 13c:	0e 94 08 02 	call	0x410	; 0x410 <USART_int_transmit>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	aa e7       	ldi	r26, 0x7A	; 122
 146:	b4 e4       	ldi	r27, 0x44	; 68
 148:	8e 83       	std	Y+6, r24	; 0x06
 14a:	9f 83       	std	Y+7, r25	; 0x07
 14c:	a8 87       	std	Y+8, r26	; 0x08
 14e:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4a e7       	ldi	r20, 0x7A	; 122
 156:	53 e4       	ldi	r21, 0x43	; 67
 158:	6e 81       	ldd	r22, Y+6	; 0x06
 15a:	7f 81       	ldd	r23, Y+7	; 0x07
 15c:	88 85       	ldd	r24, Y+8	; 0x08
 15e:	99 85       	ldd	r25, Y+9	; 0x09
 160:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	8a 87       	std	Y+10, r24	; 0x0a
 16a:	9b 87       	std	Y+11, r25	; 0x0b
 16c:	ac 87       	std	Y+12, r26	; 0x0c
 16e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e8       	ldi	r20, 0x80	; 128
 176:	5f e3       	ldi	r21, 0x3F	; 63
 178:	6a 85       	ldd	r22, Y+10	; 0x0a
 17a:	7b 85       	ldd	r23, Y+11	; 0x0b
 17c:	8c 85       	ldd	r24, Y+12	; 0x0c
 17e:	9d 85       	ldd	r25, Y+13	; 0x0d
 180:	0e 94 31 03 	call	0x662	; 0x662 <__cmpsf2>
 184:	88 23       	and	r24, r24
 186:	2c f4       	brge	.+10     	; 0x192 <main+0x92>
		__ticks = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9f 87       	std	Y+15, r25	; 0x0f
 18e:	8e 87       	std	Y+14, r24	; 0x0e
 190:	3f c0       	rjmp	.+126    	; 0x210 <main+0x110>
	else if (__tmp > 65535)
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	3f ef       	ldi	r19, 0xFF	; 255
 196:	4f e7       	ldi	r20, 0x7F	; 127
 198:	57 e4       	ldi	r21, 0x47	; 71
 19a:	6a 85       	ldd	r22, Y+10	; 0x0a
 19c:	7b 85       	ldd	r23, Y+11	; 0x0b
 19e:	8c 85       	ldd	r24, Y+12	; 0x0c
 1a0:	9d 85       	ldd	r25, Y+13	; 0x0d
 1a2:	0e 94 1e 04 	call	0x83c	; 0x83c <__gesf2>
 1a6:	18 16       	cp	r1, r24
 1a8:	4c f5       	brge	.+82     	; 0x1fc <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e2       	ldi	r20, 0x20	; 32
 1b0:	51 e4       	ldi	r21, 0x41	; 65
 1b2:	6e 81       	ldd	r22, Y+6	; 0x06
 1b4:	7f 81       	ldd	r23, Y+7	; 0x07
 1b6:	88 85       	ldd	r24, Y+8	; 0x08
 1b8:	99 85       	ldd	r25, Y+9	; 0x09
 1ba:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3>
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
 1c2:	bc 01       	movw	r22, r24
 1c4:	cd 01       	movw	r24, r26
 1c6:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	9f 87       	std	Y+15, r25	; 0x0f
 1d0:	8e 87       	std	Y+14, r24	; 0x0e
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <main+0xf2>
 1d4:	89 e1       	ldi	r24, 0x19	; 25
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	99 8b       	std	Y+17, r25	; 0x11
 1da:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1dc:	88 89       	ldd	r24, Y+16	; 0x10
 1de:	99 89       	ldd	r25, Y+17	; 0x11
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xe0>
 1e4:	99 8b       	std	Y+17, r25	; 0x11
 1e6:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	8e 85       	ldd	r24, Y+14	; 0x0e
 1ea:	9f 85       	ldd	r25, Y+15	; 0x0f
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	9f 87       	std	Y+15, r25	; 0x0f
 1f0:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	8e 85       	ldd	r24, Y+14	; 0x0e
 1f4:	9f 85       	ldd	r25, Y+15	; 0x0f
 1f6:	89 2b       	or	r24, r25
 1f8:	69 f7       	brne	.-38     	; 0x1d4 <main+0xd4>
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1fc:	6a 85       	ldd	r22, Y+10	; 0x0a
 1fe:	7b 85       	ldd	r23, Y+11	; 0x0b
 200:	8c 85       	ldd	r24, Y+12	; 0x0c
 202:	9d 85       	ldd	r25, Y+13	; 0x0d
 204:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	9f 87       	std	Y+15, r25	; 0x0f
 20e:	8e 87       	std	Y+14, r24	; 0x0e
 210:	8e 85       	ldd	r24, Y+14	; 0x0e
 212:	9f 85       	ldd	r25, Y+15	; 0x0f
 214:	9b 8b       	std	Y+19, r25	; 0x13
 216:	8a 8b       	std	Y+18, r24	; 0x12
 218:	8a 89       	ldd	r24, Y+18	; 0x12
 21a:	9b 89       	ldd	r25, Y+19	; 0x13
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x11c>
 220:	9b 8b       	std	Y+19, r25	; 0x13
 222:	8a 8b       	std	Y+18, r24	; 0x12
		//USART_int_transmit(gy);
		//USART_int_transmit(gz);
		_delay_ms(1000);
    }
 224:	7e cf       	rjmp	.-260    	; 0x122 <main+0x22>

00000226 <I2C_start>:
		USART_int_transmit(TWSR);
		
	}
	TWCR = STOP;
	return data;
}
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	8c eb       	ldi	r24, 0xBC	; 188
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	24 ea       	ldi	r18, 0xA4	; 164
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
 23a:	00 00       	nop
 23c:	8c eb       	ldi	r24, 0xBC	; 188
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	d4 f7       	brge	.-12     	; 0x23c <I2C_start+0x16>
 248:	89 eb       	ldi	r24, 0xB9	; 185
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	88 7f       	andi	r24, 0xF8	; 248
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	29 f0       	breq	.+10     	; 0x264 <I2C_start+0x3e>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	11 f0       	breq	.+4      	; 0x264 <I2C_start+0x3e>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <I2C_start+0x40>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <I2C_write>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <I2C_write+0x6>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	8a 83       	std	Y+2, r24	; 0x02
 27a:	8b eb       	ldi	r24, 0xBB	; 187
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	2a 81       	ldd	r18, Y+2	; 0x02
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	8c eb       	ldi	r24, 0xBC	; 188
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	24 e8       	ldi	r18, 0x84	; 132
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	00 00       	nop
 290:	8c eb       	ldi	r24, 0xBC	; 188
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	d4 f7       	brge	.-12     	; 0x290 <I2C_write+0x22>
 29c:	89 eb       	ldi	r24, 0xB9	; 185
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	88 7f       	andi	r24, 0xF8	; 248
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	88 31       	cpi	r24, 0x18	; 24
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <I2C_write+0x4a>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 32       	cpi	r24, 0x28	; 40
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <I2C_write+0x4a>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <I2C_write+0x4c>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <I2C_read_ACK>:
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	8c eb       	ldi	r24, 0xBC	; 188
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	24 ec       	ldi	r18, 0xC4	; 196
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	00 00       	nop
 2d8:	8c eb       	ldi	r24, 0xBC	; 188
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	d4 f7       	brge	.-12     	; 0x2d8 <I2C_read_ACK+0x14>
 2e4:	8b eb       	ldi	r24, 0xBB	; 187
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <I2C_read_NACK>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	8c eb       	ldi	r24, 0xBC	; 188
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	24 e8       	ldi	r18, 0x84	; 132
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
 304:	00 00       	nop
 306:	8c eb       	ldi	r24, 0xBC	; 188
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	fc 01       	movw	r30, r24
 30c:	80 81       	ld	r24, Z
 30e:	88 23       	and	r24, r24
 310:	d4 f7       	brge	.-12     	; 0x306 <I2C_read_NACK+0x14>
 312:	8b eb       	ldi	r24, 0xBB	; 187
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <I2C_stop>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	8c eb       	ldi	r24, 0xBC	; 188
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	24 e9       	ldi	r18, 0x94	; 148
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
 332:	00 00       	nop
 334:	8c eb       	ldi	r24, 0xBC	; 188
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	80 71       	andi	r24, 0x10	; 16
 342:	99 27       	eor	r25, r25
 344:	89 2b       	or	r24, r25
 346:	b1 f7       	brne	.-20     	; 0x334 <I2C_stop+0x14>
 348:	00 00       	nop
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <mpu6050_read_gyro>:

void mpu6050_read_gyro(int16_t *gx, int16_t *gy, int16_t *gz)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	00 d0       	rcall	.+0      	; 0x35a <mpu6050_read_gyro+0xa>
 35a:	00 d0       	rcall	.+0      	; 0x35c <mpu6050_read_gyro+0xc>
 35c:	00 d0       	rcall	.+0      	; 0x35e <mpu6050_read_gyro+0xe>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	9a 83       	std	Y+2, r25	; 0x02
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	7c 83       	std	Y+4, r23	; 0x04
 368:	6b 83       	std	Y+3, r22	; 0x03
 36a:	5e 83       	std	Y+6, r21	; 0x06
 36c:	4d 83       	std	Y+5, r20	; 0x05
	I2C_start();
 36e:	0e 94 13 01 	call	0x226	; 0x226 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
 372:	80 ed       	ldi	r24, 0xD0	; 208
 374:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_write>
	I2C_write(0x43);
 378:	83 e4       	ldi	r24, 0x43	; 67
 37a:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_write>
	I2C_start();
 37e:	0e 94 13 01 	call	0x226	; 0x226 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
 382:	81 ed       	ldi	r24, 0xD1	; 209
 384:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_write>
	
	*gx = ((int16_t)I2C_read_ACK() << 8 | I2C_read_ACK());
 388:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_read_ACK>
 38c:	88 2f       	mov	r24, r24
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	18 2f       	mov	r17, r24
 392:	00 27       	eor	r16, r16
 394:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_read_ACK>
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	98 01       	movw	r18, r16
 39e:	28 2b       	or	r18, r24
 3a0:	39 2b       	or	r19, r25
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
 3a6:	fc 01       	movw	r30, r24
 3a8:	31 83       	std	Z+1, r19	; 0x01
 3aa:	20 83       	st	Z, r18
	*gy = ((int16_t)I2C_read_ACK() << 8 | I2C_read_ACK());
 3ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_read_ACK>
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	18 2f       	mov	r17, r24
 3b6:	00 27       	eor	r16, r16
 3b8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_read_ACK>
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	98 01       	movw	r18, r16
 3c2:	28 2b       	or	r18, r24
 3c4:	39 2b       	or	r19, r25
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ca:	fc 01       	movw	r30, r24
 3cc:	31 83       	std	Z+1, r19	; 0x01
 3ce:	20 83       	st	Z, r18
	*gz = ((int16_t)I2C_read_ACK() << 8 | I2C_read_NACK());
 3d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_read_ACK>
 3d4:	88 2f       	mov	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	18 2f       	mov	r17, r24
 3da:	00 27       	eor	r16, r16
 3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <I2C_read_NACK>
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	98 01       	movw	r18, r16
 3e6:	28 2b       	or	r18, r24
 3e8:	39 2b       	or	r19, r25
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	9e 81       	ldd	r25, Y+6	; 0x06
 3ee:	fc 01       	movw	r30, r24
 3f0:	31 83       	std	Z+1, r19	; 0x01
 3f2:	20 83       	st	Z, r18
	
	I2C_stop();
 3f4:	0e 94 90 01 	call	0x320	; 0x320 <I2C_stop>
	
 3f8:	00 00       	nop
 3fa:	26 96       	adiw	r28, 0x06	; 6
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	64 97       	sbiw	r28, 0x14	; 20
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	9c 8b       	std	Y+20, r25	; 0x14
 426:	8b 8b       	std	Y+19, r24	; 0x13
	int nDigits = log10(data)+1;
 428:	8b 89       	ldd	r24, Y+19	; 0x13
 42a:	9c 89       	ldd	r25, Y+20	; 0x14
 42c:	cc 01       	movw	r24, r24
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	bc 01       	movw	r22, r24
 434:	cd 01       	movw	r24, r26
 436:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__floatunsisf>
 43a:	dc 01       	movw	r26, r24
 43c:	cb 01       	movw	r24, r22
 43e:	bc 01       	movw	r22, r24
 440:	cd 01       	movw	r24, r26
 442:	0e 94 23 04 	call	0x846	; 0x846 <log10>
 446:	dc 01       	movw	r26, r24
 448:	cb 01       	movw	r24, r22
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e8       	ldi	r20, 0x80	; 128
 450:	5f e3       	ldi	r21, 0x3F	; 63
 452:	bc 01       	movw	r22, r24
 454:	cd 01       	movw	r24, r26
 456:	0e 94 c5 02 	call	0x58a	; 0x58a <__addsf3>
 45a:	dc 01       	movw	r26, r24
 45c:	cb 01       	movw	r24, r22
 45e:	bc 01       	movw	r22, r24
 460:	cd 01       	movw	r24, r26
 462:	0e 94 36 03 	call	0x66c	; 0x66c <__fixsfsi>
 466:	dc 01       	movw	r26, r24
 468:	cb 01       	movw	r24, r22
 46a:	9e 83       	std	Y+6, r25	; 0x06
 46c:	8d 83       	std	Y+5, r24	; 0x05
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 46e:	8d 81       	ldd	r24, Y+5	; 0x05
 470:	9e 81       	ldd	r25, Y+6	; 0x06
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	3c c0       	rjmp	.+120    	; 0x4f0 <USART_int_transmit+0xe0>
	{
		numParser = data % 10;
 478:	4b 89       	ldd	r20, Y+19	; 0x13
 47a:	5c 89       	ldd	r21, Y+20	; 0x14
 47c:	9a 01       	movw	r18, r20
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__umulhisi3>
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	9c 01       	movw	r18, r24
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	82 0f       	add	r24, r18
 4a2:	93 1f       	adc	r25, r19
 4a4:	9a 01       	movw	r18, r20
 4a6:	28 1b       	sub	r18, r24
 4a8:	39 0b       	sbc	r19, r25
 4aa:	c9 01       	movw	r24, r18
 4ac:	98 87       	std	Y+8, r25	; 0x08
 4ae:	8f 83       	std	Y+7, r24	; 0x07
		data = data / 10;
 4b0:	8b 89       	ldd	r24, Y+19	; 0x13
 4b2:	9c 89       	ldd	r25, Y+20	; 0x14
 4b4:	9c 01       	movw	r18, r24
 4b6:	ad ec       	ldi	r26, 0xCD	; 205
 4b8:	bc ec       	ldi	r27, 0xCC	; 204
 4ba:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__umulhisi3>
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	9c 8b       	std	Y+20, r25	; 0x14
 4cc:	8b 8b       	std	Y+19, r24	; 0x13
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	40 e3       	ldi	r20, 0x30	; 48
 4d2:	48 0f       	add	r20, r24
 4d4:	9e 01       	movw	r18, r28
 4d6:	27 5f       	subi	r18, 0xF7	; 247
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	9a 81       	ldd	r25, Y+2	; 0x02
 4de:	82 0f       	add	r24, r18
 4e0:	93 1f       	adc	r25, r19
 4e2:	fc 01       	movw	r30, r24
 4e4:	40 83       	st	Z, r20
	int nDigits = log10(data)+1;
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	9a 83       	std	Y+2, r25	; 0x02
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	18 16       	cp	r1, r24
 4f6:	19 06       	cpc	r1, r25
 4f8:	0c f4       	brge	.+2      	; 0x4fc <USART_int_transmit+0xec>
 4fa:	be cf       	rjmp	.-132    	; 0x478 <USART_int_transmit+0x68>
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9c 83       	std	Y+4, r25	; 0x04
 502:	8b 83       	std	Y+3, r24	; 0x03
 504:	1d c0       	rjmp	.+58     	; 0x540 <USART_int_transmit+0x130>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 506:	00 00       	nop
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fc 01       	movw	r30, r24
 50e:	80 81       	ld	r24, Z
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	80 72       	andi	r24, 0x20	; 32
 516:	99 27       	eor	r25, r25
 518:	89 2b       	or	r24, r25
 51a:	b1 f3       	breq	.-20     	; 0x508 <USART_int_transmit+0xf8>
		UDR0 = transmit_buffer[i];
 51c:	86 ec       	ldi	r24, 0xC6	; 198
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ae 01       	movw	r20, r28
 522:	47 5f       	subi	r20, 0xF7	; 247
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	2b 81       	ldd	r18, Y+3	; 0x03
 528:	3c 81       	ldd	r19, Y+4	; 0x04
 52a:	24 0f       	add	r18, r20
 52c:	35 1f       	adc	r19, r21
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	9c 83       	std	Y+4, r25	; 0x04
 53e:	8b 83       	std	Y+3, r24	; 0x03
 540:	8d 81       	ldd	r24, Y+5	; 0x05
 542:	9e 81       	ldd	r25, Y+6	; 0x06
 544:	9c 01       	movw	r18, r24
 546:	2f 5f       	subi	r18, 0xFF	; 255
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	9c 81       	ldd	r25, Y+4	; 0x04
 54e:	82 17       	cp	r24, r18
 550:	93 07       	cpc	r25, r19
 552:	cc f2       	brlt	.-78     	; 0x506 <USART_int_transmit+0xf6>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
		UDR0 = transmit_buffer[i];
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 554:	00 00       	nop
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	fc 01       	movw	r30, r24
 55c:	80 81       	ld	r24, Z
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	80 72       	andi	r24, 0x20	; 32
 564:	99 27       	eor	r25, r25
 566:	89 2b       	or	r24, r25
 568:	b1 f3       	breq	.-20     	; 0x556 <USART_int_transmit+0x146>
	UDR0 = 0x0A;	//New Line
 56a:	86 ec       	ldi	r24, 0xC6	; 198
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
}
 574:	00 00       	nop
 576:	64 96       	adiw	r28, 0x14	; 20
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <__subsf3>:
 588:	50 58       	subi	r21, 0x80	; 128

0000058a <__addsf3>:
 58a:	bb 27       	eor	r27, r27
 58c:	aa 27       	eor	r26, r26
 58e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__addsf3x>
 592:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 596:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 59a:	38 f0       	brcs	.+14     	; 0x5aa <__addsf3+0x20>
 59c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <__addsf3+0x20>
 5a2:	39 f4       	brne	.+14     	; 0x5b2 <__addsf3+0x28>
 5a4:	9f 3f       	cpi	r25, 0xFF	; 255
 5a6:	19 f4       	brne	.+6      	; 0x5ae <__addsf3+0x24>
 5a8:	26 f4       	brtc	.+8      	; 0x5b2 <__addsf3+0x28>
 5aa:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>
 5ae:	0e f4       	brtc	.+2      	; 0x5b2 <__addsf3+0x28>
 5b0:	e0 95       	com	r30
 5b2:	e7 fb       	bst	r30, 7
 5b4:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>

000005b8 <__addsf3x>:
 5b8:	e9 2f       	mov	r30, r25
 5ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 5be:	58 f3       	brcs	.-42     	; 0x596 <__addsf3+0xc>
 5c0:	ba 17       	cp	r27, r26
 5c2:	62 07       	cpc	r22, r18
 5c4:	73 07       	cpc	r23, r19
 5c6:	84 07       	cpc	r24, r20
 5c8:	95 07       	cpc	r25, r21
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__addsf3x+0x1c>
 5cc:	79 f4       	brne	.+30     	; 0x5ec <__addsf3x+0x34>
 5ce:	a6 f5       	brtc	.+104    	; 0x638 <__addsf3x+0x80>
 5d0:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 5d4:	0e f4       	brtc	.+2      	; 0x5d8 <__addsf3x+0x20>
 5d6:	e0 95       	com	r30
 5d8:	0b 2e       	mov	r0, r27
 5da:	ba 2f       	mov	r27, r26
 5dc:	a0 2d       	mov	r26, r0
 5de:	0b 01       	movw	r0, r22
 5e0:	b9 01       	movw	r22, r18
 5e2:	90 01       	movw	r18, r0
 5e4:	0c 01       	movw	r0, r24
 5e6:	ca 01       	movw	r24, r20
 5e8:	a0 01       	movw	r20, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	ff 27       	eor	r31, r31
 5ee:	59 1b       	sub	r21, r25
 5f0:	99 f0       	breq	.+38     	; 0x618 <__addsf3x+0x60>
 5f2:	59 3f       	cpi	r21, 0xF9	; 249
 5f4:	50 f4       	brcc	.+20     	; 0x60a <__addsf3x+0x52>
 5f6:	50 3e       	cpi	r21, 0xE0	; 224
 5f8:	68 f1       	brcs	.+90     	; 0x654 <__addsf3x+0x9c>
 5fa:	1a 16       	cp	r1, r26
 5fc:	f0 40       	sbci	r31, 0x00	; 0
 5fe:	a2 2f       	mov	r26, r18
 600:	23 2f       	mov	r18, r19
 602:	34 2f       	mov	r19, r20
 604:	44 27       	eor	r20, r20
 606:	58 5f       	subi	r21, 0xF8	; 248
 608:	f3 cf       	rjmp	.-26     	; 0x5f0 <__addsf3x+0x38>
 60a:	46 95       	lsr	r20
 60c:	37 95       	ror	r19
 60e:	27 95       	ror	r18
 610:	a7 95       	ror	r26
 612:	f0 40       	sbci	r31, 0x00	; 0
 614:	53 95       	inc	r21
 616:	c9 f7       	brne	.-14     	; 0x60a <__addsf3x+0x52>
 618:	7e f4       	brtc	.+30     	; 0x638 <__addsf3x+0x80>
 61a:	1f 16       	cp	r1, r31
 61c:	ba 0b       	sbc	r27, r26
 61e:	62 0b       	sbc	r22, r18
 620:	73 0b       	sbc	r23, r19
 622:	84 0b       	sbc	r24, r20
 624:	ba f0       	brmi	.+46     	; 0x654 <__addsf3x+0x9c>
 626:	91 50       	subi	r25, 0x01	; 1
 628:	a1 f0       	breq	.+40     	; 0x652 <__addsf3x+0x9a>
 62a:	ff 0f       	add	r31, r31
 62c:	bb 1f       	adc	r27, r27
 62e:	66 1f       	adc	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	c2 f7       	brpl	.-16     	; 0x626 <__addsf3x+0x6e>
 636:	0e c0       	rjmp	.+28     	; 0x654 <__addsf3x+0x9c>
 638:	ba 0f       	add	r27, r26
 63a:	62 1f       	adc	r22, r18
 63c:	73 1f       	adc	r23, r19
 63e:	84 1f       	adc	r24, r20
 640:	48 f4       	brcc	.+18     	; 0x654 <__addsf3x+0x9c>
 642:	87 95       	ror	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b7 95       	ror	r27
 64a:	f7 95       	ror	r31
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	08 f0       	brcs	.+2      	; 0x652 <__addsf3x+0x9a>
 650:	b0 cf       	rjmp	.-160    	; 0x5b2 <__addsf3+0x28>
 652:	93 95       	inc	r25
 654:	88 0f       	add	r24, r24
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0xa2>
 658:	99 27       	eor	r25, r25
 65a:	ee 0f       	add	r30, r30
 65c:	97 95       	ror	r25
 65e:	87 95       	ror	r24
 660:	08 95       	ret

00000662 <__cmpsf2>:
 662:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_cmp>
 666:	08 f4       	brcc	.+2      	; 0x66a <__cmpsf2+0x8>
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret

0000066c <__fixsfsi>:
 66c:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
 670:	68 94       	set
 672:	b1 11       	cpse	r27, r1
 674:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 678:	08 95       	ret

0000067a <__fixunssfsi>:
 67a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_splitA>
 67e:	88 f0       	brcs	.+34     	; 0x6a2 <__fixunssfsi+0x28>
 680:	9f 57       	subi	r25, 0x7F	; 127
 682:	98 f0       	brcs	.+38     	; 0x6aa <__fixunssfsi+0x30>
 684:	b9 2f       	mov	r27, r25
 686:	99 27       	eor	r25, r25
 688:	b7 51       	subi	r27, 0x17	; 23
 68a:	b0 f0       	brcs	.+44     	; 0x6b8 <__fixunssfsi+0x3e>
 68c:	e1 f0       	breq	.+56     	; 0x6c6 <__fixunssfsi+0x4c>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	1a f0       	brmi	.+6      	; 0x69e <__fixunssfsi+0x24>
 698:	ba 95       	dec	r27
 69a:	c9 f7       	brne	.-14     	; 0x68e <__fixunssfsi+0x14>
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__fixunssfsi+0x4c>
 69e:	b1 30       	cpi	r27, 0x01	; 1
 6a0:	91 f0       	breq	.+36     	; 0x6c6 <__fixunssfsi+0x4c>
 6a2:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_zero>
 6a6:	b1 e0       	ldi	r27, 0x01	; 1
 6a8:	08 95       	ret
 6aa:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 6ae:	67 2f       	mov	r22, r23
 6b0:	78 2f       	mov	r23, r24
 6b2:	88 27       	eor	r24, r24
 6b4:	b8 5f       	subi	r27, 0xF8	; 248
 6b6:	39 f0       	breq	.+14     	; 0x6c6 <__fixunssfsi+0x4c>
 6b8:	b9 3f       	cpi	r27, 0xF9	; 249
 6ba:	cc f3       	brlt	.-14     	; 0x6ae <__fixunssfsi+0x34>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b3 95       	inc	r27
 6c4:	d9 f7       	brne	.-10     	; 0x6bc <__fixunssfsi+0x42>
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__fixunssfsi+0x5c>
 6c8:	90 95       	com	r25
 6ca:	80 95       	com	r24
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	8f 4f       	sbci	r24, 0xFF	; 255
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	08 95       	ret

000006d8 <__floatunsisf>:
 6d8:	e8 94       	clt
 6da:	09 c0       	rjmp	.+18     	; 0x6ee <__floatsisf+0x12>

000006dc <__floatsisf>:
 6dc:	97 fb       	bst	r25, 7
 6de:	3e f4       	brtc	.+14     	; 0x6ee <__floatsisf+0x12>
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	99 23       	and	r25, r25
 6f0:	a9 f0       	breq	.+42     	; 0x71c <__floatsisf+0x40>
 6f2:	f9 2f       	mov	r31, r25
 6f4:	96 e9       	ldi	r25, 0x96	; 150
 6f6:	bb 27       	eor	r27, r27
 6f8:	93 95       	inc	r25
 6fa:	f6 95       	lsr	r31
 6fc:	87 95       	ror	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f1 11       	cpse	r31, r1
 706:	f8 cf       	rjmp	.-16     	; 0x6f8 <__floatsisf+0x1c>
 708:	fa f4       	brpl	.+62     	; 0x748 <__floatsisf+0x6c>
 70a:	bb 0f       	add	r27, r27
 70c:	11 f4       	brne	.+4      	; 0x712 <__floatsisf+0x36>
 70e:	60 ff       	sbrs	r22, 0
 710:	1b c0       	rjmp	.+54     	; 0x748 <__floatsisf+0x6c>
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	16 c0       	rjmp	.+44     	; 0x748 <__floatsisf+0x6c>
 71c:	88 23       	and	r24, r24
 71e:	11 f0       	breq	.+4      	; 0x724 <__floatsisf+0x48>
 720:	96 e9       	ldi	r25, 0x96	; 150
 722:	11 c0       	rjmp	.+34     	; 0x746 <__floatsisf+0x6a>
 724:	77 23       	and	r23, r23
 726:	21 f0       	breq	.+8      	; 0x730 <__floatsisf+0x54>
 728:	9e e8       	ldi	r25, 0x8E	; 142
 72a:	87 2f       	mov	r24, r23
 72c:	76 2f       	mov	r23, r22
 72e:	05 c0       	rjmp	.+10     	; 0x73a <__floatsisf+0x5e>
 730:	66 23       	and	r22, r22
 732:	71 f0       	breq	.+28     	; 0x750 <__floatsisf+0x74>
 734:	96 e8       	ldi	r25, 0x86	; 134
 736:	86 2f       	mov	r24, r22
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	2a f0       	brmi	.+10     	; 0x748 <__floatsisf+0x6c>
 73e:	9a 95       	dec	r25
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	da f7       	brpl	.-10     	; 0x73e <__floatsisf+0x62>
 748:	88 0f       	add	r24, r24
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__fp_cmp>:
 752:	99 0f       	add	r25, r25
 754:	00 08       	sbc	r0, r0
 756:	55 0f       	add	r21, r21
 758:	aa 0b       	sbc	r26, r26
 75a:	e0 e8       	ldi	r30, 0x80	; 128
 75c:	fe ef       	ldi	r31, 0xFE	; 254
 75e:	16 16       	cp	r1, r22
 760:	17 06       	cpc	r1, r23
 762:	e8 07       	cpc	r30, r24
 764:	f9 07       	cpc	r31, r25
 766:	c0 f0       	brcs	.+48     	; 0x798 <__fp_cmp+0x46>
 768:	12 16       	cp	r1, r18
 76a:	13 06       	cpc	r1, r19
 76c:	e4 07       	cpc	r30, r20
 76e:	f5 07       	cpc	r31, r21
 770:	98 f0       	brcs	.+38     	; 0x798 <__fp_cmp+0x46>
 772:	62 1b       	sub	r22, r18
 774:	73 0b       	sbc	r23, r19
 776:	84 0b       	sbc	r24, r20
 778:	95 0b       	sbc	r25, r21
 77a:	39 f4       	brne	.+14     	; 0x78a <__fp_cmp+0x38>
 77c:	0a 26       	eor	r0, r26
 77e:	61 f0       	breq	.+24     	; 0x798 <__fp_cmp+0x46>
 780:	23 2b       	or	r18, r19
 782:	24 2b       	or	r18, r20
 784:	25 2b       	or	r18, r21
 786:	21 f4       	brne	.+8      	; 0x790 <__fp_cmp+0x3e>
 788:	08 95       	ret
 78a:	0a 26       	eor	r0, r26
 78c:	09 f4       	brne	.+2      	; 0x790 <__fp_cmp+0x3e>
 78e:	a1 40       	sbci	r26, 0x01	; 1
 790:	a6 95       	lsr	r26
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	81 1d       	adc	r24, r1
 796:	81 1d       	adc	r24, r1
 798:	08 95       	ret

0000079a <__fp_inf>:
 79a:	97 f9       	bld	r25, 7
 79c:	9f 67       	ori	r25, 0x7F	; 127
 79e:	80 e8       	ldi	r24, 0x80	; 128
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	08 95       	ret

000007a6 <__fp_nan>:
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	80 ec       	ldi	r24, 0xC0	; 192
 7aa:	08 95       	ret

000007ac <__fp_pscA>:
 7ac:	00 24       	eor	r0, r0
 7ae:	0a 94       	dec	r0
 7b0:	16 16       	cp	r1, r22
 7b2:	17 06       	cpc	r1, r23
 7b4:	18 06       	cpc	r1, r24
 7b6:	09 06       	cpc	r0, r25
 7b8:	08 95       	ret

000007ba <__fp_pscB>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	14 06       	cpc	r1, r20
 7c4:	05 06       	cpc	r0, r21
 7c6:	08 95       	ret

000007c8 <__fp_round>:
 7c8:	09 2e       	mov	r0, r25
 7ca:	03 94       	inc	r0
 7cc:	00 0c       	add	r0, r0
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0xc>
 7d0:	88 23       	and	r24, r24
 7d2:	52 f0       	brmi	.+20     	; 0x7e8 <__fp_round+0x20>
 7d4:	bb 0f       	add	r27, r27
 7d6:	40 f4       	brcc	.+16     	; 0x7e8 <__fp_round+0x20>
 7d8:	bf 2b       	or	r27, r31
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0x18>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__fp_round+0x20>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__fp_split3>:
 7ea:	57 fd       	sbrc	r21, 7
 7ec:	90 58       	subi	r25, 0x80	; 128
 7ee:	44 0f       	add	r20, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	59 f0       	breq	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	71 f0       	breq	.+28     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f8:	47 95       	ror	r20

000007fa <__fp_splitA>:
 7fa:	88 0f       	add	r24, r24
 7fc:	97 fb       	bst	r25, 7
 7fe:	99 1f       	adc	r25, r25
 800:	61 f0       	breq	.+24     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	79 f0       	breq	.+30     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 806:	87 95       	ror	r24
 808:	08 95       	ret
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	55 1f       	adc	r21, r21
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <__fp_split3+0xe>
 814:	46 95       	lsr	r20
 816:	f1 df       	rcall	.-30     	; 0x7fa <__fp_splitA>
 818:	08 c0       	rjmp	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	99 1f       	adc	r25, r25
 822:	f1 cf       	rjmp	.-30     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 824:	86 95       	lsr	r24
 826:	71 05       	cpc	r23, r1
 828:	61 05       	cpc	r22, r1
 82a:	08 94       	sec
 82c:	08 95       	ret

0000082e <__fp_zero>:
 82e:	e8 94       	clt

00000830 <__fp_szero>:
 830:	bb 27       	eor	r27, r27
 832:	66 27       	eor	r22, r22
 834:	77 27       	eor	r23, r23
 836:	cb 01       	movw	r24, r22
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__gesf2>:
 83c:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_cmp>
 840:	08 f4       	brcc	.+2      	; 0x844 <__gesf2+0x8>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	08 95       	ret

00000846 <log10>:
 846:	0e 94 33 04 	call	0x866	; 0x866 <log>
 84a:	29 ed       	ldi	r18, 0xD9	; 217
 84c:	3b e5       	ldi	r19, 0x5B	; 91
 84e:	4e ed       	ldi	r20, 0xDE	; 222
 850:	5e e3       	ldi	r21, 0x3E	; 62
 852:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__mulsf3>
 856:	16 f0       	brts	.+4      	; 0x85c <log10+0x16>
 858:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_mpack>
 85c:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>
 860:	68 94       	set
 862:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>

00000866 <log>:
 866:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_splitA>
 86a:	a8 f3       	brcs	.-22     	; 0x856 <log10+0x10>
 86c:	99 23       	and	r25, r25
 86e:	c1 f3       	breq	.-16     	; 0x860 <log10+0x1a>
 870:	ae f3       	brts	.-22     	; 0x85c <log10+0x16>
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	1f 93       	push	r17
 878:	0f 93       	push	r16
 87a:	ff 92       	push	r15
 87c:	c9 2f       	mov	r28, r25
 87e:	dd 27       	eor	r29, r29
 880:	88 23       	and	r24, r24
 882:	2a f0       	brmi	.+10     	; 0x88e <log+0x28>
 884:	21 97       	sbiw	r28, 0x01	; 1
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	da f7       	brpl	.-10     	; 0x884 <log+0x1e>
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	40 e8       	ldi	r20, 0x80	; 128
 894:	5f eb       	ldi	r21, 0xBF	; 191
 896:	9f e3       	ldi	r25, 0x3F	; 63
 898:	88 39       	cpi	r24, 0x98	; 152
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <log+0x3e>
 89c:	80 3e       	cpi	r24, 0xE0	; 224
 89e:	38 f0       	brcs	.+14     	; 0x8ae <log+0x48>
 8a0:	21 96       	adiw	r28, 0x01	; 1
 8a2:	8f 77       	andi	r24, 0x7F	; 127
 8a4:	0e 94 c5 02 	call	0x58a	; 0x58a <__addsf3>
 8a8:	e8 e6       	ldi	r30, 0x68	; 104
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <log+0x50>
 8ae:	0e 94 c5 02 	call	0x58a	; 0x58a <__addsf3>
 8b2:	e5 e9       	ldi	r30, 0x95	; 149
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_powser>
 8ba:	8b 01       	movw	r16, r22
 8bc:	be 01       	movw	r22, r28
 8be:	ec 01       	movw	r28, r24
 8c0:	fb 2e       	mov	r15, r27
 8c2:	6f 57       	subi	r22, 0x7F	; 127
 8c4:	71 09       	sbc	r23, r1
 8c6:	75 95       	asr	r23
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 0b       	sbc	r24, r24
 8cc:	99 0b       	sbc	r25, r25
 8ce:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__floatsisf>
 8d2:	28 e1       	ldi	r18, 0x18	; 24
 8d4:	32 e7       	ldi	r19, 0x72	; 114
 8d6:	41 e3       	ldi	r20, 0x31	; 49
 8d8:	5f e3       	ldi	r21, 0x3F	; 63
 8da:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3x>
 8de:	af 2d       	mov	r26, r15
 8e0:	98 01       	movw	r18, r16
 8e2:	ae 01       	movw	r20, r28
 8e4:	ff 90       	pop	r15
 8e6:	0f 91       	pop	r16
 8e8:	1f 91       	pop	r17
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__addsf3x>
 8f2:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>

000008f6 <__mulsf3>:
 8f6:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3x>
 8fa:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 8fe:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 902:	38 f0       	brcs	.+14     	; 0x912 <__stack+0x13>
 904:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 908:	20 f0       	brcs	.+8      	; 0x912 <__stack+0x13>
 90a:	95 23       	and	r25, r21
 90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
 90e:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 912:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>
 916:	11 24       	eor	r1, r1
 918:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>

0000091c <__mulsf3x>:
 91c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 920:	70 f3       	brcs	.-36     	; 0x8fe <__mulsf3+0x8>

00000922 <__mulsf3_pse>:
 922:	95 9f       	mul	r25, r21
 924:	c1 f3       	breq	.-16     	; 0x916 <__stack+0x17>
 926:	95 0f       	add	r25, r21
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	55 1f       	adc	r21, r21
 92c:	62 9f       	mul	r22, r18
 92e:	f0 01       	movw	r30, r0
 930:	72 9f       	mul	r23, r18
 932:	bb 27       	eor	r27, r27
 934:	f0 0d       	add	r31, r0
 936:	b1 1d       	adc	r27, r1
 938:	63 9f       	mul	r22, r19
 93a:	aa 27       	eor	r26, r26
 93c:	f0 0d       	add	r31, r0
 93e:	b1 1d       	adc	r27, r1
 940:	aa 1f       	adc	r26, r26
 942:	64 9f       	mul	r22, r20
 944:	66 27       	eor	r22, r22
 946:	b0 0d       	add	r27, r0
 948:	a1 1d       	adc	r26, r1
 94a:	66 1f       	adc	r22, r22
 94c:	82 9f       	mul	r24, r18
 94e:	22 27       	eor	r18, r18
 950:	b0 0d       	add	r27, r0
 952:	a1 1d       	adc	r26, r1
 954:	62 1f       	adc	r22, r18
 956:	73 9f       	mul	r23, r19
 958:	b0 0d       	add	r27, r0
 95a:	a1 1d       	adc	r26, r1
 95c:	62 1f       	adc	r22, r18
 95e:	83 9f       	mul	r24, r19
 960:	a0 0d       	add	r26, r0
 962:	61 1d       	adc	r22, r1
 964:	22 1f       	adc	r18, r18
 966:	74 9f       	mul	r23, r20
 968:	33 27       	eor	r19, r19
 96a:	a0 0d       	add	r26, r0
 96c:	61 1d       	adc	r22, r1
 96e:	23 1f       	adc	r18, r19
 970:	84 9f       	mul	r24, r20
 972:	60 0d       	add	r22, r0
 974:	21 1d       	adc	r18, r1
 976:	82 2f       	mov	r24, r18
 978:	76 2f       	mov	r23, r22
 97a:	6a 2f       	mov	r22, r26
 97c:	11 24       	eor	r1, r1
 97e:	9f 57       	subi	r25, 0x7F	; 127
 980:	50 40       	sbci	r21, 0x00	; 0
 982:	9a f0       	brmi	.+38     	; 0x9aa <__mulsf3_pse+0x88>
 984:	f1 f0       	breq	.+60     	; 0x9c2 <__mulsf3_pse+0xa0>
 986:	88 23       	and	r24, r24
 988:	4a f0       	brmi	.+18     	; 0x99c <__mulsf3_pse+0x7a>
 98a:	ee 0f       	add	r30, r30
 98c:	ff 1f       	adc	r31, r31
 98e:	bb 1f       	adc	r27, r27
 990:	66 1f       	adc	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	91 50       	subi	r25, 0x01	; 1
 998:	50 40       	sbci	r21, 0x00	; 0
 99a:	a9 f7       	brne	.-22     	; 0x986 <__mulsf3_pse+0x64>
 99c:	9e 3f       	cpi	r25, 0xFE	; 254
 99e:	51 05       	cpc	r21, r1
 9a0:	80 f0       	brcs	.+32     	; 0x9c2 <__mulsf3_pse+0xa0>
 9a2:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 9a6:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 9aa:	5f 3f       	cpi	r21, 0xFF	; 255
 9ac:	e4 f3       	brlt	.-8      	; 0x9a6 <__mulsf3_pse+0x84>
 9ae:	98 3e       	cpi	r25, 0xE8	; 232
 9b0:	d4 f3       	brlt	.-12     	; 0x9a6 <__mulsf3_pse+0x84>
 9b2:	86 95       	lsr	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b7 95       	ror	r27
 9ba:	f7 95       	ror	r31
 9bc:	e7 95       	ror	r30
 9be:	9f 5f       	subi	r25, 0xFF	; 255
 9c0:	c1 f7       	brne	.-16     	; 0x9b2 <__mulsf3_pse+0x90>
 9c2:	fe 2b       	or	r31, r30
 9c4:	88 0f       	add	r24, r24
 9c6:	91 1d       	adc	r25, r1
 9c8:	96 95       	lsr	r25
 9ca:	87 95       	ror	r24
 9cc:	97 f9       	bld	r25, 7
 9ce:	08 95       	ret

000009d0 <__fp_mpack>:
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <__fp_mpack_finite+0xc>

000009d4 <__fp_mpack_finite>:
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__fp_mpack_finite+0xc>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	88 0f       	add	r24, r24
 9e2:	91 1d       	adc	r25, r1
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__fp_powser>:
 9ec:	df 93       	push	r29
 9ee:	cf 93       	push	r28
 9f0:	1f 93       	push	r17
 9f2:	0f 93       	push	r16
 9f4:	ff 92       	push	r15
 9f6:	ef 92       	push	r14
 9f8:	df 92       	push	r13
 9fa:	7b 01       	movw	r14, r22
 9fc:	8c 01       	movw	r16, r24
 9fe:	68 94       	set
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <__fp_powser+0x22>
 a02:	da 2e       	mov	r13, r26
 a04:	ef 01       	movw	r28, r30
 a06:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3x>
 a0a:	fe 01       	movw	r30, r28
 a0c:	e8 94       	clt
 a0e:	a5 91       	lpm	r26, Z+
 a10:	25 91       	lpm	r18, Z+
 a12:	35 91       	lpm	r19, Z+
 a14:	45 91       	lpm	r20, Z+
 a16:	55 91       	lpm	r21, Z+
 a18:	a6 f3       	brts	.-24     	; 0xa02 <__fp_powser+0x16>
 a1a:	ef 01       	movw	r28, r30
 a1c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__addsf3x>
 a20:	fe 01       	movw	r30, r28
 a22:	97 01       	movw	r18, r14
 a24:	a8 01       	movw	r20, r16
 a26:	da 94       	dec	r13
 a28:	69 f7       	brne	.-38     	; 0xa04 <__fp_powser+0x18>
 a2a:	df 90       	pop	r13
 a2c:	ef 90       	pop	r14
 a2e:	ff 90       	pop	r15
 a30:	0f 91       	pop	r16
 a32:	1f 91       	pop	r17
 a34:	cf 91       	pop	r28
 a36:	df 91       	pop	r29
 a38:	08 95       	ret

00000a3a <__umulhisi3>:
 a3a:	a2 9f       	mul	r26, r18
 a3c:	b0 01       	movw	r22, r0
 a3e:	b3 9f       	mul	r27, r19
 a40:	c0 01       	movw	r24, r0
 a42:	a3 9f       	mul	r26, r19
 a44:	70 0d       	add	r23, r0
 a46:	81 1d       	adc	r24, r1
 a48:	11 24       	eor	r1, r1
 a4a:	91 1d       	adc	r25, r1
 a4c:	b2 9f       	mul	r27, r18
 a4e:	70 0d       	add	r23, r0
 a50:	81 1d       	adc	r24, r1
 a52:	11 24       	eor	r1, r1
 a54:	91 1d       	adc	r25, r1
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
