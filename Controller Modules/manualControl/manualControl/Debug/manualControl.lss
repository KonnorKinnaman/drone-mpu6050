
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001676  000016ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001676  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea3  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008eb  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a11  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00003a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ef  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bb  00000000  00000000  00004423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000049de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e6 e7       	ldi	r30, 0x76	; 118
      d6:	f6 e1       	ldi	r31, 0x16	; 22
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	ae 33       	cpi	r26, 0x3E	; 62
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	ae e3       	ldi	r26, 0x3E	; 62
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	ae 33       	cpi	r26, 0x3E	; 62
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
      f8:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
#define F_CPU 16000000UL

void init_ALL(void);

int main(void)
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	ea 97       	sbiw	r28, 0x3a	; 58
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
	init_ALL();
     114:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <init_ALL>
	int received_data = 0;
     118:	1a 82       	std	Y+2, r1	; 0x02
     11a:	19 82       	std	Y+1, r1	; 0x01
	int16_t gx, gy;
	int16_t ax, ay;
	float gyro_x_deg, gyro_y_deg;
	
	//Kalman Filter Constants Assuming Level Take-Off Plane and Std Dev of 2 Degrees
	float K_AngleRoll=0, K_UncAngleRoll = 2 * 2;
     11c:	1b 82       	std	Y+3, r1	; 0x03
     11e:	1c 82       	std	Y+4, r1	; 0x04
     120:	1d 82       	std	Y+5, r1	; 0x05
     122:	1e 82       	std	Y+6, r1	; 0x06
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	a0 e8       	ldi	r26, 0x80	; 128
     12a:	b0 e4       	ldi	r27, 0x40	; 64
     12c:	8f 83       	std	Y+7, r24	; 0x07
     12e:	98 87       	std	Y+8, r25	; 0x08
     130:	a9 87       	std	Y+9, r26	; 0x09
     132:	ba 87       	std	Y+10, r27	; 0x0a
	float K_AnglePitch = 0, K_UncAnglePitch = 2 * 2;
     134:	1b 86       	std	Y+11, r1	; 0x0b
     136:	1c 86       	std	Y+12, r1	; 0x0c
     138:	1d 86       	std	Y+13, r1	; 0x0d
     13a:	1e 86       	std	Y+14, r1	; 0x0e
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	a0 e8       	ldi	r26, 0x80	; 128
     142:	b0 e4       	ldi	r27, 0x40	; 64
     144:	8f 87       	std	Y+15, r24	; 0x0f
     146:	98 8b       	std	Y+16, r25	; 0x10
     148:	a9 8b       	std	Y+17, r26	; 0x11
     14a:	ba 8b       	std	Y+18, r27	; 0x12
	float K1DFilterOutput[] = {0,0};	//{angle_prediction, uncertainty_of_prediction}
     14c:	1b aa       	std	Y+51, r1	; 0x33
     14e:	1c aa       	std	Y+52, r1	; 0x34
     150:	1d aa       	std	Y+53, r1	; 0x35
     152:	1e aa       	std	Y+54, r1	; 0x36
     154:	1f aa       	std	Y+55, r1	; 0x37
     156:	18 ae       	std	Y+56, r1	; 0x38
     158:	19 ae       	std	Y+57, r1	; 0x39
     15a:	1a ae       	std	Y+58, r1	; 0x3a
	float testVal2 = 65.879;
     15c:	8c e0       	ldi	r24, 0x0C	; 12
     15e:	92 ec       	ldi	r25, 0xC2	; 194
     160:	a3 e8       	ldi	r26, 0x83	; 131
     162:	b2 e4       	ldi	r27, 0x42	; 66
     164:	8b 8b       	std	Y+19, r24	; 0x13
     166:	9c 8b       	std	Y+20, r25	; 0x14
     168:	ad 8b       	std	Y+21, r26	; 0x15
     16a:	be 8b       	std	Y+22, r27	; 0x16
	uint8_t address = 0;
     16c:	1f 8a       	std	Y+23, r1	; 0x17
    
    while (1) 
    {
		
		mpu6050_read_gyro_x(&gx);
     16e:	ce 01       	movw	r24, r28
     170:	8b 96       	adiw	r24, 0x2b	; 43
     172:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mpu6050_read_gyro_x>
		mpu6050_read_gyro_y(&gy);
     176:	ce 01       	movw	r24, r28
     178:	8d 96       	adiw	r24, 0x2d	; 45
     17a:	0e 94 ac 02 	call	0x558	; 0x558 <mpu6050_read_gyro_y>
		mpu6050_read_accel_x(&ax);
     17e:	ce 01       	movw	r24, r28
     180:	8f 96       	adiw	r24, 0x2f	; 47
     182:	0e 94 05 03 	call	0x60a	; 0x60a <mpu6050_read_accel_x>
		mpu6050_read_accel_y(&ay);
     186:	ce 01       	movw	r24, r28
     188:	c1 96       	adiw	r24, 0x31	; 49
     18a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <mpu6050_read_accel_y>
		gyro_x_deg = gx/131.0;
     18e:	8b a5       	ldd	r24, Y+43	; 0x2b
     190:	9c a5       	ldd	r25, Y+44	; 0x2c
     192:	09 2e       	mov	r0, r25
     194:	00 0c       	add	r0, r0
     196:	aa 0b       	sbc	r26, r26
     198:	bb 0b       	sbc	r27, r27
     19a:	bc 01       	movw	r22, r24
     19c:	cd 01       	movw	r24, r26
     19e:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
     1a2:	dc 01       	movw	r26, r24
     1a4:	cb 01       	movw	r24, r22
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	43 e0       	ldi	r20, 0x03	; 3
     1ac:	53 e4       	ldi	r21, 0x43	; 67
     1ae:	bc 01       	movw	r22, r24
     1b0:	cd 01       	movw	r24, r26
     1b2:	0e 94 de 05 	call	0xbbc	; 0xbbc <__divsf3>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	88 8f       	std	Y+24, r24	; 0x18
     1bc:	99 8f       	std	Y+25, r25	; 0x19
     1be:	aa 8f       	std	Y+26, r26	; 0x1a
     1c0:	bb 8f       	std	Y+27, r27	; 0x1b
		int8_t scaled_x = gx/2;
     1c2:	8b a5       	ldd	r24, Y+43	; 0x2b
     1c4:	9c a5       	ldd	r25, Y+44	; 0x2c
     1c6:	99 23       	and	r25, r25
     1c8:	0c f4       	brge	.+2      	; 0x1cc <main+0xcc>
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	8c 8f       	std	Y+28, r24	; 0x1c
		
		USART_char_transmit("Gyroscope Output");
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <USART_char_transmit>
		USART_float_transmit(gyro_x_deg, 2);
     1da:	88 8d       	ldd	r24, Y+24	; 0x18
     1dc:	99 8d       	ldd	r25, Y+25	; 0x19
     1de:	aa 8d       	ldd	r26, Y+26	; 0x1a
     1e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
     1e2:	42 e0       	ldi	r20, 0x02	; 2
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	bc 01       	movw	r22, r24
     1e8:	cd 01       	movw	r24, r26
     1ea:	0e 94 af 04 	call	0x95e	; 0x95e <USART_float_transmit>
		USART_int_transmit(gy);
     1ee:	8d a5       	ldd	r24, Y+45	; 0x2d
     1f0:	9e a5       	ldd	r25, Y+46	; 0x2e
     1f2:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_int_transmit>
		USART_char_transmit("Accelerometer Output");
     1f6:	81 e1       	ldi	r24, 0x11	; 17
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <USART_char_transmit>
		USART_int_transmit(ax);
     1fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     200:	98 a9       	ldd	r25, Y+48	; 0x30
     202:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_int_transmit>
		USART_int_transmit(ay);
     206:	89 a9       	ldd	r24, Y+49	; 0x31
     208:	9a a9       	ldd	r25, Y+50	; 0x32
     20a:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_int_transmit>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	aa e7       	ldi	r26, 0x7A	; 122
     214:	b4 e4       	ldi	r27, 0x44	; 68
     216:	8d 8f       	std	Y+29, r24	; 0x1d
     218:	9e 8f       	std	Y+30, r25	; 0x1e
     21a:	af 8f       	std	Y+31, r26	; 0x1f
     21c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	4a e7       	ldi	r20, 0x7A	; 122
     224:	53 e4       	ldi	r21, 0x43	; 67
     226:	6d 8d       	ldd	r22, Y+29	; 0x1d
     228:	7e 8d       	ldd	r23, Y+30	; 0x1e
     22a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     22c:	98 a1       	ldd	r25, Y+32	; 0x20
     22e:	0e 94 95 07 	call	0xf2a	; 0xf2a <__mulsf3>
     232:	dc 01       	movw	r26, r24
     234:	cb 01       	movw	r24, r22
     236:	89 a3       	std	Y+33, r24	; 0x21
     238:	9a a3       	std	Y+34, r25	; 0x22
     23a:	ab a3       	std	Y+35, r26	; 0x23
     23c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e8       	ldi	r20, 0x80	; 128
     244:	5f e3       	ldi	r21, 0x3F	; 63
     246:	69 a1       	ldd	r22, Y+33	; 0x21
     248:	7a a1       	ldd	r23, Y+34	; 0x22
     24a:	8b a1       	ldd	r24, Y+35	; 0x23
     24c:	9c a1       	ldd	r25, Y+36	; 0x24
     24e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__cmpsf2>
     252:	88 23       	and	r24, r24
     254:	2c f4       	brge	.+10     	; 0x260 <main+0x160>
		__ticks = 1;
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	9e a3       	std	Y+38, r25	; 0x26
     25c:	8d a3       	std	Y+37, r24	; 0x25
     25e:	3f c0       	rjmp	.+126    	; 0x2de <main+0x1de>
	else if (__tmp > 65535)
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	3f ef       	ldi	r19, 0xFF	; 255
     264:	4f e7       	ldi	r20, 0x7F	; 127
     266:	57 e4       	ldi	r21, 0x47	; 71
     268:	69 a1       	ldd	r22, Y+33	; 0x21
     26a:	7a a1       	ldd	r23, Y+34	; 0x22
     26c:	8b a1       	ldd	r24, Y+35	; 0x23
     26e:	9c a1       	ldd	r25, Y+36	; 0x24
     270:	0e 94 38 07 	call	0xe70	; 0xe70 <__gesf2>
     274:	18 16       	cp	r1, r24
     276:	4c f5       	brge	.+82     	; 0x2ca <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e2       	ldi	r20, 0x20	; 32
     27e:	51 e4       	ldi	r21, 0x41	; 65
     280:	6d 8d       	ldd	r22, Y+29	; 0x1d
     282:	7e 8d       	ldd	r23, Y+30	; 0x1e
     284:	8f 8d       	ldd	r24, Y+31	; 0x1f
     286:	98 a1       	ldd	r25, Y+32	; 0x20
     288:	0e 94 95 07 	call	0xf2a	; 0xf2a <__mulsf3>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	9e a3       	std	Y+38, r25	; 0x26
     29e:	8d a3       	std	Y+37, r24	; 0x25
     2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <main+0x1c0>
     2a2:	89 e1       	ldi	r24, 0x19	; 25
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	98 a7       	std	Y+40, r25	; 0x28
     2a8:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2aa:	8f a1       	ldd	r24, Y+39	; 0x27
     2ac:	98 a5       	ldd	r25, Y+40	; 0x28
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x1ae>
     2b2:	98 a7       	std	Y+40, r25	; 0x28
     2b4:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	8d a1       	ldd	r24, Y+37	; 0x25
     2b8:	9e a1       	ldd	r25, Y+38	; 0x26
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	9e a3       	std	Y+38, r25	; 0x26
     2be:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c0:	8d a1       	ldd	r24, Y+37	; 0x25
     2c2:	9e a1       	ldd	r25, Y+38	; 0x26
     2c4:	89 2b       	or	r24, r25
     2c6:	69 f7       	brne	.-38     	; 0x2a2 <main+0x1a2>
     2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ca:	69 a1       	ldd	r22, Y+33	; 0x21
     2cc:	7a a1       	ldd	r23, Y+34	; 0x22
     2ce:	8b a1       	ldd	r24, Y+35	; 0x23
     2d0:	9c a1       	ldd	r25, Y+36	; 0x24
     2d2:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	9e a3       	std	Y+38, r25	; 0x26
     2dc:	8d a3       	std	Y+37, r24	; 0x25
     2de:	8d a1       	ldd	r24, Y+37	; 0x25
     2e0:	9e a1       	ldd	r25, Y+38	; 0x26
     2e2:	9a a7       	std	Y+42, r25	; 0x2a
     2e4:	89 a7       	std	Y+41, r24	; 0x29
     2e6:	89 a5       	ldd	r24, Y+41	; 0x29
     2e8:	9a a5       	ldd	r25, Y+42	; 0x2a
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x1ea>
     2ee:	9a a7       	std	Y+42, r25	; 0x2a
     2f0:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(1000);
    }
     2f2:	3d cf       	rjmp	.-390    	; 0x16e <main+0x6e>

000002f4 <init_ALL>:
}

void init_ALL(void)
{
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
	//init_USART();
	init_I2C();
     2fc:	0e 94 86 01 	call	0x30c	; 0x30c <init_I2C>
	mpu6050_init();
     300:	0e 94 3e 02 	call	0x47c	; 0x47c <mpu6050_init>
}
     304:	00 00       	nop
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <init_I2C>:
 *  Author: Konnor Kinnaman
 */ 
#include "mpu6050.h"

void init_I2C(void)
{
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
     314:	87 e2       	ldi	r24, 0x27	; 39
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	27 e2       	ldi	r18, 0x27	; 39
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	2f 7c       	andi	r18, 0xCF	; 207
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
	PORTC |= (1<<PORTC4) | (1<<PORTC5);
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	28 e2       	ldi	r18, 0x28	; 40
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	20 63       	ori	r18, 0x30	; 48
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
	
	TWSR = 0x00; //Prescalar of 1
     338:	89 eb       	ldi	r24, 0xB9	; 185
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	10 82       	st	Z, r1
	TWBR = ((F_CPU/SCL_CLOCK) - 16) / 2;	//Set Baud Rate for Transmission
     340:	88 eb       	ldi	r24, 0xB8	; 184
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	28 e4       	ldi	r18, 0x48	; 72
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
}
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <I2C_start>:

uint8_t I2C_start(void)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	1f 92       	push	r1
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
	TWCR = START;
     35c:	8c eb       	ldi	r24, 0xBC	; 188
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	24 ea       	ldi	r18, 0xA4	; 164
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
     366:	00 00       	nop
     368:	8c eb       	ldi	r24, 0xBC	; 188
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	88 23       	and	r24, r24
     372:	d4 f7       	brge	.-12     	; 0x368 <I2C_start+0x16>
	
	uint8_t status = TWSR & 0xF8;
     374:	89 eb       	ldi	r24, 0xB9	; 185
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	88 7f       	andi	r24, 0xF8	; 248
     37e:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08 && status != 0x10)
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	29 f0       	breq	.+10     	; 0x390 <I2C_start+0x3e>
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	80 31       	cpi	r24, 0x10	; 16
     38a:	11 f0       	breq	.+4      	; 0x390 <I2C_start+0x3e>
	{
		return 0;
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	01 c0       	rjmp	.+2      	; 0x392 <I2C_start+0x40>
	}
	return 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
}
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <I2C_write>:

uint8_t I2C_write(uint8_t data)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <I2C_write+0x6>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	8a 83       	std	Y+2, r24	; 0x02
	//Write to I2C device
	TWDR = data;
     3a6:	8b eb       	ldi	r24, 0xBB	; 187
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2a 81       	ldd	r18, Y+2	; 0x02
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
	TWCR = CLEAR;
     3b0:	8c eb       	ldi	r24, 0xBC	; 188
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	24 e8       	ldi	r18, 0x84	; 132
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	
	while(!(TWCR & (1<<TWINT)));
     3ba:	00 00       	nop
     3bc:	8c eb       	ldi	r24, 0xBC	; 188
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	88 23       	and	r24, r24
     3c6:	d4 f7       	brge	.-12     	; 0x3bc <I2C_write+0x22>
	
	uint8_t status = TWSR & 0xF8;
     3c8:	89 eb       	ldi	r24, 0xB9	; 185
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	88 7f       	andi	r24, 0xF8	; 248
     3d2:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x18 && status != 0x28)
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	88 31       	cpi	r24, 0x18	; 24
     3d8:	29 f0       	breq	.+10     	; 0x3e4 <I2C_write+0x4a>
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	88 32       	cpi	r24, 0x28	; 40
     3de:	11 f0       	breq	.+4      	; 0x3e4 <I2C_write+0x4a>
	{
		return 0;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <I2C_write+0x4c>
	}
	return 1;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
}
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <I2C_read_ACK>:

uint8_t I2C_read_ACK(void)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	//Device Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
     3f8:	8c eb       	ldi	r24, 0xBC	; 188
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	24 ec       	ldi	r18, 0xC4	; 196
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
     402:	00 00       	nop
     404:	8c eb       	ldi	r24, 0xBC	; 188
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	80 81       	ld	r24, Z
     40c:	88 23       	and	r24, r24
     40e:	d4 f7       	brge	.-12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	
	return TWDR;
     410:	8b eb       	ldi	r24, 0xBB	; 187
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <I2C_read_NACK>:

uint8_t I2C_read_NACK(void)
{
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
	//Device not Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT);
     426:	8c eb       	ldi	r24, 0xBC	; 188
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	24 e8       	ldi	r18, 0x84	; 132
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
     430:	00 00       	nop
     432:	8c eb       	ldi	r24, 0xBC	; 188
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	80 81       	ld	r24, Z
     43a:	88 23       	and	r24, r24
     43c:	d4 f7       	brge	.-12     	; 0x432 <I2C_read_NACK+0x14>
	
	return TWDR;
     43e:	8b eb       	ldi	r24, 0xBB	; 187
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	80 81       	ld	r24, Z
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <I2C_stop>:

void I2C_stop(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
	//Stop I2C Communication
	TWCR = STOP;
     454:	8c eb       	ldi	r24, 0xBC	; 188
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	24 e9       	ldi	r18, 0x94	; 148
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
	while(TWCR & (1<<TWSTO));
     45e:	00 00       	nop
     460:	8c eb       	ldi	r24, 0xBC	; 188
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	fc 01       	movw	r30, r24
     466:	80 81       	ld	r24, Z
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	80 71       	andi	r24, 0x10	; 16
     46e:	99 27       	eor	r25, r25
     470:	89 2b       	or	r24, r25
     472:	b1 f7       	brne	.-20     	; 0x460 <I2C_stop+0x14>
}
     474:	00 00       	nop
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <mpu6050_init>:

void mpu6050_init(void)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
	//Initialize mpu6050
	I2C_start();
     484:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
     488:	80 ed       	ldi	r24, 0xD0	; 208
     48a:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(0x6B);	//Access PWR_MGMT_1 register
     48e:	8b e6       	ldi	r24, 0x6B	; 107
     490:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(0x00);	//Start mpu6050 module
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_stop();
     49a:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
}
     49e:	00 00       	nop
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <mpu6050_read_gyro_x>:

void mpu6050_read_gyro_x(int16_t *gx)
{
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <mpu6050_read_gyro_x+0x8>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <mpu6050_read_gyro_x+0xa>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	9c 83       	std	Y+4, r25	; 0x04
     4b6:	8b 83       	std	Y+3, r24	; 0x03
	int8_t gyro_xh;
	int8_t gyro_xl;
	
	//Read from upper GYRO_X register
	I2C_start();
     4b8:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
     4bc:	80 ed       	ldi	r24, 0xD0	; 208
     4be:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(GYRO_XOUT_H);	
     4c2:	83 e4       	ldi	r24, 0x43	; 67
     4c4:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     4c8:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);	
     4cc:	81 ed       	ldi	r24, 0xD1	; 209
     4ce:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	gyro_xh = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     4d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     4d6:	08 2e       	mov	r0, r24
     4d8:	00 0c       	add	r0, r0
     4da:	99 0b       	sbc	r25, r25
     4dc:	98 2f       	mov	r25, r24
     4de:	88 27       	eor	r24, r24
     4e0:	18 2f       	mov	r17, r24
     4e2:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     4e6:	81 2b       	or	r24, r17
     4e8:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
     4ea:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	//Read from lower GYRO_X register
	I2C_start();
     4ee:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     4f2:	80 ed       	ldi	r24, 0xD0	; 208
     4f4:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(GYRO_XOUT_L);
     4f8:	84 e4       	ldi	r24, 0x44	; 68
     4fa:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     4fe:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     502:	81 ed       	ldi	r24, 0xD1	; 209
     504:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	gyro_xl = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     508:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     50c:	08 2e       	mov	r0, r24
     50e:	00 0c       	add	r0, r0
     510:	99 0b       	sbc	r25, r25
     512:	98 2f       	mov	r25, r24
     514:	88 27       	eor	r24, r24
     516:	18 2f       	mov	r17, r24
     518:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     51c:	81 2b       	or	r24, r17
     51e:	8a 83       	std	Y+2, r24	; 0x02
	//*gy = ((int16_t)I2C_read_ACK() << 8 | I2C_read_ACK());
	//*gz = ((int16_t)I2C_read_ACK() << 8 | I2C_read_NACK());
	*gx = (gyro_xh << 8) | gyro_xl ;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	08 2e       	mov	r0, r24
     524:	00 0c       	add	r0, r0
     526:	99 0b       	sbc	r25, r25
     528:	38 2f       	mov	r19, r24
     52a:	22 27       	eor	r18, r18
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	08 2e       	mov	r0, r24
     530:	00 0c       	add	r0, r0
     532:	99 0b       	sbc	r25, r25
     534:	28 2b       	or	r18, r24
     536:	39 2b       	or	r19, r25
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	fc 01       	movw	r30, r24
     53e:	31 83       	std	Z+1, r19	; 0x01
     540:	20 83       	st	Z, r18
	I2C_stop();
     542:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
}
     546:	00 00       	nop
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	08 95       	ret

00000558 <mpu6050_read_gyro_y>:

void mpu6050_read_gyro_y(int16_t *gy)
{
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <mpu6050_read_gyro_y+0x8>
     560:	00 d0       	rcall	.+0      	; 0x562 <mpu6050_read_gyro_y+0xa>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	9c 83       	std	Y+4, r25	; 0x04
     568:	8b 83       	std	Y+3, r24	; 0x03
	int8_t gyro_yh;
	int8_t gyro_yl;
	
	//Read from upper GYRO_Y register
	I2C_start();
     56a:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     56e:	80 ed       	ldi	r24, 0xD0	; 208
     570:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(GYRO_YOUT_H);
     574:	85 e4       	ldi	r24, 0x45	; 69
     576:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     57a:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     57e:	81 ed       	ldi	r24, 0xD1	; 209
     580:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	gyro_yh = ((int8_t)I2C_read_ACK()<< 8 | I2C_read_NACK());
     584:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     588:	08 2e       	mov	r0, r24
     58a:	00 0c       	add	r0, r0
     58c:	99 0b       	sbc	r25, r25
     58e:	98 2f       	mov	r25, r24
     590:	88 27       	eor	r24, r24
     592:	18 2f       	mov	r17, r24
     594:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     598:	81 2b       	or	r24, r17
     59a:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
     59c:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	//Read from lower GYRO_Y register
	I2C_start();
     5a0:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     5a4:	80 ed       	ldi	r24, 0xD0	; 208
     5a6:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(GYRO_YOUT_L);
     5aa:	86 e4       	ldi	r24, 0x46	; 70
     5ac:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     5b0:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     5b4:	81 ed       	ldi	r24, 0xD1	; 209
     5b6:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	gyro_yl = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     5ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     5be:	08 2e       	mov	r0, r24
     5c0:	00 0c       	add	r0, r0
     5c2:	99 0b       	sbc	r25, r25
     5c4:	98 2f       	mov	r25, r24
     5c6:	88 27       	eor	r24, r24
     5c8:	18 2f       	mov	r17, r24
     5ca:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     5ce:	81 2b       	or	r24, r17
     5d0:	8a 83       	std	Y+2, r24	; 0x02
	I2C_stop();
     5d2:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	*gy = (gyro_yh << 8) | gyro_yl;
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	08 2e       	mov	r0, r24
     5da:	00 0c       	add	r0, r0
     5dc:	99 0b       	sbc	r25, r25
     5de:	38 2f       	mov	r19, r24
     5e0:	22 27       	eor	r18, r18
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	08 2e       	mov	r0, r24
     5e6:	00 0c       	add	r0, r0
     5e8:	99 0b       	sbc	r25, r25
     5ea:	28 2b       	or	r18, r24
     5ec:	39 2b       	or	r19, r25
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	fc 01       	movw	r30, r24
     5f4:	31 83       	std	Z+1, r19	; 0x01
     5f6:	20 83       	st	Z, r18
}
     5f8:	00 00       	nop
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	08 95       	ret

0000060a <mpu6050_read_accel_x>:

void mpu6050_read_accel_x(int16_t *ax)
{
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	00 d0       	rcall	.+0      	; 0x612 <mpu6050_read_accel_x+0x8>
     612:	00 d0       	rcall	.+0      	; 0x614 <mpu6050_read_accel_x+0xa>
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	9c 83       	std	Y+4, r25	; 0x04
     61a:	8b 83       	std	Y+3, r24	; 0x03
	int8_t accel_xh;
	int8_t accel_xl;
	
	//Read from upper ACCEL_X register
	I2C_start();
     61c:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     620:	80 ed       	ldi	r24, 0xD0	; 208
     622:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(ACCEL_XOUT_H);
     626:	8b e3       	ldi	r24, 0x3B	; 59
     628:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     62c:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     630:	81 ed       	ldi	r24, 0xD1	; 209
     632:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	accel_xh = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     636:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     63a:	08 2e       	mov	r0, r24
     63c:	00 0c       	add	r0, r0
     63e:	99 0b       	sbc	r25, r25
     640:	98 2f       	mov	r25, r24
     642:	88 27       	eor	r24, r24
     644:	18 2f       	mov	r17, r24
     646:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     64a:	81 2b       	or	r24, r17
     64c:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
     64e:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	//Read from lower ACCEL_X register
	I2C_start();
     652:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     656:	80 ed       	ldi	r24, 0xD0	; 208
     658:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(ACCEL_XOUT_L);
     65c:	8c e3       	ldi	r24, 0x3C	; 60
     65e:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     662:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     666:	81 ed       	ldi	r24, 0xD1	; 209
     668:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	accel_xl = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     66c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     670:	08 2e       	mov	r0, r24
     672:	00 0c       	add	r0, r0
     674:	99 0b       	sbc	r25, r25
     676:	98 2f       	mov	r25, r24
     678:	88 27       	eor	r24, r24
     67a:	18 2f       	mov	r17, r24
     67c:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     680:	81 2b       	or	r24, r17
     682:	8a 83       	std	Y+2, r24	; 0x02
	I2C_stop();
     684:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	*ax = (accel_xh << 8) | accel_xl;
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	08 2e       	mov	r0, r24
     68c:	00 0c       	add	r0, r0
     68e:	99 0b       	sbc	r25, r25
     690:	38 2f       	mov	r19, r24
     692:	22 27       	eor	r18, r18
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	08 2e       	mov	r0, r24
     698:	00 0c       	add	r0, r0
     69a:	99 0b       	sbc	r25, r25
     69c:	28 2b       	or	r18, r24
     69e:	39 2b       	or	r19, r25
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	fc 01       	movw	r30, r24
     6a6:	31 83       	std	Z+1, r19	; 0x01
     6a8:	20 83       	st	Z, r18
}
     6aa:	00 00       	nop
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <mpu6050_read_accel_y>:

void mpu6050_read_accel_y(int16_t *ay)
{
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <mpu6050_read_accel_y+0x8>
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <mpu6050_read_accel_y+0xa>
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	9c 83       	std	Y+4, r25	; 0x04
     6cc:	8b 83       	std	Y+3, r24	; 0x03
	int8_t accel_yh;
	int8_t accel_yl;
	
	//Read from upper ACCEL_Y register
	I2C_start();
     6ce:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     6d2:	80 ed       	ldi	r24, 0xD0	; 208
     6d4:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(ACCEL_YOUT_H);
     6d8:	8d e3       	ldi	r24, 0x3D	; 61
     6da:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     6de:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     6e2:	81 ed       	ldi	r24, 0xD1	; 209
     6e4:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	accel_yh = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     6e8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     6ec:	08 2e       	mov	r0, r24
     6ee:	00 0c       	add	r0, r0
     6f0:	99 0b       	sbc	r25, r25
     6f2:	98 2f       	mov	r25, r24
     6f4:	88 27       	eor	r24, r24
     6f6:	18 2f       	mov	r17, r24
     6f8:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     6fc:	81 2b       	or	r24, r17
     6fe:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
     700:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	//Read from lower ACCEL_Y register
	I2C_start();
     704:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);
     708:	80 ed       	ldi	r24, 0xD0	; 208
     70a:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_write(ACCEL_YOUT_L);
     70e:	8e e3       	ldi	r24, 0x3E	; 62
     710:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	I2C_start();
     714:	0e 94 a9 01 	call	0x352	; 0x352 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1);
     718:	81 ed       	ldi	r24, 0xD1	; 209
     71a:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_write>
	accel_yl = ((int8_t)I2C_read_ACK() << 8 | I2C_read_NACK());
     71e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <I2C_read_ACK>
     722:	08 2e       	mov	r0, r24
     724:	00 0c       	add	r0, r0
     726:	99 0b       	sbc	r25, r25
     728:	98 2f       	mov	r25, r24
     72a:	88 27       	eor	r24, r24
     72c:	18 2f       	mov	r17, r24
     72e:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_read_NACK>
     732:	81 2b       	or	r24, r17
     734:	8a 83       	std	Y+2, r24	; 0x02
	I2C_stop();
     736:	0e 94 26 02 	call	0x44c	; 0x44c <I2C_stop>
	
	*ay = (accel_yh << 8) | accel_yl;
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	08 2e       	mov	r0, r24
     73e:	00 0c       	add	r0, r0
     740:	99 0b       	sbc	r25, r25
     742:	38 2f       	mov	r19, r24
     744:	22 27       	eor	r18, r18
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	08 2e       	mov	r0, r24
     74a:	00 0c       	add	r0, r0
     74c:	99 0b       	sbc	r25, r25
     74e:	28 2b       	or	r18, r24
     750:	39 2b       	or	r19, r25
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	fc 01       	movw	r30, r24
     758:	31 83       	std	Z+1, r19	; 0x01
     75a:	20 83       	st	Z, r18
}
     75c:	00 00       	nop
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	64 97       	sbiw	r28, 0x14	; 20
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	9c 8b       	std	Y+20, r25	; 0x14
     784:	8b 8b       	std	Y+19, r24	; 0x13
	int nDigits = log10(data)+1;
     786:	8b 89       	ldd	r24, Y+19	; 0x13
     788:	9c 89       	ldd	r25, Y+20	; 0x14
     78a:	cc 01       	movw	r24, r24
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	bc 01       	movw	r22, r24
     792:	cd 01       	movw	r24, r26
     794:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	bc 01       	movw	r22, r24
     79e:	cd 01       	movw	r24, r26
     7a0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <log10>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e8       	ldi	r20, 0x80	; 128
     7ae:	5f e3       	ldi	r21, 0x3F	; 63
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	bc 01       	movw	r22, r24
     7be:	cd 01       	movw	r24, r26
     7c0:	0e 94 50 06 	call	0xca0	; 0xca0 <__fixsfsi>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	9e 83       	std	Y+6, r25	; 0x06
     7ca:	8d 83       	std	Y+5, r24	; 0x05
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
     7d0:	9a 83       	std	Y+2, r25	; 0x02
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	3c c0       	rjmp	.+120    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
	{
		numParser = data % 10;
     7d6:	4b 89       	ldd	r20, Y+19	; 0x13
     7d8:	5c 89       	ldd	r21, Y+20	; 0x14
     7da:	9a 01       	movw	r18, r20
     7dc:	ad ec       	ldi	r26, 0xCD	; 205
     7de:	bc ec       	ldi	r27, 0xCC	; 204
     7e0:	0e 94 37 08 	call	0x106e	; 0x106e <__umulhisi3>
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	96 95       	lsr	r25
     7ea:	87 95       	ror	r24
     7ec:	96 95       	lsr	r25
     7ee:	87 95       	ror	r24
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	9c 01       	movw	r18, r24
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	9a 01       	movw	r18, r20
     804:	28 1b       	sub	r18, r24
     806:	39 0b       	sbc	r19, r25
     808:	c9 01       	movw	r24, r18
     80a:	98 87       	std	Y+8, r25	; 0x08
     80c:	8f 83       	std	Y+7, r24	; 0x07
		data = data / 10;
     80e:	8b 89       	ldd	r24, Y+19	; 0x13
     810:	9c 89       	ldd	r25, Y+20	; 0x14
     812:	9c 01       	movw	r18, r24
     814:	ad ec       	ldi	r26, 0xCD	; 205
     816:	bc ec       	ldi	r27, 0xCC	; 204
     818:	0e 94 37 08 	call	0x106e	; 0x106e <__umulhisi3>
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	9c 8b       	std	Y+20, r25	; 0x14
     82a:	8b 8b       	std	Y+19, r24	; 0x13
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
     82c:	8f 81       	ldd	r24, Y+7	; 0x07
     82e:	40 e3       	ldi	r20, 0x30	; 48
     830:	48 0f       	add	r20, r24
     832:	9e 01       	movw	r18, r28
     834:	27 5f       	subi	r18, 0xF7	; 247
     836:	3f 4f       	sbci	r19, 0xFF	; 255
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	82 0f       	add	r24, r18
     83e:	93 1f       	adc	r25, r19
     840:	fc 01       	movw	r30, r24
     842:	40 83       	st	Z, r20
	int nDigits = log10(data)+1;
	int numParser;
	char transmit_buffer[10];
	
	//Break data into 'digits' and store each digit as it's ASCII equivalent value
	for (int i = nDigits; i > 0; i--)
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	9a 83       	std	Y+2, r25	; 0x02
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	18 16       	cp	r1, r24
     854:	19 06       	cpc	r1, r25
     856:	0c f4       	brge	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	be cf       	rjmp	.-132    	; 0x7d6 <USART_int_transmit+0x68>
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	8b 83       	std	Y+3, r24	; 0x03
     862:	1d c0       	rjmp	.+58     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
     864:	00 00       	nop
     866:	80 ec       	ldi	r24, 0xC0	; 192
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	80 72       	andi	r24, 0x20	; 32
     874:	99 27       	eor	r25, r25
     876:	89 2b       	or	r24, r25
     878:	b1 f3       	breq	.-20     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
		UDR0 = transmit_buffer[i];
     87a:	86 ec       	ldi	r24, 0xC6	; 198
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	ae 01       	movw	r20, r28
     880:	47 5f       	subi	r20, 0xF7	; 247
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	2b 81       	ldd	r18, Y+3	; 0x03
     886:	3c 81       	ldd	r19, Y+4	; 0x04
     888:	24 0f       	add	r18, r20
     88a:	35 1f       	adc	r19, r21
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
		data = data / 10;
		transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
	}
	
	//Transmit data
	for (int i = 1; i < nDigits+1; i++)
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	8b 83       	std	Y+3, r24	; 0x03
     89e:	8d 81       	ldd	r24, Y+5	; 0x05
     8a0:	9e 81       	ldd	r25, Y+6	; 0x06
     8a2:	9c 01       	movw	r18, r24
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	82 17       	cp	r24, r18
     8ae:	93 07       	cpc	r25, r19
     8b0:	cc f2       	brlt	.-78     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	{
		while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
		UDR0 = transmit_buffer[i];
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
     8b2:	00 00       	nop
     8b4:	80 ec       	ldi	r24, 0xC0	; 192
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	80 72       	andi	r24, 0x20	; 32
     8c2:	99 27       	eor	r25, r25
     8c4:	89 2b       	or	r24, r25
     8c6:	b1 f3       	breq	.-20     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
	UDR0 = 0x0A;	//New Line
     8c8:	86 ec       	ldi	r24, 0xC6	; 198
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2a e0       	ldi	r18, 0x0A	; 10
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
}
     8d2:	00 00       	nop
     8d4:	64 96       	adiw	r28, 0x14	; 20
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <USART_char_transmit>:

void USART_char_transmit(const char *buffer)
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <USART_char_transmit+0x6>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
	while(*buffer)
     8f4:	18 c0       	rjmp	.+48     	; 0x926 <__stack+0x27>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
     8f6:	00 00       	nop
     8f8:	80 ec       	ldi	r24, 0xC0	; 192
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	80 72       	andi	r24, 0x20	; 32
     906:	99 27       	eor	r25, r25
     908:	89 2b       	or	r24, r25
     90a:	b1 f3       	breq	.-20     	; 0x8f8 <USART_char_transmit+0x12>
		UDR0 = *buffer; //set UDR0 to character
     90c:	86 ec       	ldi	r24, 0xC6	; 198
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	29 81       	ldd	r18, Y+1	; 0x01
     912:	3a 81       	ldd	r19, Y+2	; 0x02
     914:	f9 01       	movw	r30, r18
     916:	20 81       	ld	r18, Z
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
		buffer++;
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = 0x0A;	//New Line
}

void USART_char_transmit(const char *buffer)
{
	while(*buffer)
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	88 23       	and	r24, r24
     930:	11 f7       	brne	.-60     	; 0x8f6 <USART_char_transmit+0x10>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = *buffer; //set UDR0 to character
		buffer++;
	}
	while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
     932:	00 00       	nop
     934:	80 ec       	ldi	r24, 0xC0	; 192
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	80 72       	andi	r24, 0x20	; 32
     942:	99 27       	eor	r25, r25
     944:	89 2b       	or	r24, r25
     946:	b1 f3       	breq	.-20     	; 0x934 <__stack+0x35>
	UDR0 = 0x0A;
     948:	86 ec       	ldi	r24, 0xC6	; 198
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2a e0       	ldi	r18, 0x0A	; 10
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
}
     952:	00 00       	nop
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <USART_float_transmit>:

void USART_float_transmit(float input, int decimals)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	6a 97       	sbiw	r28, 0x1a	; 26
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	6d 8b       	std	Y+21, r22	; 0x15
     974:	7e 8b       	std	Y+22, r23	; 0x16
     976:	8f 8b       	std	Y+23, r24	; 0x17
     978:	98 8f       	std	Y+24, r25	; 0x18
     97a:	5a 8f       	std	Y+26, r21	; 0x1a
     97c:	49 8f       	std	Y+25, r20	; 0x19
	int digit;
	char buffer[10];
	int integer = (int)input;
     97e:	6d 89       	ldd	r22, Y+21	; 0x15
     980:	7e 89       	ldd	r23, Y+22	; 0x16
     982:	8f 89       	ldd	r24, Y+23	; 0x17
     984:	98 8d       	ldd	r25, Y+24	; 0x18
     986:	0e 94 50 06 	call	0xca0	; 0xca0 <__fixsfsi>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	98 87       	std	Y+8, r25	; 0x08
     990:	8f 83       	std	Y+7, r24	; 0x07
	float fraction = input - integer;
     992:	8f 81       	ldd	r24, Y+7	; 0x07
     994:	98 85       	ldd	r25, Y+8	; 0x08
     996:	09 2e       	mov	r0, r25
     998:	00 0c       	add	r0, r0
     99a:	aa 0b       	sbc	r26, r26
     99c:	bb 0b       	sbc	r27, r27
     99e:	bc 01       	movw	r22, r24
     9a0:	cd 01       	movw	r24, r26
     9a2:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	9c 01       	movw	r18, r24
     9ac:	ad 01       	movw	r20, r26
     9ae:	6d 89       	ldd	r22, Y+21	; 0x15
     9b0:	7e 89       	ldd	r23, Y+22	; 0x16
     9b2:	8f 89       	ldd	r24, Y+23	; 0x17
     9b4:	98 8d       	ldd	r25, Y+24	; 0x18
     9b6:	0e 94 6c 05 	call	0xad8	; 0xad8 <__subsf3>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	ab 83       	std	Y+3, r26	; 0x03
     9c4:	bc 83       	std	Y+4, r27	; 0x04
	sprintf(buffer, "%d.", integer);
     9c6:	88 85       	ldd	r24, Y+8	; 0x08
     9c8:	8f 93       	push	r24
     9ca:	8f 81       	ldd	r24, Y+7	; 0x07
     9cc:	8f 93       	push	r24
     9ce:	86 e2       	ldi	r24, 0x26	; 38
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	89 2f       	mov	r24, r25
     9d4:	8f 93       	push	r24
     9d6:	86 e2       	ldi	r24, 0x26	; 38
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	8f 93       	push	r24
     9dc:	ce 01       	movw	r24, r28
     9de:	0b 96       	adiw	r24, 0x0b	; 11
     9e0:	29 2f       	mov	r18, r25
     9e2:	2f 93       	push	r18
     9e4:	8f 93       	push	r24
     9e6:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
	
	for(int i = 0; i < decimals; i++)
     9f6:	1e 82       	std	Y+6, r1	; 0x06
     9f8:	1d 82       	std	Y+5, r1	; 0x05
     9fa:	58 c0       	rjmp	.+176    	; 0xaac <USART_float_transmit+0x14e>
	{
		fraction *= 10;
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	69 81       	ldd	r22, Y+1	; 0x01
     a06:	7a 81       	ldd	r23, Y+2	; 0x02
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	0e 94 95 07 	call	0xf2a	; 0xf2a <__mulsf3>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	ab 83       	std	Y+3, r26	; 0x03
     a1a:	bc 83       	std	Y+4, r27	; 0x04
		int digit = (int)fraction;
     a1c:	69 81       	ldd	r22, Y+1	; 0x01
     a1e:	7a 81       	ldd	r23, Y+2	; 0x02
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	0e 94 50 06 	call	0xca0	; 0xca0 <__fixsfsi>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	9a 87       	std	Y+10, r25	; 0x0a
     a2e:	89 87       	std	Y+9, r24	; 0x09
		sprintf(buffer +strlen(buffer), "%d", digit);
     a30:	ce 01       	movw	r24, r28
     a32:	0b 96       	adiw	r24, 0x0b	; 11
     a34:	0e 94 46 08 	call	0x108c	; 0x108c <strlen>
     a38:	9c 01       	movw	r18, r24
     a3a:	ce 01       	movw	r24, r28
     a3c:	0b 96       	adiw	r24, 0x0b	; 11
     a3e:	82 0f       	add	r24, r18
     a40:	93 1f       	adc	r25, r19
     a42:	2a 85       	ldd	r18, Y+10	; 0x0a
     a44:	2f 93       	push	r18
     a46:	29 85       	ldd	r18, Y+9	; 0x09
     a48:	2f 93       	push	r18
     a4a:	2a e2       	ldi	r18, 0x2A	; 42
     a4c:	31 e0       	ldi	r19, 0x01	; 1
     a4e:	23 2f       	mov	r18, r19
     a50:	2f 93       	push	r18
     a52:	2a e2       	ldi	r18, 0x2A	; 42
     a54:	31 e0       	ldi	r19, 0x01	; 1
     a56:	2f 93       	push	r18
     a58:	29 2f       	mov	r18, r25
     a5a:	2f 93       	push	r18
     a5c:	8f 93       	push	r24
     a5e:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
		fraction -= digit;
     a6e:	89 85       	ldd	r24, Y+9	; 0x09
     a70:	9a 85       	ldd	r25, Y+10	; 0x0a
     a72:	09 2e       	mov	r0, r25
     a74:	00 0c       	add	r0, r0
     a76:	aa 0b       	sbc	r26, r26
     a78:	bb 0b       	sbc	r27, r27
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	9c 01       	movw	r18, r24
     a88:	ad 01       	movw	r20, r26
     a8a:	69 81       	ldd	r22, Y+1	; 0x01
     a8c:	7a 81       	ldd	r23, Y+2	; 0x02
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	0e 94 6c 05 	call	0xad8	; 0xad8 <__subsf3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	ab 83       	std	Y+3, r26	; 0x03
     aa0:	bc 83       	std	Y+4, r27	; 0x04
	char buffer[10];
	int integer = (int)input;
	float fraction = input - integer;
	sprintf(buffer, "%d.", integer);
	
	for(int i = 0; i < decimals; i++)
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
     aa4:	9e 81       	ldd	r25, Y+6	; 0x06
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	9e 83       	std	Y+6, r25	; 0x06
     aaa:	8d 83       	std	Y+5, r24	; 0x05
     aac:	2d 81       	ldd	r18, Y+5	; 0x05
     aae:	3e 81       	ldd	r19, Y+6	; 0x06
     ab0:	89 8d       	ldd	r24, Y+25	; 0x19
     ab2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	0c f4       	brge	.+2      	; 0xabc <USART_float_transmit+0x15e>
     aba:	a0 cf       	rjmp	.-192    	; 0x9fc <USART_float_transmit+0x9e>
		int digit = (int)fraction;
		sprintf(buffer +strlen(buffer), "%d", digit);
		fraction -= digit;
	}
	
	USART_char_transmit(buffer);
     abc:	ce 01       	movw	r24, r28
     abe:	0b 96       	adiw	r24, 0x0b	; 11
     ac0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <USART_char_transmit>
}
     ac4:	00 00       	nop
     ac6:	6a 96       	adiw	r28, 0x1a	; 26
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <__subsf3>:
     ad8:	50 58       	subi	r21, 0x80	; 128

00000ada <__addsf3>:
     ada:	bb 27       	eor	r27, r27
     adc:	aa 27       	eor	r26, r26
     ade:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
     ae2:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_round>
     ae6:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_pscA>
     aea:	38 f0       	brcs	.+14     	; 0xafa <__addsf3+0x20>
     aec:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_pscB>
     af0:	20 f0       	brcs	.+8      	; 0xafa <__addsf3+0x20>
     af2:	39 f4       	brne	.+14     	; 0xb02 <__addsf3+0x28>
     af4:	9f 3f       	cpi	r25, 0xFF	; 255
     af6:	19 f4       	brne	.+6      	; 0xafe <__addsf3+0x24>
     af8:	26 f4       	brtc	.+8      	; 0xb02 <__addsf3+0x28>
     afa:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_nan>
     afe:	0e f4       	brtc	.+2      	; 0xb02 <__addsf3+0x28>
     b00:	e0 95       	com	r30
     b02:	e7 fb       	bst	r30, 7
     b04:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>

00000b08 <__addsf3x>:
     b08:	e9 2f       	mov	r30, r25
     b0a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_split3>
     b0e:	58 f3       	brcs	.-42     	; 0xae6 <__addsf3+0xc>
     b10:	ba 17       	cp	r27, r26
     b12:	62 07       	cpc	r22, r18
     b14:	73 07       	cpc	r23, r19
     b16:	84 07       	cpc	r24, r20
     b18:	95 07       	cpc	r25, r21
     b1a:	20 f0       	brcs	.+8      	; 0xb24 <__addsf3x+0x1c>
     b1c:	79 f4       	brne	.+30     	; 0xb3c <__addsf3x+0x34>
     b1e:	a6 f5       	brtc	.+104    	; 0xb88 <__addsf3x+0x80>
     b20:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_zero>
     b24:	0e f4       	brtc	.+2      	; 0xb28 <__addsf3x+0x20>
     b26:	e0 95       	com	r30
     b28:	0b 2e       	mov	r0, r27
     b2a:	ba 2f       	mov	r27, r26
     b2c:	a0 2d       	mov	r26, r0
     b2e:	0b 01       	movw	r0, r22
     b30:	b9 01       	movw	r22, r18
     b32:	90 01       	movw	r18, r0
     b34:	0c 01       	movw	r0, r24
     b36:	ca 01       	movw	r24, r20
     b38:	a0 01       	movw	r20, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	ff 27       	eor	r31, r31
     b3e:	59 1b       	sub	r21, r25
     b40:	99 f0       	breq	.+38     	; 0xb68 <__addsf3x+0x60>
     b42:	59 3f       	cpi	r21, 0xF9	; 249
     b44:	50 f4       	brcc	.+20     	; 0xb5a <__addsf3x+0x52>
     b46:	50 3e       	cpi	r21, 0xE0	; 224
     b48:	68 f1       	brcs	.+90     	; 0xba4 <__addsf3x+0x9c>
     b4a:	1a 16       	cp	r1, r26
     b4c:	f0 40       	sbci	r31, 0x00	; 0
     b4e:	a2 2f       	mov	r26, r18
     b50:	23 2f       	mov	r18, r19
     b52:	34 2f       	mov	r19, r20
     b54:	44 27       	eor	r20, r20
     b56:	58 5f       	subi	r21, 0xF8	; 248
     b58:	f3 cf       	rjmp	.-26     	; 0xb40 <__addsf3x+0x38>
     b5a:	46 95       	lsr	r20
     b5c:	37 95       	ror	r19
     b5e:	27 95       	ror	r18
     b60:	a7 95       	ror	r26
     b62:	f0 40       	sbci	r31, 0x00	; 0
     b64:	53 95       	inc	r21
     b66:	c9 f7       	brne	.-14     	; 0xb5a <__addsf3x+0x52>
     b68:	7e f4       	brtc	.+30     	; 0xb88 <__addsf3x+0x80>
     b6a:	1f 16       	cp	r1, r31
     b6c:	ba 0b       	sbc	r27, r26
     b6e:	62 0b       	sbc	r22, r18
     b70:	73 0b       	sbc	r23, r19
     b72:	84 0b       	sbc	r24, r20
     b74:	ba f0       	brmi	.+46     	; 0xba4 <__addsf3x+0x9c>
     b76:	91 50       	subi	r25, 0x01	; 1
     b78:	a1 f0       	breq	.+40     	; 0xba2 <__addsf3x+0x9a>
     b7a:	ff 0f       	add	r31, r31
     b7c:	bb 1f       	adc	r27, r27
     b7e:	66 1f       	adc	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	88 1f       	adc	r24, r24
     b84:	c2 f7       	brpl	.-16     	; 0xb76 <__addsf3x+0x6e>
     b86:	0e c0       	rjmp	.+28     	; 0xba4 <__addsf3x+0x9c>
     b88:	ba 0f       	add	r27, r26
     b8a:	62 1f       	adc	r22, r18
     b8c:	73 1f       	adc	r23, r19
     b8e:	84 1f       	adc	r24, r20
     b90:	48 f4       	brcc	.+18     	; 0xba4 <__addsf3x+0x9c>
     b92:	87 95       	ror	r24
     b94:	77 95       	ror	r23
     b96:	67 95       	ror	r22
     b98:	b7 95       	ror	r27
     b9a:	f7 95       	ror	r31
     b9c:	9e 3f       	cpi	r25, 0xFE	; 254
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <__addsf3x+0x9a>
     ba0:	b0 cf       	rjmp	.-160    	; 0xb02 <__addsf3+0x28>
     ba2:	93 95       	inc	r25
     ba4:	88 0f       	add	r24, r24
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <__addsf3x+0xa2>
     ba8:	99 27       	eor	r25, r25
     baa:	ee 0f       	add	r30, r30
     bac:	97 95       	ror	r25
     bae:	87 95       	ror	r24
     bb0:	08 95       	ret

00000bb2 <__cmpsf2>:
     bb2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fp_cmp>
     bb6:	08 f4       	brcc	.+2      	; 0xbba <__cmpsf2+0x8>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret

00000bbc <__divsf3>:
     bbc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__divsf3x>
     bc0:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_round>
     bc4:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_pscB>
     bc8:	58 f0       	brcs	.+22     	; 0xbe0 <__divsf3+0x24>
     bca:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_pscA>
     bce:	40 f0       	brcs	.+16     	; 0xbe0 <__divsf3+0x24>
     bd0:	29 f4       	brne	.+10     	; 0xbdc <__divsf3+0x20>
     bd2:	5f 3f       	cpi	r21, 0xFF	; 255
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <__divsf3+0x24>
     bd6:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>
     bda:	51 11       	cpse	r21, r1
     bdc:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_szero>
     be0:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_nan>

00000be4 <__divsf3x>:
     be4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_split3>
     be8:	68 f3       	brcs	.-38     	; 0xbc4 <__divsf3+0x8>

00000bea <__divsf3_pse>:
     bea:	99 23       	and	r25, r25
     bec:	b1 f3       	breq	.-20     	; 0xbda <__divsf3+0x1e>
     bee:	55 23       	and	r21, r21
     bf0:	91 f3       	breq	.-28     	; 0xbd6 <__divsf3+0x1a>
     bf2:	95 1b       	sub	r25, r21
     bf4:	55 0b       	sbc	r21, r21
     bf6:	bb 27       	eor	r27, r27
     bf8:	aa 27       	eor	r26, r26
     bfa:	62 17       	cp	r22, r18
     bfc:	73 07       	cpc	r23, r19
     bfe:	84 07       	cpc	r24, r20
     c00:	38 f0       	brcs	.+14     	; 0xc10 <__divsf3_pse+0x26>
     c02:	9f 5f       	subi	r25, 0xFF	; 255
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	44 1f       	adc	r20, r20
     c0c:	aa 1f       	adc	r26, r26
     c0e:	a9 f3       	breq	.-22     	; 0xbfa <__divsf3_pse+0x10>
     c10:	35 d0       	rcall	.+106    	; 0xc7c <__divsf3_pse+0x92>
     c12:	0e 2e       	mov	r0, r30
     c14:	3a f0       	brmi	.+14     	; 0xc24 <__divsf3_pse+0x3a>
     c16:	e0 e8       	ldi	r30, 0x80	; 128
     c18:	32 d0       	rcall	.+100    	; 0xc7e <__divsf3_pse+0x94>
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	50 40       	sbci	r21, 0x00	; 0
     c1e:	e6 95       	lsr	r30
     c20:	00 1c       	adc	r0, r0
     c22:	ca f7       	brpl	.-14     	; 0xc16 <__divsf3_pse+0x2c>
     c24:	2b d0       	rcall	.+86     	; 0xc7c <__divsf3_pse+0x92>
     c26:	fe 2f       	mov	r31, r30
     c28:	29 d0       	rcall	.+82     	; 0xc7c <__divsf3_pse+0x92>
     c2a:	66 0f       	add	r22, r22
     c2c:	77 1f       	adc	r23, r23
     c2e:	88 1f       	adc	r24, r24
     c30:	bb 1f       	adc	r27, r27
     c32:	26 17       	cp	r18, r22
     c34:	37 07       	cpc	r19, r23
     c36:	48 07       	cpc	r20, r24
     c38:	ab 07       	cpc	r26, r27
     c3a:	b0 e8       	ldi	r27, 0x80	; 128
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__divsf3_pse+0x56>
     c3e:	bb 0b       	sbc	r27, r27
     c40:	80 2d       	mov	r24, r0
     c42:	bf 01       	movw	r22, r30
     c44:	ff 27       	eor	r31, r31
     c46:	93 58       	subi	r25, 0x83	; 131
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	3a f0       	brmi	.+14     	; 0xc5a <__divsf3_pse+0x70>
     c4c:	9e 3f       	cpi	r25, 0xFE	; 254
     c4e:	51 05       	cpc	r21, r1
     c50:	78 f0       	brcs	.+30     	; 0xc70 <__divsf3_pse+0x86>
     c52:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>
     c56:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_szero>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	e4 f3       	brlt	.-8      	; 0xc56 <__divsf3_pse+0x6c>
     c5e:	98 3e       	cpi	r25, 0xE8	; 232
     c60:	d4 f3       	brlt	.-12     	; 0xc56 <__divsf3_pse+0x6c>
     c62:	86 95       	lsr	r24
     c64:	77 95       	ror	r23
     c66:	67 95       	ror	r22
     c68:	b7 95       	ror	r27
     c6a:	f7 95       	ror	r31
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	c9 f7       	brne	.-14     	; 0xc62 <__divsf3_pse+0x78>
     c70:	88 0f       	add	r24, r24
     c72:	91 1d       	adc	r25, r1
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret
     c7c:	e1 e0       	ldi	r30, 0x01	; 1
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	bb 1f       	adc	r27, r27
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	ba 07       	cpc	r27, r26
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <__divsf3_pse+0xae>
     c90:	62 1b       	sub	r22, r18
     c92:	73 0b       	sbc	r23, r19
     c94:	84 0b       	sbc	r24, r20
     c96:	ba 0b       	sbc	r27, r26
     c98:	ee 1f       	adc	r30, r30
     c9a:	88 f7       	brcc	.-30     	; 0xc7e <__divsf3_pse+0x94>
     c9c:	e0 95       	com	r30
     c9e:	08 95       	ret

00000ca0 <__fixsfsi>:
     ca0:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     ca4:	68 94       	set
     ca6:	b1 11       	cpse	r27, r1
     ca8:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_szero>
     cac:	08 95       	ret

00000cae <__fixunssfsi>:
     cae:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_splitA>
     cb2:	88 f0       	brcs	.+34     	; 0xcd6 <__fixunssfsi+0x28>
     cb4:	9f 57       	subi	r25, 0x7F	; 127
     cb6:	98 f0       	brcs	.+38     	; 0xcde <__fixunssfsi+0x30>
     cb8:	b9 2f       	mov	r27, r25
     cba:	99 27       	eor	r25, r25
     cbc:	b7 51       	subi	r27, 0x17	; 23
     cbe:	b0 f0       	brcs	.+44     	; 0xcec <__fixunssfsi+0x3e>
     cc0:	e1 f0       	breq	.+56     	; 0xcfa <__fixunssfsi+0x4c>
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	1a f0       	brmi	.+6      	; 0xcd2 <__fixunssfsi+0x24>
     ccc:	ba 95       	dec	r27
     cce:	c9 f7       	brne	.-14     	; 0xcc2 <__fixunssfsi+0x14>
     cd0:	14 c0       	rjmp	.+40     	; 0xcfa <__fixunssfsi+0x4c>
     cd2:	b1 30       	cpi	r27, 0x01	; 1
     cd4:	91 f0       	breq	.+36     	; 0xcfa <__fixunssfsi+0x4c>
     cd6:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_zero>
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	08 95       	ret
     cde:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_zero>
     ce2:	67 2f       	mov	r22, r23
     ce4:	78 2f       	mov	r23, r24
     ce6:	88 27       	eor	r24, r24
     ce8:	b8 5f       	subi	r27, 0xF8	; 248
     cea:	39 f0       	breq	.+14     	; 0xcfa <__fixunssfsi+0x4c>
     cec:	b9 3f       	cpi	r27, 0xF9	; 249
     cee:	cc f3       	brlt	.-14     	; 0xce2 <__fixunssfsi+0x34>
     cf0:	86 95       	lsr	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b3 95       	inc	r27
     cf8:	d9 f7       	brne	.-10     	; 0xcf0 <__fixunssfsi+0x42>
     cfa:	3e f4       	brtc	.+14     	; 0xd0a <__fixunssfsi+0x5c>
     cfc:	90 95       	com	r25
     cfe:	80 95       	com	r24
     d00:	70 95       	com	r23
     d02:	61 95       	neg	r22
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	8f 4f       	sbci	r24, 0xFF	; 255
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	08 95       	ret

00000d0c <__floatunsisf>:
     d0c:	e8 94       	clt
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <__floatsisf+0x12>

00000d10 <__floatsisf>:
     d10:	97 fb       	bst	r25, 7
     d12:	3e f4       	brtc	.+14     	; 0xd22 <__floatsisf+0x12>
     d14:	90 95       	com	r25
     d16:	80 95       	com	r24
     d18:	70 95       	com	r23
     d1a:	61 95       	neg	r22
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8f 4f       	sbci	r24, 0xFF	; 255
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	99 23       	and	r25, r25
     d24:	a9 f0       	breq	.+42     	; 0xd50 <__floatsisf+0x40>
     d26:	f9 2f       	mov	r31, r25
     d28:	96 e9       	ldi	r25, 0x96	; 150
     d2a:	bb 27       	eor	r27, r27
     d2c:	93 95       	inc	r25
     d2e:	f6 95       	lsr	r31
     d30:	87 95       	ror	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f1 11       	cpse	r31, r1
     d3a:	f8 cf       	rjmp	.-16     	; 0xd2c <__floatsisf+0x1c>
     d3c:	fa f4       	brpl	.+62     	; 0xd7c <__floatsisf+0x6c>
     d3e:	bb 0f       	add	r27, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <__floatsisf+0x36>
     d42:	60 ff       	sbrs	r22, 0
     d44:	1b c0       	rjmp	.+54     	; 0xd7c <__floatsisf+0x6c>
     d46:	6f 5f       	subi	r22, 0xFF	; 255
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	8f 4f       	sbci	r24, 0xFF	; 255
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <__floatsisf+0x6c>
     d50:	88 23       	and	r24, r24
     d52:	11 f0       	breq	.+4      	; 0xd58 <__floatsisf+0x48>
     d54:	96 e9       	ldi	r25, 0x96	; 150
     d56:	11 c0       	rjmp	.+34     	; 0xd7a <__floatsisf+0x6a>
     d58:	77 23       	and	r23, r23
     d5a:	21 f0       	breq	.+8      	; 0xd64 <__floatsisf+0x54>
     d5c:	9e e8       	ldi	r25, 0x8E	; 142
     d5e:	87 2f       	mov	r24, r23
     d60:	76 2f       	mov	r23, r22
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <__floatsisf+0x5e>
     d64:	66 23       	and	r22, r22
     d66:	71 f0       	breq	.+28     	; 0xd84 <__floatsisf+0x74>
     d68:	96 e8       	ldi	r25, 0x86	; 134
     d6a:	86 2f       	mov	r24, r22
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	2a f0       	brmi	.+10     	; 0xd7c <__floatsisf+0x6c>
     d72:	9a 95       	dec	r25
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	88 1f       	adc	r24, r24
     d7a:	da f7       	brpl	.-10     	; 0xd72 <__floatsisf+0x62>
     d7c:	88 0f       	add	r24, r24
     d7e:	96 95       	lsr	r25
     d80:	87 95       	ror	r24
     d82:	97 f9       	bld	r25, 7
     d84:	08 95       	ret

00000d86 <__fp_cmp>:
     d86:	99 0f       	add	r25, r25
     d88:	00 08       	sbc	r0, r0
     d8a:	55 0f       	add	r21, r21
     d8c:	aa 0b       	sbc	r26, r26
     d8e:	e0 e8       	ldi	r30, 0x80	; 128
     d90:	fe ef       	ldi	r31, 0xFE	; 254
     d92:	16 16       	cp	r1, r22
     d94:	17 06       	cpc	r1, r23
     d96:	e8 07       	cpc	r30, r24
     d98:	f9 07       	cpc	r31, r25
     d9a:	c0 f0       	brcs	.+48     	; 0xdcc <__fp_cmp+0x46>
     d9c:	12 16       	cp	r1, r18
     d9e:	13 06       	cpc	r1, r19
     da0:	e4 07       	cpc	r30, r20
     da2:	f5 07       	cpc	r31, r21
     da4:	98 f0       	brcs	.+38     	; 0xdcc <__fp_cmp+0x46>
     da6:	62 1b       	sub	r22, r18
     da8:	73 0b       	sbc	r23, r19
     daa:	84 0b       	sbc	r24, r20
     dac:	95 0b       	sbc	r25, r21
     dae:	39 f4       	brne	.+14     	; 0xdbe <__fp_cmp+0x38>
     db0:	0a 26       	eor	r0, r26
     db2:	61 f0       	breq	.+24     	; 0xdcc <__fp_cmp+0x46>
     db4:	23 2b       	or	r18, r19
     db6:	24 2b       	or	r18, r20
     db8:	25 2b       	or	r18, r21
     dba:	21 f4       	brne	.+8      	; 0xdc4 <__fp_cmp+0x3e>
     dbc:	08 95       	ret
     dbe:	0a 26       	eor	r0, r26
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <__fp_cmp+0x3e>
     dc2:	a1 40       	sbci	r26, 0x01	; 1
     dc4:	a6 95       	lsr	r26
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	81 1d       	adc	r24, r1
     dca:	81 1d       	adc	r24, r1
     dcc:	08 95       	ret

00000dce <__fp_inf>:
     dce:	97 f9       	bld	r25, 7
     dd0:	9f 67       	ori	r25, 0x7F	; 127
     dd2:	80 e8       	ldi	r24, 0x80	; 128
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	08 95       	ret

00000dda <__fp_nan>:
     dda:	9f ef       	ldi	r25, 0xFF	; 255
     ddc:	80 ec       	ldi	r24, 0xC0	; 192
     dde:	08 95       	ret

00000de0 <__fp_pscA>:
     de0:	00 24       	eor	r0, r0
     de2:	0a 94       	dec	r0
     de4:	16 16       	cp	r1, r22
     de6:	17 06       	cpc	r1, r23
     de8:	18 06       	cpc	r1, r24
     dea:	09 06       	cpc	r0, r25
     dec:	08 95       	ret

00000dee <__fp_pscB>:
     dee:	00 24       	eor	r0, r0
     df0:	0a 94       	dec	r0
     df2:	12 16       	cp	r1, r18
     df4:	13 06       	cpc	r1, r19
     df6:	14 06       	cpc	r1, r20
     df8:	05 06       	cpc	r0, r21
     dfa:	08 95       	ret

00000dfc <__fp_round>:
     dfc:	09 2e       	mov	r0, r25
     dfe:	03 94       	inc	r0
     e00:	00 0c       	add	r0, r0
     e02:	11 f4       	brne	.+4      	; 0xe08 <__fp_round+0xc>
     e04:	88 23       	and	r24, r24
     e06:	52 f0       	brmi	.+20     	; 0xe1c <__fp_round+0x20>
     e08:	bb 0f       	add	r27, r27
     e0a:	40 f4       	brcc	.+16     	; 0xe1c <__fp_round+0x20>
     e0c:	bf 2b       	or	r27, r31
     e0e:	11 f4       	brne	.+4      	; 0xe14 <__fp_round+0x18>
     e10:	60 ff       	sbrs	r22, 0
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__fp_round+0x20>
     e14:	6f 5f       	subi	r22, 0xFF	; 255
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	8f 4f       	sbci	r24, 0xFF	; 255
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	08 95       	ret

00000e1e <__fp_split3>:
     e1e:	57 fd       	sbrc	r21, 7
     e20:	90 58       	subi	r25, 0x80	; 128
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	59 f0       	breq	.+22     	; 0xe3e <__fp_splitA+0x10>
     e28:	5f 3f       	cpi	r21, 0xFF	; 255
     e2a:	71 f0       	breq	.+28     	; 0xe48 <__fp_splitA+0x1a>
     e2c:	47 95       	ror	r20

00000e2e <__fp_splitA>:
     e2e:	88 0f       	add	r24, r24
     e30:	97 fb       	bst	r25, 7
     e32:	99 1f       	adc	r25, r25
     e34:	61 f0       	breq	.+24     	; 0xe4e <__fp_splitA+0x20>
     e36:	9f 3f       	cpi	r25, 0xFF	; 255
     e38:	79 f0       	breq	.+30     	; 0xe58 <__fp_splitA+0x2a>
     e3a:	87 95       	ror	r24
     e3c:	08 95       	ret
     e3e:	12 16       	cp	r1, r18
     e40:	13 06       	cpc	r1, r19
     e42:	14 06       	cpc	r1, r20
     e44:	55 1f       	adc	r21, r21
     e46:	f2 cf       	rjmp	.-28     	; 0xe2c <__fp_split3+0xe>
     e48:	46 95       	lsr	r20
     e4a:	f1 df       	rcall	.-30     	; 0xe2e <__fp_splitA>
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <__fp_splitA+0x30>
     e4e:	16 16       	cp	r1, r22
     e50:	17 06       	cpc	r1, r23
     e52:	18 06       	cpc	r1, r24
     e54:	99 1f       	adc	r25, r25
     e56:	f1 cf       	rjmp	.-30     	; 0xe3a <__fp_splitA+0xc>
     e58:	86 95       	lsr	r24
     e5a:	71 05       	cpc	r23, r1
     e5c:	61 05       	cpc	r22, r1
     e5e:	08 94       	sec
     e60:	08 95       	ret

00000e62 <__fp_zero>:
     e62:	e8 94       	clt

00000e64 <__fp_szero>:
     e64:	bb 27       	eor	r27, r27
     e66:	66 27       	eor	r22, r22
     e68:	77 27       	eor	r23, r23
     e6a:	cb 01       	movw	r24, r22
     e6c:	97 f9       	bld	r25, 7
     e6e:	08 95       	ret

00000e70 <__gesf2>:
     e70:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fp_cmp>
     e74:	08 f4       	brcc	.+2      	; 0xe78 <__gesf2+0x8>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	08 95       	ret

00000e7a <log10>:
     e7a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <log>
     e7e:	29 ed       	ldi	r18, 0xD9	; 217
     e80:	3b e5       	ldi	r19, 0x5B	; 91
     e82:	4e ed       	ldi	r20, 0xDE	; 222
     e84:	5e e3       	ldi	r21, 0x3E	; 62
     e86:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__mulsf3>
     e8a:	16 f0       	brts	.+4      	; 0xe90 <log10+0x16>
     e8c:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_mpack>
     e90:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_nan>
     e94:	68 94       	set
     e96:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>

00000e9a <log>:
     e9a:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_splitA>
     e9e:	a8 f3       	brcs	.-22     	; 0xe8a <log10+0x10>
     ea0:	99 23       	and	r25, r25
     ea2:	c1 f3       	breq	.-16     	; 0xe94 <log10+0x1a>
     ea4:	ae f3       	brts	.-22     	; 0xe90 <log10+0x16>
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	1f 93       	push	r17
     eac:	0f 93       	push	r16
     eae:	ff 92       	push	r15
     eb0:	c9 2f       	mov	r28, r25
     eb2:	dd 27       	eor	r29, r29
     eb4:	88 23       	and	r24, r24
     eb6:	2a f0       	brmi	.+10     	; 0xec2 <log+0x28>
     eb8:	21 97       	sbiw	r28, 0x01	; 1
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	da f7       	brpl	.-10     	; 0xeb8 <log+0x1e>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f eb       	ldi	r21, 0xBF	; 191
     eca:	9f e3       	ldi	r25, 0x3F	; 63
     ecc:	88 39       	cpi	r24, 0x98	; 152
     ece:	20 f0       	brcs	.+8      	; 0xed8 <log+0x3e>
     ed0:	80 3e       	cpi	r24, 0xE0	; 224
     ed2:	38 f0       	brcs	.+14     	; 0xee2 <log+0x48>
     ed4:	21 96       	adiw	r28, 0x01	; 1
     ed6:	8f 77       	andi	r24, 0x7F	; 127
     ed8:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     edc:	e8 e6       	ldi	r30, 0x68	; 104
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <log+0x50>
     ee2:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     ee6:	e5 e9       	ldi	r30, 0x95	; 149
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_powser>
     eee:	8b 01       	movw	r16, r22
     ef0:	be 01       	movw	r22, r28
     ef2:	ec 01       	movw	r28, r24
     ef4:	fb 2e       	mov	r15, r27
     ef6:	6f 57       	subi	r22, 0x7F	; 127
     ef8:	71 09       	sbc	r23, r1
     efa:	75 95       	asr	r23
     efc:	77 1f       	adc	r23, r23
     efe:	88 0b       	sbc	r24, r24
     f00:	99 0b       	sbc	r25, r25
     f02:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
     f06:	28 e1       	ldi	r18, 0x18	; 24
     f08:	32 e7       	ldi	r19, 0x72	; 114
     f0a:	41 e3       	ldi	r20, 0x31	; 49
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3x>
     f12:	af 2d       	mov	r26, r15
     f14:	98 01       	movw	r18, r16
     f16:	ae 01       	movw	r20, r28
     f18:	ff 90       	pop	r15
     f1a:	0f 91       	pop	r16
     f1c:	1f 91       	pop	r17
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
     f26:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_round>

00000f2a <__mulsf3>:
     f2a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3x>
     f2e:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_round>
     f32:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_pscA>
     f36:	38 f0       	brcs	.+14     	; 0xf46 <__mulsf3+0x1c>
     f38:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_pscB>
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <__mulsf3+0x1c>
     f3e:	95 23       	and	r25, r21
     f40:	11 f0       	breq	.+4      	; 0xf46 <__mulsf3+0x1c>
     f42:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>
     f46:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_nan>
     f4a:	11 24       	eor	r1, r1
     f4c:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_szero>

00000f50 <__mulsf3x>:
     f50:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_split3>
     f54:	70 f3       	brcs	.-36     	; 0xf32 <__mulsf3+0x8>

00000f56 <__mulsf3_pse>:
     f56:	95 9f       	mul	r25, r21
     f58:	c1 f3       	breq	.-16     	; 0xf4a <__mulsf3+0x20>
     f5a:	95 0f       	add	r25, r21
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	55 1f       	adc	r21, r21
     f60:	62 9f       	mul	r22, r18
     f62:	f0 01       	movw	r30, r0
     f64:	72 9f       	mul	r23, r18
     f66:	bb 27       	eor	r27, r27
     f68:	f0 0d       	add	r31, r0
     f6a:	b1 1d       	adc	r27, r1
     f6c:	63 9f       	mul	r22, r19
     f6e:	aa 27       	eor	r26, r26
     f70:	f0 0d       	add	r31, r0
     f72:	b1 1d       	adc	r27, r1
     f74:	aa 1f       	adc	r26, r26
     f76:	64 9f       	mul	r22, r20
     f78:	66 27       	eor	r22, r22
     f7a:	b0 0d       	add	r27, r0
     f7c:	a1 1d       	adc	r26, r1
     f7e:	66 1f       	adc	r22, r22
     f80:	82 9f       	mul	r24, r18
     f82:	22 27       	eor	r18, r18
     f84:	b0 0d       	add	r27, r0
     f86:	a1 1d       	adc	r26, r1
     f88:	62 1f       	adc	r22, r18
     f8a:	73 9f       	mul	r23, r19
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	62 1f       	adc	r22, r18
     f92:	83 9f       	mul	r24, r19
     f94:	a0 0d       	add	r26, r0
     f96:	61 1d       	adc	r22, r1
     f98:	22 1f       	adc	r18, r18
     f9a:	74 9f       	mul	r23, r20
     f9c:	33 27       	eor	r19, r19
     f9e:	a0 0d       	add	r26, r0
     fa0:	61 1d       	adc	r22, r1
     fa2:	23 1f       	adc	r18, r19
     fa4:	84 9f       	mul	r24, r20
     fa6:	60 0d       	add	r22, r0
     fa8:	21 1d       	adc	r18, r1
     faa:	82 2f       	mov	r24, r18
     fac:	76 2f       	mov	r23, r22
     fae:	6a 2f       	mov	r22, r26
     fb0:	11 24       	eor	r1, r1
     fb2:	9f 57       	subi	r25, 0x7F	; 127
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	9a f0       	brmi	.+38     	; 0xfde <__mulsf3_pse+0x88>
     fb8:	f1 f0       	breq	.+60     	; 0xff6 <__mulsf3_pse+0xa0>
     fba:	88 23       	and	r24, r24
     fbc:	4a f0       	brmi	.+18     	; 0xfd0 <__mulsf3_pse+0x7a>
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	bb 1f       	adc	r27, r27
     fc4:	66 1f       	adc	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	50 40       	sbci	r21, 0x00	; 0
     fce:	a9 f7       	brne	.-22     	; 0xfba <__mulsf3_pse+0x64>
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	51 05       	cpc	r21, r1
     fd4:	80 f0       	brcs	.+32     	; 0xff6 <__mulsf3_pse+0xa0>
     fd6:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_inf>
     fda:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_szero>
     fde:	5f 3f       	cpi	r21, 0xFF	; 255
     fe0:	e4 f3       	brlt	.-8      	; 0xfda <__mulsf3_pse+0x84>
     fe2:	98 3e       	cpi	r25, 0xE8	; 232
     fe4:	d4 f3       	brlt	.-12     	; 0xfda <__mulsf3_pse+0x84>
     fe6:	86 95       	lsr	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	b7 95       	ror	r27
     fee:	f7 95       	ror	r31
     ff0:	e7 95       	ror	r30
     ff2:	9f 5f       	subi	r25, 0xFF	; 255
     ff4:	c1 f7       	brne	.-16     	; 0xfe6 <__mulsf3_pse+0x90>
     ff6:	fe 2b       	or	r31, r30
     ff8:	88 0f       	add	r24, r24
     ffa:	91 1d       	adc	r25, r1
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	97 f9       	bld	r25, 7
    1002:	08 95       	ret

00001004 <__fp_mpack>:
    1004:	9f 3f       	cpi	r25, 0xFF	; 255
    1006:	31 f0       	breq	.+12     	; 0x1014 <__fp_mpack_finite+0xc>

00001008 <__fp_mpack_finite>:
    1008:	91 50       	subi	r25, 0x01	; 1
    100a:	20 f4       	brcc	.+8      	; 0x1014 <__fp_mpack_finite+0xc>
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	88 0f       	add	r24, r24
    1016:	91 1d       	adc	r25, r1
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	97 f9       	bld	r25, 7
    101e:	08 95       	ret

00001020 <__fp_powser>:
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	1f 93       	push	r17
    1026:	0f 93       	push	r16
    1028:	ff 92       	push	r15
    102a:	ef 92       	push	r14
    102c:	df 92       	push	r13
    102e:	7b 01       	movw	r14, r22
    1030:	8c 01       	movw	r16, r24
    1032:	68 94       	set
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <__fp_powser+0x22>
    1036:	da 2e       	mov	r13, r26
    1038:	ef 01       	movw	r28, r30
    103a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3x>
    103e:	fe 01       	movw	r30, r28
    1040:	e8 94       	clt
    1042:	a5 91       	lpm	r26, Z+
    1044:	25 91       	lpm	r18, Z+
    1046:	35 91       	lpm	r19, Z+
    1048:	45 91       	lpm	r20, Z+
    104a:	55 91       	lpm	r21, Z+
    104c:	a6 f3       	brts	.-24     	; 0x1036 <__fp_powser+0x16>
    104e:	ef 01       	movw	r28, r30
    1050:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
    1054:	fe 01       	movw	r30, r28
    1056:	97 01       	movw	r18, r14
    1058:	a8 01       	movw	r20, r16
    105a:	da 94       	dec	r13
    105c:	69 f7       	brne	.-38     	; 0x1038 <__fp_powser+0x18>
    105e:	df 90       	pop	r13
    1060:	ef 90       	pop	r14
    1062:	ff 90       	pop	r15
    1064:	0f 91       	pop	r16
    1066:	1f 91       	pop	r17
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <__umulhisi3>:
    106e:	a2 9f       	mul	r26, r18
    1070:	b0 01       	movw	r22, r0
    1072:	b3 9f       	mul	r27, r19
    1074:	c0 01       	movw	r24, r0
    1076:	a3 9f       	mul	r26, r19
    1078:	70 0d       	add	r23, r0
    107a:	81 1d       	adc	r24, r1
    107c:	11 24       	eor	r1, r1
    107e:	91 1d       	adc	r25, r1
    1080:	b2 9f       	mul	r27, r18
    1082:	70 0d       	add	r23, r0
    1084:	81 1d       	adc	r24, r1
    1086:	11 24       	eor	r1, r1
    1088:	91 1d       	adc	r25, r1
    108a:	08 95       	ret

0000108c <strlen>:
    108c:	fc 01       	movw	r30, r24
    108e:	01 90       	ld	r0, Z+
    1090:	00 20       	and	r0, r0
    1092:	e9 f7       	brne	.-6      	; 0x108e <strlen+0x2>
    1094:	80 95       	com	r24
    1096:	90 95       	com	r25
    1098:	8e 0f       	add	r24, r30
    109a:	9f 1f       	adc	r25, r31
    109c:	08 95       	ret

0000109e <sprintf>:
    109e:	ae e0       	ldi	r26, 0x0E	; 14
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f8 e0       	ldi	r31, 0x08	; 8
    10a6:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__prologue_saves__+0x1c>
    10aa:	0d 89       	ldd	r16, Y+21	; 0x15
    10ac:	1e 89       	ldd	r17, Y+22	; 0x16
    10ae:	86 e0       	ldi	r24, 0x06	; 6
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	1a 83       	std	Y+2, r17	; 0x02
    10b4:	09 83       	std	Y+1, r16	; 0x01
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f e7       	ldi	r25, 0x7F	; 127
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	ae 01       	movw	r20, r28
    10c0:	47 5e       	subi	r20, 0xE7	; 231
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	6f 89       	ldd	r22, Y+23	; 0x17
    10c6:	78 8d       	ldd	r23, Y+24	; 0x18
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vfprintf>
    10d0:	ef 81       	ldd	r30, Y+7	; 0x07
    10d2:	f8 85       	ldd	r31, Y+8	; 0x08
    10d4:	e0 0f       	add	r30, r16
    10d6:	f1 1f       	adc	r31, r17
    10d8:	10 82       	st	Z, r1
    10da:	2e 96       	adiw	r28, 0x0e	; 14
    10dc:	e4 e0       	ldi	r30, 0x04	; 4
    10de:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__epilogue_restores__+0x1c>

000010e2 <vfprintf>:
    10e2:	ab e0       	ldi	r26, 0x0B	; 11
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e7       	ldi	r30, 0x77	; 119
    10e8:	f8 e0       	ldi	r31, 0x08	; 8
    10ea:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__>
    10ee:	6c 01       	movw	r12, r24
    10f0:	7b 01       	movw	r14, r22
    10f2:	8a 01       	movw	r16, r20
    10f4:	fc 01       	movw	r30, r24
    10f6:	17 82       	std	Z+7, r1	; 0x07
    10f8:	16 82       	std	Z+6, r1	; 0x06
    10fa:	83 81       	ldd	r24, Z+3	; 0x03
    10fc:	81 ff       	sbrs	r24, 1
    10fe:	cc c1       	rjmp	.+920    	; 0x1498 <vfprintf+0x3b6>
    1100:	ce 01       	movw	r24, r28
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	3c 01       	movw	r6, r24
    1106:	f6 01       	movw	r30, r12
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	f7 01       	movw	r30, r14
    110c:	93 fd       	sbrc	r25, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	93 ff       	sbrs	r25, 3
    1112:	81 91       	ld	r24, Z+
    1114:	7f 01       	movw	r14, r30
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <vfprintf+0x3a>
    111a:	ba c1       	rjmp	.+884    	; 0x1490 <vfprintf+0x3ae>
    111c:	85 32       	cpi	r24, 0x25	; 37
    111e:	39 f4       	brne	.+14     	; 0x112e <vfprintf+0x4c>
    1120:	93 fd       	sbrc	r25, 3
    1122:	85 91       	lpm	r24, Z+
    1124:	93 ff       	sbrs	r25, 3
    1126:	81 91       	ld	r24, Z+
    1128:	7f 01       	movw	r14, r30
    112a:	85 32       	cpi	r24, 0x25	; 37
    112c:	29 f4       	brne	.+10     	; 0x1138 <vfprintf+0x56>
    112e:	b6 01       	movw	r22, r12
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1136:	e7 cf       	rjmp	.-50     	; 0x1106 <vfprintf+0x24>
    1138:	91 2c       	mov	r9, r1
    113a:	21 2c       	mov	r2, r1
    113c:	31 2c       	mov	r3, r1
    113e:	ff e1       	ldi	r31, 0x1F	; 31
    1140:	f3 15       	cp	r31, r3
    1142:	d8 f0       	brcs	.+54     	; 0x117a <vfprintf+0x98>
    1144:	8b 32       	cpi	r24, 0x2B	; 43
    1146:	79 f0       	breq	.+30     	; 0x1166 <vfprintf+0x84>
    1148:	38 f4       	brcc	.+14     	; 0x1158 <vfprintf+0x76>
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	79 f0       	breq	.+30     	; 0x116c <vfprintf+0x8a>
    114e:	83 32       	cpi	r24, 0x23	; 35
    1150:	a1 f4       	brne	.+40     	; 0x117a <vfprintf+0x98>
    1152:	23 2d       	mov	r18, r3
    1154:	20 61       	ori	r18, 0x10	; 16
    1156:	1d c0       	rjmp	.+58     	; 0x1192 <vfprintf+0xb0>
    1158:	8d 32       	cpi	r24, 0x2D	; 45
    115a:	61 f0       	breq	.+24     	; 0x1174 <vfprintf+0x92>
    115c:	80 33       	cpi	r24, 0x30	; 48
    115e:	69 f4       	brne	.+26     	; 0x117a <vfprintf+0x98>
    1160:	23 2d       	mov	r18, r3
    1162:	21 60       	ori	r18, 0x01	; 1
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <vfprintf+0xb0>
    1166:	83 2d       	mov	r24, r3
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	38 2e       	mov	r3, r24
    116c:	e3 2d       	mov	r30, r3
    116e:	e4 60       	ori	r30, 0x04	; 4
    1170:	3e 2e       	mov	r3, r30
    1172:	2a c0       	rjmp	.+84     	; 0x11c8 <vfprintf+0xe6>
    1174:	f3 2d       	mov	r31, r3
    1176:	f8 60       	ori	r31, 0x08	; 8
    1178:	1d c0       	rjmp	.+58     	; 0x11b4 <vfprintf+0xd2>
    117a:	37 fc       	sbrc	r3, 7
    117c:	2d c0       	rjmp	.+90     	; 0x11d8 <vfprintf+0xf6>
    117e:	20 ed       	ldi	r18, 0xD0	; 208
    1180:	28 0f       	add	r18, r24
    1182:	2a 30       	cpi	r18, 0x0A	; 10
    1184:	40 f0       	brcs	.+16     	; 0x1196 <vfprintf+0xb4>
    1186:	8e 32       	cpi	r24, 0x2E	; 46
    1188:	b9 f4       	brne	.+46     	; 0x11b8 <vfprintf+0xd6>
    118a:	36 fc       	sbrc	r3, 6
    118c:	81 c1       	rjmp	.+770    	; 0x1490 <vfprintf+0x3ae>
    118e:	23 2d       	mov	r18, r3
    1190:	20 64       	ori	r18, 0x40	; 64
    1192:	32 2e       	mov	r3, r18
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <vfprintf+0xe6>
    1196:	36 fe       	sbrs	r3, 6
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0xc4>
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	98 9e       	mul	r9, r24
    119e:	20 0d       	add	r18, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	92 2e       	mov	r9, r18
    11a4:	11 c0       	rjmp	.+34     	; 0x11c8 <vfprintf+0xe6>
    11a6:	ea e0       	ldi	r30, 0x0A	; 10
    11a8:	2e 9e       	mul	r2, r30
    11aa:	20 0d       	add	r18, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	22 2e       	mov	r2, r18
    11b0:	f3 2d       	mov	r31, r3
    11b2:	f0 62       	ori	r31, 0x20	; 32
    11b4:	3f 2e       	mov	r3, r31
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <vfprintf+0xe6>
    11b8:	8c 36       	cpi	r24, 0x6C	; 108
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <vfprintf+0xe2>
    11bc:	83 2d       	mov	r24, r3
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	38 2e       	mov	r3, r24
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0xe6>
    11c4:	88 36       	cpi	r24, 0x68	; 104
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <vfprintf+0xf6>
    11c8:	f7 01       	movw	r30, r14
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	7f 01       	movw	r14, r30
    11d4:	81 11       	cpse	r24, r1
    11d6:	b3 cf       	rjmp	.-154    	; 0x113e <vfprintf+0x5c>
    11d8:	98 2f       	mov	r25, r24
    11da:	9f 7d       	andi	r25, 0xDF	; 223
    11dc:	95 54       	subi	r25, 0x45	; 69
    11de:	93 30       	cpi	r25, 0x03	; 3
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <vfprintf+0x10a>
    11e2:	0c 5f       	subi	r16, 0xFC	; 252
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	9f e3       	ldi	r25, 0x3F	; 63
    11e8:	99 83       	std	Y+1, r25	; 0x01
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <vfprintf+0x124>
    11ec:	83 36       	cpi	r24, 0x63	; 99
    11ee:	31 f0       	breq	.+12     	; 0x11fc <vfprintf+0x11a>
    11f0:	83 37       	cpi	r24, 0x73	; 115
    11f2:	71 f0       	breq	.+28     	; 0x1210 <vfprintf+0x12e>
    11f4:	83 35       	cpi	r24, 0x53	; 83
    11f6:	09 f0       	breq	.+2      	; 0x11fa <vfprintf+0x118>
    11f8:	59 c0       	rjmp	.+178    	; 0x12ac <vfprintf+0x1ca>
    11fa:	21 c0       	rjmp	.+66     	; 0x123e <vfprintf+0x15c>
    11fc:	f8 01       	movw	r30, r16
    11fe:	80 81       	ld	r24, Z
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	0e 5f       	subi	r16, 0xFE	; 254
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	88 24       	eor	r8, r8
    1208:	83 94       	inc	r8
    120a:	91 2c       	mov	r9, r1
    120c:	53 01       	movw	r10, r6
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <vfprintf+0x154>
    1210:	28 01       	movw	r4, r16
    1212:	f2 e0       	ldi	r31, 0x02	; 2
    1214:	4f 0e       	add	r4, r31
    1216:	51 1c       	adc	r5, r1
    1218:	f8 01       	movw	r30, r16
    121a:	a0 80       	ld	r10, Z
    121c:	b1 80       	ldd	r11, Z+1	; 0x01
    121e:	36 fe       	sbrs	r3, 6
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <vfprintf+0x146>
    1222:	69 2d       	mov	r22, r9
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x14a>
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	7f ef       	ldi	r23, 0xFF	; 255
    122c:	c5 01       	movw	r24, r10
    122e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <strnlen>
    1232:	4c 01       	movw	r8, r24
    1234:	82 01       	movw	r16, r4
    1236:	f3 2d       	mov	r31, r3
    1238:	ff 77       	andi	r31, 0x7F	; 127
    123a:	3f 2e       	mov	r3, r31
    123c:	16 c0       	rjmp	.+44     	; 0x126a <vfprintf+0x188>
    123e:	28 01       	movw	r4, r16
    1240:	22 e0       	ldi	r18, 0x02	; 2
    1242:	42 0e       	add	r4, r18
    1244:	51 1c       	adc	r5, r1
    1246:	f8 01       	movw	r30, r16
    1248:	a0 80       	ld	r10, Z
    124a:	b1 80       	ldd	r11, Z+1	; 0x01
    124c:	36 fe       	sbrs	r3, 6
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x174>
    1250:	69 2d       	mov	r22, r9
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x178>
    1256:	6f ef       	ldi	r22, 0xFF	; 255
    1258:	7f ef       	ldi	r23, 0xFF	; 255
    125a:	c5 01       	movw	r24, r10
    125c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <strnlen_P>
    1260:	4c 01       	movw	r8, r24
    1262:	f3 2d       	mov	r31, r3
    1264:	f0 68       	ori	r31, 0x80	; 128
    1266:	3f 2e       	mov	r3, r31
    1268:	82 01       	movw	r16, r4
    126a:	33 fc       	sbrc	r3, 3
    126c:	1b c0       	rjmp	.+54     	; 0x12a4 <vfprintf+0x1c2>
    126e:	82 2d       	mov	r24, r2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	88 16       	cp	r8, r24
    1274:	99 06       	cpc	r9, r25
    1276:	b0 f4       	brcc	.+44     	; 0x12a4 <vfprintf+0x1c2>
    1278:	b6 01       	movw	r22, r12
    127a:	80 e2       	ldi	r24, 0x20	; 32
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1282:	2a 94       	dec	r2
    1284:	f4 cf       	rjmp	.-24     	; 0x126e <vfprintf+0x18c>
    1286:	f5 01       	movw	r30, r10
    1288:	37 fc       	sbrc	r3, 7
    128a:	85 91       	lpm	r24, Z+
    128c:	37 fe       	sbrs	r3, 7
    128e:	81 91       	ld	r24, Z+
    1290:	5f 01       	movw	r10, r30
    1292:	b6 01       	movw	r22, r12
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    129a:	21 10       	cpse	r2, r1
    129c:	2a 94       	dec	r2
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	82 1a       	sub	r8, r18
    12a2:	91 08       	sbc	r9, r1
    12a4:	81 14       	cp	r8, r1
    12a6:	91 04       	cpc	r9, r1
    12a8:	71 f7       	brne	.-36     	; 0x1286 <vfprintf+0x1a4>
    12aa:	e8 c0       	rjmp	.+464    	; 0x147c <vfprintf+0x39a>
    12ac:	84 36       	cpi	r24, 0x64	; 100
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <vfprintf+0x1d2>
    12b0:	89 36       	cpi	r24, 0x69	; 105
    12b2:	41 f5       	brne	.+80     	; 0x1304 <vfprintf+0x222>
    12b4:	f8 01       	movw	r30, r16
    12b6:	37 fe       	sbrs	r3, 7
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <vfprintf+0x1e6>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	0c 5f       	subi	r16, 0xFC	; 252
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x1f6>
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	07 2e       	mov	r0, r23
    12ce:	00 0c       	add	r0, r0
    12d0:	88 0b       	sbc	r24, r24
    12d2:	99 0b       	sbc	r25, r25
    12d4:	0e 5f       	subi	r16, 0xFE	; 254
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	f3 2d       	mov	r31, r3
    12da:	ff 76       	andi	r31, 0x6F	; 111
    12dc:	3f 2e       	mov	r3, r31
    12de:	97 ff       	sbrs	r25, 7
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <vfprintf+0x212>
    12e2:	90 95       	com	r25
    12e4:	80 95       	com	r24
    12e6:	70 95       	com	r23
    12e8:	61 95       	neg	r22
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	f0 68       	ori	r31, 0x80	; 128
    12f2:	3f 2e       	mov	r3, r31
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a3 01       	movw	r20, r6
    12fa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    12fe:	88 2e       	mov	r8, r24
    1300:	86 18       	sub	r8, r6
    1302:	45 c0       	rjmp	.+138    	; 0x138e <vfprintf+0x2ac>
    1304:	85 37       	cpi	r24, 0x75	; 117
    1306:	31 f4       	brne	.+12     	; 0x1314 <vfprintf+0x232>
    1308:	23 2d       	mov	r18, r3
    130a:	2f 7e       	andi	r18, 0xEF	; 239
    130c:	b2 2e       	mov	r11, r18
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	25 c0       	rjmp	.+74     	; 0x135e <vfprintf+0x27c>
    1314:	93 2d       	mov	r25, r3
    1316:	99 7f       	andi	r25, 0xF9	; 249
    1318:	b9 2e       	mov	r11, r25
    131a:	8f 36       	cpi	r24, 0x6F	; 111
    131c:	c1 f0       	breq	.+48     	; 0x134e <vfprintf+0x26c>
    131e:	18 f4       	brcc	.+6      	; 0x1326 <vfprintf+0x244>
    1320:	88 35       	cpi	r24, 0x58	; 88
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0x260>
    1324:	b5 c0       	rjmp	.+362    	; 0x1490 <vfprintf+0x3ae>
    1326:	80 37       	cpi	r24, 0x70	; 112
    1328:	19 f0       	breq	.+6      	; 0x1330 <vfprintf+0x24e>
    132a:	88 37       	cpi	r24, 0x78	; 120
    132c:	21 f0       	breq	.+8      	; 0x1336 <vfprintf+0x254>
    132e:	b0 c0       	rjmp	.+352    	; 0x1490 <vfprintf+0x3ae>
    1330:	e9 2f       	mov	r30, r25
    1332:	e0 61       	ori	r30, 0x10	; 16
    1334:	be 2e       	mov	r11, r30
    1336:	b4 fe       	sbrs	r11, 4
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <vfprintf+0x272>
    133a:	fb 2d       	mov	r31, r11
    133c:	f4 60       	ori	r31, 0x04	; 4
    133e:	bf 2e       	mov	r11, r31
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x272>
    1342:	34 fe       	sbrs	r3, 4
    1344:	0a c0       	rjmp	.+20     	; 0x135a <vfprintf+0x278>
    1346:	29 2f       	mov	r18, r25
    1348:	26 60       	ori	r18, 0x06	; 6
    134a:	b2 2e       	mov	r11, r18
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x278>
    134e:	28 e0       	ldi	r18, 0x08	; 8
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	05 c0       	rjmp	.+10     	; 0x135e <vfprintf+0x27c>
    1354:	20 e1       	ldi	r18, 0x10	; 16
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x27c>
    135a:	20 e1       	ldi	r18, 0x10	; 16
    135c:	32 e0       	ldi	r19, 0x02	; 2
    135e:	f8 01       	movw	r30, r16
    1360:	b7 fe       	sbrs	r11, 7
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <vfprintf+0x290>
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0c 5f       	subi	r16, 0xFC	; 252
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	06 c0       	rjmp	.+12     	; 0x137e <vfprintf+0x29c>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 5f       	subi	r16, 0xFE	; 254
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	a3 01       	movw	r20, r6
    1380:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    1384:	88 2e       	mov	r8, r24
    1386:	86 18       	sub	r8, r6
    1388:	fb 2d       	mov	r31, r11
    138a:	ff 77       	andi	r31, 0x7F	; 127
    138c:	3f 2e       	mov	r3, r31
    138e:	36 fe       	sbrs	r3, 6
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <vfprintf+0x2ca>
    1392:	23 2d       	mov	r18, r3
    1394:	2e 7f       	andi	r18, 0xFE	; 254
    1396:	a2 2e       	mov	r10, r18
    1398:	89 14       	cp	r8, r9
    139a:	58 f4       	brcc	.+22     	; 0x13b2 <vfprintf+0x2d0>
    139c:	34 fe       	sbrs	r3, 4
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <vfprintf+0x2d4>
    13a0:	32 fc       	sbrc	r3, 2
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <vfprintf+0x2d4>
    13a4:	83 2d       	mov	r24, r3
    13a6:	8e 7e       	andi	r24, 0xEE	; 238
    13a8:	a8 2e       	mov	r10, r24
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <vfprintf+0x2d4>
    13ac:	b8 2c       	mov	r11, r8
    13ae:	a3 2c       	mov	r10, r3
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfprintf+0x2d6>
    13b2:	b8 2c       	mov	r11, r8
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x2d6>
    13b6:	b9 2c       	mov	r11, r9
    13b8:	a4 fe       	sbrs	r10, 4
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <vfprintf+0x2f8>
    13bc:	fe 01       	movw	r30, r28
    13be:	e8 0d       	add	r30, r8
    13c0:	f1 1d       	adc	r31, r1
    13c2:	80 81       	ld	r24, Z
    13c4:	80 33       	cpi	r24, 0x30	; 48
    13c6:	21 f4       	brne	.+8      	; 0x13d0 <vfprintf+0x2ee>
    13c8:	9a 2d       	mov	r25, r10
    13ca:	99 7e       	andi	r25, 0xE9	; 233
    13cc:	a9 2e       	mov	r10, r25
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <vfprintf+0x300>
    13d0:	a2 fe       	sbrs	r10, 2
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0x2fe>
    13d4:	b3 94       	inc	r11
    13d6:	b3 94       	inc	r11
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <vfprintf+0x300>
    13da:	8a 2d       	mov	r24, r10
    13dc:	86 78       	andi	r24, 0x86	; 134
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0x300>
    13e0:	b3 94       	inc	r11
    13e2:	a3 fc       	sbrc	r10, 3
    13e4:	11 c0       	rjmp	.+34     	; 0x1408 <vfprintf+0x326>
    13e6:	a0 fe       	sbrs	r10, 0
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0x314>
    13ea:	b2 14       	cp	r11, r2
    13ec:	88 f4       	brcc	.+34     	; 0x1410 <vfprintf+0x32e>
    13ee:	28 0c       	add	r2, r8
    13f0:	92 2c       	mov	r9, r2
    13f2:	9b 18       	sub	r9, r11
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <vfprintf+0x330>
    13f6:	b2 14       	cp	r11, r2
    13f8:	60 f4       	brcc	.+24     	; 0x1412 <vfprintf+0x330>
    13fa:	b6 01       	movw	r22, r12
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1404:	b3 94       	inc	r11
    1406:	f7 cf       	rjmp	.-18     	; 0x13f6 <vfprintf+0x314>
    1408:	b2 14       	cp	r11, r2
    140a:	18 f4       	brcc	.+6      	; 0x1412 <vfprintf+0x330>
    140c:	2b 18       	sub	r2, r11
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x332>
    1410:	98 2c       	mov	r9, r8
    1412:	21 2c       	mov	r2, r1
    1414:	a4 fe       	sbrs	r10, 4
    1416:	10 c0       	rjmp	.+32     	; 0x1438 <vfprintf+0x356>
    1418:	b6 01       	movw	r22, r12
    141a:	80 e3       	ldi	r24, 0x30	; 48
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1422:	a2 fe       	sbrs	r10, 2
    1424:	17 c0       	rjmp	.+46     	; 0x1454 <vfprintf+0x372>
    1426:	a1 fc       	sbrc	r10, 1
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <vfprintf+0x34e>
    142a:	88 e7       	ldi	r24, 0x78	; 120
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x352>
    1430:	88 e5       	ldi	r24, 0x58	; 88
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b6 01       	movw	r22, r12
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <vfprintf+0x36e>
    1438:	8a 2d       	mov	r24, r10
    143a:	86 78       	andi	r24, 0x86	; 134
    143c:	59 f0       	breq	.+22     	; 0x1454 <vfprintf+0x372>
    143e:	a1 fe       	sbrs	r10, 1
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x364>
    1442:	8b e2       	ldi	r24, 0x2B	; 43
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vfprintf+0x366>
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	a7 fc       	sbrc	r10, 7
    144a:	8d e2       	ldi	r24, 0x2D	; 45
    144c:	b6 01       	movw	r22, r12
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1454:	89 14       	cp	r8, r9
    1456:	38 f4       	brcc	.+14     	; 0x1466 <vfprintf+0x384>
    1458:	b6 01       	movw	r22, r12
    145a:	80 e3       	ldi	r24, 0x30	; 48
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1462:	9a 94       	dec	r9
    1464:	f7 cf       	rjmp	.-18     	; 0x1454 <vfprintf+0x372>
    1466:	8a 94       	dec	r8
    1468:	f3 01       	movw	r30, r6
    146a:	e8 0d       	add	r30, r8
    146c:	f1 1d       	adc	r31, r1
    146e:	80 81       	ld	r24, Z
    1470:	b6 01       	movw	r22, r12
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1478:	81 10       	cpse	r8, r1
    147a:	f5 cf       	rjmp	.-22     	; 0x1466 <vfprintf+0x384>
    147c:	22 20       	and	r2, r2
    147e:	09 f4       	brne	.+2      	; 0x1482 <vfprintf+0x3a0>
    1480:	42 ce       	rjmp	.-892    	; 0x1106 <vfprintf+0x24>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    148c:	2a 94       	dec	r2
    148e:	f6 cf       	rjmp	.-20     	; 0x147c <vfprintf+0x39a>
    1490:	f6 01       	movw	r30, r12
    1492:	86 81       	ldd	r24, Z+6	; 0x06
    1494:	97 81       	ldd	r25, Z+7	; 0x07
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x3ba>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	2b 96       	adiw	r28, 0x0b	; 11
    149e:	e2 e1       	ldi	r30, 0x12	; 18
    14a0:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__>

000014a4 <strnlen_P>:
    14a4:	fc 01       	movw	r30, r24
    14a6:	05 90       	lpm	r0, Z+
    14a8:	61 50       	subi	r22, 0x01	; 1
    14aa:	70 40       	sbci	r23, 0x00	; 0
    14ac:	01 10       	cpse	r0, r1
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <strnlen_P+0x2>
    14b0:	80 95       	com	r24
    14b2:	90 95       	com	r25
    14b4:	8e 0f       	add	r24, r30
    14b6:	9f 1f       	adc	r25, r31
    14b8:	08 95       	ret

000014ba <strnlen>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	61 50       	subi	r22, 0x01	; 1
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	01 90       	ld	r0, Z+
    14c2:	01 10       	cpse	r0, r1
    14c4:	d8 f7       	brcc	.-10     	; 0x14bc <strnlen+0x2>
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	8e 0f       	add	r24, r30
    14cc:	9f 1f       	adc	r25, r31
    14ce:	08 95       	ret

000014d0 <fputc>:
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	fb 01       	movw	r30, r22
    14da:	23 81       	ldd	r18, Z+3	; 0x03
    14dc:	21 fd       	sbrc	r18, 1
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <fputc+0x16>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	9f ef       	ldi	r25, 0xFF	; 255
    14e4:	2c c0       	rjmp	.+88     	; 0x153e <fputc+0x6e>
    14e6:	22 ff       	sbrs	r18, 2
    14e8:	16 c0       	rjmp	.+44     	; 0x1516 <fputc+0x46>
    14ea:	46 81       	ldd	r20, Z+6	; 0x06
    14ec:	57 81       	ldd	r21, Z+7	; 0x07
    14ee:	24 81       	ldd	r18, Z+4	; 0x04
    14f0:	35 81       	ldd	r19, Z+5	; 0x05
    14f2:	42 17       	cp	r20, r18
    14f4:	53 07       	cpc	r21, r19
    14f6:	44 f4       	brge	.+16     	; 0x1508 <fputc+0x38>
    14f8:	a0 81       	ld	r26, Z
    14fa:	b1 81       	ldd	r27, Z+1	; 0x01
    14fc:	9d 01       	movw	r18, r26
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	20 83       	st	Z, r18
    1506:	8c 93       	st	X, r24
    1508:	26 81       	ldd	r18, Z+6	; 0x06
    150a:	37 81       	ldd	r19, Z+7	; 0x07
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	37 83       	std	Z+7, r19	; 0x07
    1512:	26 83       	std	Z+6, r18	; 0x06
    1514:	14 c0       	rjmp	.+40     	; 0x153e <fputc+0x6e>
    1516:	8b 01       	movw	r16, r22
    1518:	ec 01       	movw	r28, r24
    151a:	fb 01       	movw	r30, r22
    151c:	00 84       	ldd	r0, Z+8	; 0x08
    151e:	f1 85       	ldd	r31, Z+9	; 0x09
    1520:	e0 2d       	mov	r30, r0
    1522:	09 95       	icall
    1524:	89 2b       	or	r24, r25
    1526:	e1 f6       	brne	.-72     	; 0x14e0 <fputc+0x10>
    1528:	d8 01       	movw	r26, r16
    152a:	16 96       	adiw	r26, 0x06	; 6
    152c:	8d 91       	ld	r24, X+
    152e:	9c 91       	ld	r25, X
    1530:	17 97       	sbiw	r26, 0x07	; 7
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	17 96       	adiw	r26, 0x07	; 7
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
    153a:	16 97       	sbiw	r26, 0x06	; 6
    153c:	ce 01       	movw	r24, r28
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <__ultoa_invert>:
    1548:	fa 01       	movw	r30, r20
    154a:	aa 27       	eor	r26, r26
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	51 f1       	breq	.+84     	; 0x15a4 <__ultoa_invert+0x5c>
    1550:	20 31       	cpi	r18, 0x10	; 16
    1552:	81 f1       	breq	.+96     	; 0x15b4 <__ultoa_invert+0x6c>
    1554:	e8 94       	clt
    1556:	6f 93       	push	r22
    1558:	6e 7f       	andi	r22, 0xFE	; 254
    155a:	6e 5f       	subi	r22, 0xFE	; 254
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	af 4f       	sbci	r26, 0xFF	; 255
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	3e d0       	rcall	.+124    	; 0x15e4 <__ultoa_invert+0x9c>
    1568:	b4 e0       	ldi	r27, 0x04	; 4
    156a:	3c d0       	rcall	.+120    	; 0x15e4 <__ultoa_invert+0x9c>
    156c:	67 0f       	add	r22, r23
    156e:	78 1f       	adc	r23, r24
    1570:	89 1f       	adc	r24, r25
    1572:	9a 1f       	adc	r25, r26
    1574:	a1 1d       	adc	r26, r1
    1576:	68 0f       	add	r22, r24
    1578:	79 1f       	adc	r23, r25
    157a:	8a 1f       	adc	r24, r26
    157c:	91 1d       	adc	r25, r1
    157e:	a1 1d       	adc	r26, r1
    1580:	6a 0f       	add	r22, r26
    1582:	71 1d       	adc	r23, r1
    1584:	81 1d       	adc	r24, r1
    1586:	91 1d       	adc	r25, r1
    1588:	a1 1d       	adc	r26, r1
    158a:	20 d0       	rcall	.+64     	; 0x15cc <__ultoa_invert+0x84>
    158c:	09 f4       	brne	.+2      	; 0x1590 <__ultoa_invert+0x48>
    158e:	68 94       	set
    1590:	3f 91       	pop	r19
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	26 9f       	mul	r18, r22
    1596:	11 24       	eor	r1, r1
    1598:	30 19       	sub	r19, r0
    159a:	30 5d       	subi	r19, 0xD0	; 208
    159c:	31 93       	st	Z+, r19
    159e:	de f6       	brtc	.-74     	; 0x1556 <__ultoa_invert+0xe>
    15a0:	cf 01       	movw	r24, r30
    15a2:	08 95       	ret
    15a4:	46 2f       	mov	r20, r22
    15a6:	47 70       	andi	r20, 0x07	; 7
    15a8:	40 5d       	subi	r20, 0xD0	; 208
    15aa:	41 93       	st	Z+, r20
    15ac:	b3 e0       	ldi	r27, 0x03	; 3
    15ae:	0f d0       	rcall	.+30     	; 0x15ce <__ultoa_invert+0x86>
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x5c>
    15b2:	f6 cf       	rjmp	.-20     	; 0x15a0 <__ultoa_invert+0x58>
    15b4:	46 2f       	mov	r20, r22
    15b6:	4f 70       	andi	r20, 0x0F	; 15
    15b8:	40 5d       	subi	r20, 0xD0	; 208
    15ba:	4a 33       	cpi	r20, 0x3A	; 58
    15bc:	18 f0       	brcs	.+6      	; 0x15c4 <__ultoa_invert+0x7c>
    15be:	49 5d       	subi	r20, 0xD9	; 217
    15c0:	31 fd       	sbrc	r19, 1
    15c2:	40 52       	subi	r20, 0x20	; 32
    15c4:	41 93       	st	Z+, r20
    15c6:	02 d0       	rcall	.+4      	; 0x15cc <__ultoa_invert+0x84>
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__ultoa_invert+0x6c>
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__ultoa_invert+0x58>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	a6 95       	lsr	r26
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	ba 95       	dec	r27
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x86>
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	61 05       	cpc	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	08 95       	ret
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	0a 2e       	mov	r0, r26
    15ea:	06 94       	lsr	r0
    15ec:	57 95       	ror	r21
    15ee:	47 95       	ror	r20
    15f0:	37 95       	ror	r19
    15f2:	27 95       	ror	r18
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__ultoa_invert+0xa2>
    15f8:	62 0f       	add	r22, r18
    15fa:	73 1f       	adc	r23, r19
    15fc:	84 1f       	adc	r24, r20
    15fe:	95 1f       	adc	r25, r21
    1600:	a0 1d       	adc	r26, r0
    1602:	08 95       	ret

00001604 <__prologue_saves__>:
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ca 1b       	sub	r28, r26
    162e:	db 0b       	sbc	r29, r27
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	09 94       	ijmp

0000163c <__epilogue_restores__>:
    163c:	2a 88       	ldd	r2, Y+18	; 0x12
    163e:	39 88       	ldd	r3, Y+17	; 0x11
    1640:	48 88       	ldd	r4, Y+16	; 0x10
    1642:	5f 84       	ldd	r5, Y+15	; 0x0f
    1644:	6e 84       	ldd	r6, Y+14	; 0x0e
    1646:	7d 84       	ldd	r7, Y+13	; 0x0d
    1648:	8c 84       	ldd	r8, Y+12	; 0x0c
    164a:	9b 84       	ldd	r9, Y+11	; 0x0b
    164c:	aa 84       	ldd	r10, Y+10	; 0x0a
    164e:	b9 84       	ldd	r11, Y+9	; 0x09
    1650:	c8 84       	ldd	r12, Y+8	; 0x08
    1652:	df 80       	ldd	r13, Y+7	; 0x07
    1654:	ee 80       	ldd	r14, Y+6	; 0x06
    1656:	fd 80       	ldd	r15, Y+5	; 0x05
    1658:	0c 81       	ldd	r16, Y+4	; 0x04
    165a:	1b 81       	ldd	r17, Y+3	; 0x03
    165c:	aa 81       	ldd	r26, Y+2	; 0x02
    165e:	b9 81       	ldd	r27, Y+1	; 0x01
    1660:	ce 0f       	add	r28, r30
    1662:	d1 1d       	adc	r29, r1
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	ed 01       	movw	r28, r26
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
