
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000832  000008a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000832  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001512  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab9  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2b  00000000  00000000  00002a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00003444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c3  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000092a  00000000  00000000  00003dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__data_load_end+0x66>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e2 e3       	ldi	r30, 0x32	; 50
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a4 32       	cpi	r26, 0x24	; 36
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>
  e4:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  e8:	0c 94 17 04 	jmp	0x82e	; 0x82e <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <init_ADC>:

#include "Joystick.h"

void init_ADC()
{
	ADMUX = (1<<REFS0);
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  f6:	87 e8       	ldi	r24, 0x87	; 135
  f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	08 95       	ret

000000fe <read_ADC>:
}

uint16_t read_ADC(uint8_t channel)
{
	uint16_t result;
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);	//Use ADC channel with safety masking
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	
	while (ADCSRA & (1<<ADSC));
 116:	80 81       	ld	r24, Z
 118:	86 fd       	sbrc	r24, 6
 11a:	fd cf       	rjmp	.-6      	; 0x116 <read_ADC+0x18>
	result = ADC;
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return result;
 124:	08 95       	ret

00000126 <init_ALL>:
}

void init_ALL(void)
{
	//init_USART();
	init_I2C();
 126:	0e 94 c4 00 	call	0x188	; 0x188 <init_I2C>
	mpu6050_init();
 12a:	0e 94 03 01 	call	0x206	; 0x206 <mpu6050_init>
	init_ADC();
 12e:	0e 94 78 00 	call	0xf0	; 0xf0 <init_ADC>
 132:	08 95       	ret

00000134 <main>:
void collect_mpu_data(uint16_t *mpu_data);
void collect_joystick_data(void);

int main(void)
{
	init_ALL();
 134:	0e 94 93 00 	call	0x126	; 0x126 <init_ALL>
		//USART_int_transmit(gy);
		//USART_char_transmit("Accelerometer Output");
		//USART_int_transmit(ax);
		//USART_int_transmit(ay);
		
		joystick_y = read_ADC(JOYSTICK_Y);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 7f 00 	call	0xfe	; 0xfe <read_ADC>
 13e:	ec 01       	movw	r28, r24
		USART_char_transmit("Joystick Data", NEWLINE);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 b1 01 	call	0x362	; 0x362 <USART_char_transmit>
		if (joystick_y == 520)
 14c:	c8 30       	cpi	r28, 0x08	; 8
 14e:	22 e0       	ldi	r18, 0x02	; 2
 150:	d2 07       	cpc	r29, r18
 152:	39 f4       	brne	.+14     	; 0x162 <main+0x2e>
		{
			USART_char_transmit("Neutral", NEWLINE);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	8e e0       	ldi	r24, 0x0E	; 14
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 b1 01 	call	0x362	; 0x362 <USART_char_transmit>
 160:	06 c0       	rjmp	.+12     	; 0x16e <main+0x3a>
		}
		else if (520 < joystick_y < 760)
		{
			USART_char_transmit("Half Throttle", NEWLINE);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	86 e1       	ldi	r24, 0x16	; 22
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 b1 01 	call	0x362	; 0x362 <USART_char_transmit>
		}
		else if (761 < joystick_y < 1024)
		{
			USART_char_transmit("Full Throttle", NEWLINE);
		}
		USART_int_transmit(joystick_y);
 16e:	ce 01       	movw	r24, r28
 170:	0e 94 11 01 	call	0x222	; 0x222 <USART_int_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	90 e7       	ldi	r25, 0x70	; 112
 178:	22 e0       	ldi	r18, 0x02	; 2
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x46>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x50>
 184:	00 00       	nop
 186:	d8 cf       	rjmp	.-80     	; 0x138 <main+0x4>

00000188 <init_I2C>:
	//Device not Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT);
	while(!(TWCR & (1<<TWINT)));
	
	return TWDR;
}
 188:	87 b1       	in	r24, 0x07	; 7
 18a:	8f 7c       	andi	r24, 0xCF	; 207
 18c:	87 b9       	out	0x07, r24	; 7
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	80 63       	ori	r24, 0x30	; 48
 192:	88 b9       	out	0x08, r24	; 8
 194:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 198:	88 e4       	ldi	r24, 0x48	; 72
 19a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 19e:	08 95       	ret

000001a0 <I2C_start>:
 1a0:	84 ea       	ldi	r24, 0xA4	; 164
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a6:	ec eb       	ldi	r30, 0xBC	; 188
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	ec f7       	brge	.-6      	; 0x1aa <I2C_start+0xa>
 1b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b4:	98 7f       	andi	r25, 0xF8	; 248
 1b6:	98 30       	cpi	r25, 0x08	; 8
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <I2C_start+0x24>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 31       	cpi	r25, 0x10	; 16
 1be:	19 f0       	breq	.+6      	; 0x1c6 <I2C_start+0x26>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret

000001c8 <I2C_write>:
 1c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1cc:	84 e8       	ldi	r24, 0x84	; 132
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	ec f7       	brge	.-6      	; 0x1d6 <I2C_write+0xe>
 1dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e0:	98 7f       	andi	r25, 0xF8	; 248
 1e2:	98 31       	cpi	r25, 0x18	; 24
 1e4:	29 f0       	breq	.+10     	; 0x1f0 <I2C_write+0x28>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	98 32       	cpi	r25, 0x28	; 40
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <I2C_write+0x2a>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret

000001f4 <I2C_stop>:

void I2C_stop(void)
{
	//Stop I2C Communication
	TWCR = STOP;
 1f4:	84 e9       	ldi	r24, 0x94	; 148
 1f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
 1fa:	ec eb       	ldi	r30, 0xBC	; 188
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	84 fd       	sbrc	r24, 4
 202:	fd cf       	rjmp	.-6      	; 0x1fe <I2C_stop+0xa>
}
 204:	08 95       	ret

00000206 <mpu6050_init>:

void mpu6050_init(void)
{
	//Initialize mpu6050
	I2C_start();
 206:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
 20a:	80 ed       	ldi	r24, 0xD0	; 208
 20c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_write>
	I2C_write(0x6B);	//Access PWR_MGMT_1 register
 210:	8b e6       	ldi	r24, 0x6B	; 107
 212:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_write>
	I2C_write(0x00);	//Start mpu6050 module
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_write>
	I2C_stop();
 21c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_stop>
 220:	08 95       	ret

00000222 <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
 222:	8f 92       	push	r8
 224:	9f 92       	push	r9
 226:	af 92       	push	r10
 228:	bf 92       	push	r11
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	2a 97       	sbiw	r28, 0x0a	; 10
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	8c 01       	movw	r16, r24
	//Exception handler for 0
	if (data == 0)
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	49 f4       	brne	.+18     	; 0x25e <USART_int_transmit+0x3c>
	{
		while ((UCSR0A & (1<<UDRE0))==0);
 24c:	e0 ec       	ldi	r30, 0xC0	; 192
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	85 ff       	sbrs	r24, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <USART_int_transmit+0x2e>
		UDR0 = 0x30;
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25c:	69 c0       	rjmp	.+210    	; 0x330 <USART_int_transmit+0x10e>
	}
	else
	{
		int nDigits = log10(data)+1;
 25e:	bc 01       	movw	r22, r24
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 80 02 	call	0x500	; 0x500 <__floatunsisf>
 268:	0e 94 0e 03 	call	0x61c	; 0x61c <log10>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 278:	0e 94 4a 02 	call	0x494	; 0x494 <__fixsfsi>
 27c:	4b 01       	movw	r8, r22
 27e:	5c 01       	movw	r10, r24
		int numParser;
		char transmit_buffer[10];
		
		//Break data into 'digits' and store each digit as it's ASCII equivalent value
		for (int i = nDigits; i > 0; i--)
 280:	16 16       	cp	r1, r22
 282:	17 06       	cpc	r1, r23
 284:	bc f5       	brge	.+110    	; 0x2f4 <USART_int_transmit+0xd2>
 286:	fb 01       	movw	r30, r22
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	8c 0f       	add	r24, r28
 290:	9d 1f       	adc	r25, r29
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	7e 01       	movw	r14, r28
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	e9 0e       	add	r14, r25
 29c:	f1 1c       	adc	r15, r1
		{
			numParser = data % 10;
 29e:	98 01       	movw	r18, r16
 2a0:	ad ec       	ldi	r26, 0xCD	; 205
 2a2:	bc ec       	ldi	r27, 0xCC	; 204
 2a4:	0e 94 08 04 	call	0x810	; 0x810 <__umulhisi3>
 2a8:	ac 01       	movw	r20, r24
 2aa:	56 95       	lsr	r21
 2ac:	47 95       	ror	r20
 2ae:	56 95       	lsr	r21
 2b0:	47 95       	ror	r20
 2b2:	56 95       	lsr	r21
 2b4:	47 95       	ror	r20
 2b6:	ca 01       	movw	r24, r20
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	48 0f       	add	r20, r24
 2ca:	59 1f       	adc	r21, r25
 2cc:	d8 01       	movw	r26, r16
 2ce:	a4 1b       	sub	r26, r20
 2d0:	b5 0b       	sbc	r27, r21
 2d2:	ad 01       	movw	r20, r26
			data = data / 10;
 2d4:	ad ec       	ldi	r26, 0xCD	; 205
 2d6:	bc ec       	ldi	r27, 0xCC	; 204
 2d8:	0e 94 08 04 	call	0x810	; 0x810 <__umulhisi3>
 2dc:	8c 01       	movw	r16, r24
 2de:	16 95       	lsr	r17
 2e0:	07 95       	ror	r16
 2e2:	16 95       	lsr	r17
 2e4:	07 95       	ror	r16
 2e6:	16 95       	lsr	r17
 2e8:	07 95       	ror	r16
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
 2ea:	40 5d       	subi	r20, 0xD0	; 208
 2ec:	42 93       	st	-Z, r20
		int nDigits = log10(data)+1;
		int numParser;
		char transmit_buffer[10];
		
		//Break data into 'digits' and store each digit as it's ASCII equivalent value
		for (int i = nDigits; i > 0; i--)
 2ee:	ee 15       	cp	r30, r14
 2f0:	ff 05       	cpc	r31, r15
 2f2:	a9 f6       	brne	.-86     	; 0x29e <USART_int_transmit+0x7c>
			data = data / 10;
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
 2f4:	c4 01       	movw	r24, r8
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	cc f0       	brlt	.+50     	; 0x330 <USART_int_transmit+0x10e>
 2fe:	ae 01       	movw	r20, r28
 300:	4e 5f       	subi	r20, 0xFE	; 254
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	4c 01       	movw	r8, r24
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	8c 0f       	add	r24, r28
 30c:	9d 1f       	adc	r25, r29
 30e:	88 0e       	add	r8, r24
 310:	99 1e       	adc	r9, r25
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 312:	e0 ec       	ldi	r30, 0xC0	; 192
 314:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = transmit_buffer[i];
 316:	26 ec       	ldi	r18, 0xC6	; 198
 318:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 31a:	80 81       	ld	r24, Z
 31c:	85 ff       	sbrs	r24, 5
 31e:	fd cf       	rjmp	.-6      	; 0x31a <USART_int_transmit+0xf8>
			UDR0 = transmit_buffer[i];
 320:	da 01       	movw	r26, r20
 322:	8d 91       	ld	r24, X+
 324:	ad 01       	movw	r20, r26
 326:	d9 01       	movw	r26, r18
 328:	8c 93       	st	X, r24
			data = data / 10;
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
 32a:	84 16       	cp	r8, r20
 32c:	95 06       	cpc	r9, r21
 32e:	a9 f7       	brne	.-22     	; 0x31a <USART_int_transmit+0xf8>
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
			UDR0 = transmit_buffer[i];
		}
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 330:	e0 ec       	ldi	r30, 0xC0	; 192
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	85 ff       	sbrs	r24, 5
 338:	fd cf       	rjmp	.-6      	; 0x334 <USART_int_transmit+0x112>
	UDR0 = 0x0A;	//New Line
 33a:	8a e0       	ldi	r24, 0x0A	; 10
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 340:	2a 96       	adiw	r28, 0x0a	; 10
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	8f 90       	pop	r8
 360:	08 95       	ret

00000362 <USART_char_transmit>:

void USART_char_transmit(const char *buffer, int mode)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
	if (mode == NULL)
 366:	61 15       	cp	r22, r1
 368:	71 05       	cpc	r23, r1
 36a:	59 f0       	breq	.+22     	; 0x382 <USART_char_transmit+0x20>
	{
		mode = NONE;
	}
	
	if (mode == LOGGING)
 36c:	61 30       	cpi	r22, 0x01	; 1
 36e:	71 05       	cpc	r23, r1
 370:	41 f4       	brne	.+16     	; 0x382 <USART_char_transmit+0x20>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 372:	e0 ec       	ldi	r30, 0xC0	; 192
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	20 81       	ld	r18, Z
 378:	25 ff       	sbrs	r18, 5
 37a:	fd cf       	rjmp	.-6      	; 0x376 <USART_char_transmit+0x14>
		UDR0 = 0x1B;
 37c:	2b e1       	ldi	r18, 0x1B	; 27
 37e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	while(*buffer)
 382:	fc 01       	movw	r30, r24
 384:	20 81       	ld	r18, Z
 386:	22 23       	and	r18, r18
 388:	69 f0       	breq	.+26     	; 0x3a4 <USART_char_transmit+0x42>
 38a:	dc 01       	movw	r26, r24
 38c:	11 96       	adiw	r26, 0x01	; 1
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 38e:	e0 ec       	ldi	r30, 0xC0	; 192
 390:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *buffer; //set UDR0 to character
 392:	c6 ec       	ldi	r28, 0xC6	; 198
 394:	d0 e0       	ldi	r29, 0x00	; 0
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 396:	90 81       	ld	r25, Z
 398:	95 ff       	sbrs	r25, 5
 39a:	fd cf       	rjmp	.-6      	; 0x396 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
 39c:	28 83       	st	Y, r18
	if (mode == LOGGING)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
 39e:	2d 91       	ld	r18, X+
 3a0:	21 11       	cpse	r18, r1
 3a2:	f9 cf       	rjmp	.-14     	; 0x396 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
		buffer++;
	}
	if (1)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 3a4:	e0 ec       	ldi	r30, 0xC0	; 192
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	85 ff       	sbrs	r24, 5
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <USART_char_transmit+0x46>
		UDR0 = 0x0A;	
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <__subsf3>:
 3ba:	50 58       	subi	r21, 0x80	; 128

000003bc <__addsf3>:
 3bc:	bb 27       	eor	r27, r27
 3be:	aa 27       	eor	r26, r26
 3c0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3x>
 3c4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 3c8:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 3cc:	38 f0       	brcs	.+14     	; 0x3dc <__addsf3+0x20>
 3ce:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 3d2:	20 f0       	brcs	.+8      	; 0x3dc <__addsf3+0x20>
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <__addsf3+0x28>
 3d6:	9f 3f       	cpi	r25, 0xFF	; 255
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <__addsf3+0x24>
 3da:	26 f4       	brtc	.+8      	; 0x3e4 <__addsf3+0x28>
 3dc:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 3e0:	0e f4       	brtc	.+2      	; 0x3e4 <__addsf3+0x28>
 3e2:	e0 95       	com	r30
 3e4:	e7 fb       	bst	r30, 7
 3e6:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>

000003ea <__addsf3x>:
 3ea:	e9 2f       	mov	r30, r25
 3ec:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 3f0:	58 f3       	brcs	.-42     	; 0x3c8 <__addsf3+0xc>
 3f2:	ba 17       	cp	r27, r26
 3f4:	62 07       	cpc	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	95 07       	cpc	r25, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	79 f4       	brne	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 400:	a6 f5       	brtc	.+104    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 402:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 406:	0e f4       	brtc	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	e0 95       	com	r30
 40a:	0b 2e       	mov	r0, r27
 40c:	ba 2f       	mov	r27, r26
 40e:	a0 2d       	mov	r26, r0
 410:	0b 01       	movw	r0, r22
 412:	b9 01       	movw	r22, r18
 414:	90 01       	movw	r18, r0
 416:	0c 01       	movw	r0, r24
 418:	ca 01       	movw	r24, r20
 41a:	a0 01       	movw	r20, r0
 41c:	11 24       	eor	r1, r1
 41e:	ff 27       	eor	r31, r31
 420:	59 1b       	sub	r21, r25
 422:	99 f0       	breq	.+38     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 424:	59 3f       	cpi	r21, 0xF9	; 249
 426:	50 f4       	brcc	.+20     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 428:	50 3e       	cpi	r21, 0xE0	; 224
 42a:	68 f1       	brcs	.+90     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 42c:	1a 16       	cp	r1, r26
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	a2 2f       	mov	r26, r18
 432:	23 2f       	mov	r18, r19
 434:	34 2f       	mov	r19, r20
 436:	44 27       	eor	r20, r20
 438:	58 5f       	subi	r21, 0xF8	; 248
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 43c:	46 95       	lsr	r20
 43e:	37 95       	ror	r19
 440:	27 95       	ror	r18
 442:	a7 95       	ror	r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	53 95       	inc	r21
 448:	c9 f7       	brne	.-14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 44a:	7e f4       	brtc	.+30     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 44c:	1f 16       	cp	r1, r31
 44e:	ba 0b       	sbc	r27, r26
 450:	62 0b       	sbc	r22, r18
 452:	73 0b       	sbc	r23, r19
 454:	84 0b       	sbc	r24, r20
 456:	ba f0       	brmi	.+46     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	a1 f0       	breq	.+40     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45c:	ff 0f       	add	r31, r31
 45e:	bb 1f       	adc	r27, r27
 460:	66 1f       	adc	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	c2 f7       	brpl	.-16     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 468:	0e c0       	rjmp	.+28     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 46a:	ba 0f       	add	r27, r26
 46c:	62 1f       	adc	r22, r18
 46e:	73 1f       	adc	r23, r19
 470:	84 1f       	adc	r24, r20
 472:	48 f4       	brcc	.+18     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	9e 3f       	cpi	r25, 0xFE	; 254
 480:	08 f0       	brcs	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	b0 cf       	rjmp	.-160    	; 0x3e4 <__addsf3+0x28>
 484:	93 95       	inc	r25
 486:	88 0f       	add	r24, r24
 488:	08 f0       	brcs	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 48a:	99 27       	eor	r25, r25
 48c:	ee 0f       	add	r30, r30
 48e:	97 95       	ror	r25
 490:	87 95       	ror	r24
 492:	08 95       	ret

00000494 <__fixsfsi>:
 494:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
 498:	68 94       	set
 49a:	b1 11       	cpse	r27, r1
 49c:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>
 4a0:	08 95       	ret

000004a2 <__fixunssfsi>:
 4a2:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_splitA>
 4a6:	88 f0       	brcs	.+34     	; 0x4ca <__fixunssfsi+0x28>
 4a8:	9f 57       	subi	r25, 0x7F	; 127
 4aa:	98 f0       	brcs	.+38     	; 0x4d2 <__fixunssfsi+0x30>
 4ac:	b9 2f       	mov	r27, r25
 4ae:	99 27       	eor	r25, r25
 4b0:	b7 51       	subi	r27, 0x17	; 23
 4b2:	b0 f0       	brcs	.+44     	; 0x4e0 <__fixunssfsi+0x3e>
 4b4:	e1 f0       	breq	.+56     	; 0x4ee <__fixunssfsi+0x4c>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	1a f0       	brmi	.+6      	; 0x4c6 <__fixunssfsi+0x24>
 4c0:	ba 95       	dec	r27
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__fixunssfsi+0x14>
 4c4:	14 c0       	rjmp	.+40     	; 0x4ee <__fixunssfsi+0x4c>
 4c6:	b1 30       	cpi	r27, 0x01	; 1
 4c8:	91 f0       	breq	.+36     	; 0x4ee <__fixunssfsi+0x4c>
 4ca:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_zero>
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 4d6:	67 2f       	mov	r22, r23
 4d8:	78 2f       	mov	r23, r24
 4da:	88 27       	eor	r24, r24
 4dc:	b8 5f       	subi	r27, 0xF8	; 248
 4de:	39 f0       	breq	.+14     	; 0x4ee <__fixunssfsi+0x4c>
 4e0:	b9 3f       	cpi	r27, 0xF9	; 249
 4e2:	cc f3       	brlt	.-14     	; 0x4d6 <__fixunssfsi+0x34>
 4e4:	86 95       	lsr	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b3 95       	inc	r27
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__fixunssfsi+0x42>
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__fixunssfsi+0x5c>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <__floatunsisf>:
 500:	e8 94       	clt
 502:	09 c0       	rjmp	.+18     	; 0x516 <__floatsisf+0x12>

00000504 <__floatsisf>:
 504:	97 fb       	bst	r25, 7
 506:	3e f4       	brtc	.+14     	; 0x516 <__floatsisf+0x12>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	99 23       	and	r25, r25
 518:	a9 f0       	breq	.+42     	; 0x544 <__floatsisf+0x40>
 51a:	f9 2f       	mov	r31, r25
 51c:	96 e9       	ldi	r25, 0x96	; 150
 51e:	bb 27       	eor	r27, r27
 520:	93 95       	inc	r25
 522:	f6 95       	lsr	r31
 524:	87 95       	ror	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b7 95       	ror	r27
 52c:	f1 11       	cpse	r31, r1
 52e:	f8 cf       	rjmp	.-16     	; 0x520 <__floatsisf+0x1c>
 530:	fa f4       	brpl	.+62     	; 0x570 <__floatsisf+0x6c>
 532:	bb 0f       	add	r27, r27
 534:	11 f4       	brne	.+4      	; 0x53a <__floatsisf+0x36>
 536:	60 ff       	sbrs	r22, 0
 538:	1b c0       	rjmp	.+54     	; 0x570 <__floatsisf+0x6c>
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	16 c0       	rjmp	.+44     	; 0x570 <__floatsisf+0x6c>
 544:	88 23       	and	r24, r24
 546:	11 f0       	breq	.+4      	; 0x54c <__floatsisf+0x48>
 548:	96 e9       	ldi	r25, 0x96	; 150
 54a:	11 c0       	rjmp	.+34     	; 0x56e <__floatsisf+0x6a>
 54c:	77 23       	and	r23, r23
 54e:	21 f0       	breq	.+8      	; 0x558 <__floatsisf+0x54>
 550:	9e e8       	ldi	r25, 0x8E	; 142
 552:	87 2f       	mov	r24, r23
 554:	76 2f       	mov	r23, r22
 556:	05 c0       	rjmp	.+10     	; 0x562 <__floatsisf+0x5e>
 558:	66 23       	and	r22, r22
 55a:	71 f0       	breq	.+28     	; 0x578 <__floatsisf+0x74>
 55c:	96 e8       	ldi	r25, 0x86	; 134
 55e:	86 2f       	mov	r24, r22
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	2a f0       	brmi	.+10     	; 0x570 <__floatsisf+0x6c>
 566:	9a 95       	dec	r25
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	da f7       	brpl	.-10     	; 0x566 <__floatsisf+0x62>
 570:	88 0f       	add	r24, r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <log10>:
 61c:	0e 94 1e 03 	call	0x63c	; 0x63c <log>
 620:	29 ed       	ldi	r18, 0xD9	; 217
 622:	3b e5       	ldi	r19, 0x5B	; 91
 624:	4e ed       	ldi	r20, 0xDE	; 222
 626:	5e e3       	ldi	r21, 0x3E	; 62
 628:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__mulsf3>
 62c:	16 f0       	brts	.+4      	; 0x632 <log10+0x16>
 62e:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_mpack>
 632:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 636:	68 94       	set
 638:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>

0000063c <log>:
 63c:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_splitA>
 640:	a8 f3       	brcs	.-22     	; 0x62c <log10+0x10>
 642:	99 23       	and	r25, r25
 644:	c1 f3       	breq	.-16     	; 0x636 <log10+0x1a>
 646:	ae f3       	brts	.-22     	; 0x632 <log10+0x16>
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	1f 93       	push	r17
 64e:	0f 93       	push	r16
 650:	ff 92       	push	r15
 652:	c9 2f       	mov	r28, r25
 654:	dd 27       	eor	r29, r29
 656:	88 23       	and	r24, r24
 658:	2a f0       	brmi	.+10     	; 0x664 <log+0x28>
 65a:	21 97       	sbiw	r28, 0x01	; 1
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	da f7       	brpl	.-10     	; 0x65a <log+0x1e>
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	40 e8       	ldi	r20, 0x80	; 128
 66a:	5f eb       	ldi	r21, 0xBF	; 191
 66c:	9f e3       	ldi	r25, 0x3F	; 63
 66e:	88 39       	cpi	r24, 0x98	; 152
 670:	20 f0       	brcs	.+8      	; 0x67a <log+0x3e>
 672:	80 3e       	cpi	r24, 0xE0	; 224
 674:	38 f0       	brcs	.+14     	; 0x684 <log+0x48>
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	8f 77       	andi	r24, 0x7F	; 127
 67a:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 67e:	e8 e6       	ldi	r30, 0x68	; 104
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	04 c0       	rjmp	.+8      	; 0x68c <log+0x50>
 684:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 688:	e5 e9       	ldi	r30, 0x95	; 149
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_powser>
 690:	8b 01       	movw	r16, r22
 692:	be 01       	movw	r22, r28
 694:	ec 01       	movw	r28, r24
 696:	fb 2e       	mov	r15, r27
 698:	6f 57       	subi	r22, 0x7F	; 127
 69a:	71 09       	sbc	r23, r1
 69c:	75 95       	asr	r23
 69e:	77 1f       	adc	r23, r23
 6a0:	88 0b       	sbc	r24, r24
 6a2:	99 0b       	sbc	r25, r25
 6a4:	0e 94 82 02 	call	0x504	; 0x504 <__floatsisf>
 6a8:	28 e1       	ldi	r18, 0x18	; 24
 6aa:	32 e7       	ldi	r19, 0x72	; 114
 6ac:	41 e3       	ldi	r20, 0x31	; 49
 6ae:	5f e3       	ldi	r21, 0x3F	; 63
 6b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3x>
 6b4:	af 2d       	mov	r26, r15
 6b6:	98 01       	movw	r18, r16
 6b8:	ae 01       	movw	r20, r28
 6ba:	ff 90       	pop	r15
 6bc:	0f 91       	pop	r16
 6be:	1f 91       	pop	r17
 6c0:	cf 91       	pop	r28
 6c2:	df 91       	pop	r29
 6c4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3x>
 6c8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>

000006cc <__mulsf3>:
 6cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3x>
 6d0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 6d4:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 6d8:	38 f0       	brcs	.+14     	; 0x6e8 <__mulsf3+0x1c>
 6da:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__mulsf3+0x1c>
 6e0:	95 23       	and	r25, r21
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <__mulsf3+0x1c>
 6e4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 6e8:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 6ec:	11 24       	eor	r1, r1
 6ee:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>

000006f2 <__mulsf3x>:
 6f2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 6f6:	70 f3       	brcs	.-36     	; 0x6d4 <__mulsf3+0x8>

000006f8 <__mulsf3_pse>:
 6f8:	95 9f       	mul	r25, r21
 6fa:	c1 f3       	breq	.-16     	; 0x6ec <__mulsf3+0x20>
 6fc:	95 0f       	add	r25, r21
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	55 1f       	adc	r21, r21
 702:	62 9f       	mul	r22, r18
 704:	f0 01       	movw	r30, r0
 706:	72 9f       	mul	r23, r18
 708:	bb 27       	eor	r27, r27
 70a:	f0 0d       	add	r31, r0
 70c:	b1 1d       	adc	r27, r1
 70e:	63 9f       	mul	r22, r19
 710:	aa 27       	eor	r26, r26
 712:	f0 0d       	add	r31, r0
 714:	b1 1d       	adc	r27, r1
 716:	aa 1f       	adc	r26, r26
 718:	64 9f       	mul	r22, r20
 71a:	66 27       	eor	r22, r22
 71c:	b0 0d       	add	r27, r0
 71e:	a1 1d       	adc	r26, r1
 720:	66 1f       	adc	r22, r22
 722:	82 9f       	mul	r24, r18
 724:	22 27       	eor	r18, r18
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	62 1f       	adc	r22, r18
 72c:	73 9f       	mul	r23, r19
 72e:	b0 0d       	add	r27, r0
 730:	a1 1d       	adc	r26, r1
 732:	62 1f       	adc	r22, r18
 734:	83 9f       	mul	r24, r19
 736:	a0 0d       	add	r26, r0
 738:	61 1d       	adc	r22, r1
 73a:	22 1f       	adc	r18, r18
 73c:	74 9f       	mul	r23, r20
 73e:	33 27       	eor	r19, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	23 1f       	adc	r18, r19
 746:	84 9f       	mul	r24, r20
 748:	60 0d       	add	r22, r0
 74a:	21 1d       	adc	r18, r1
 74c:	82 2f       	mov	r24, r18
 74e:	76 2f       	mov	r23, r22
 750:	6a 2f       	mov	r22, r26
 752:	11 24       	eor	r1, r1
 754:	9f 57       	subi	r25, 0x7F	; 127
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	9a f0       	brmi	.+38     	; 0x780 <__mulsf3_pse+0x88>
 75a:	f1 f0       	breq	.+60     	; 0x798 <__mulsf3_pse+0xa0>
 75c:	88 23       	and	r24, r24
 75e:	4a f0       	brmi	.+18     	; 0x772 <__mulsf3_pse+0x7a>
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	bb 1f       	adc	r27, r27
 766:	66 1f       	adc	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	a9 f7       	brne	.-22     	; 0x75c <__mulsf3_pse+0x64>
 772:	9e 3f       	cpi	r25, 0xFE	; 254
 774:	51 05       	cpc	r21, r1
 776:	80 f0       	brcs	.+32     	; 0x798 <__mulsf3_pse+0xa0>
 778:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 77c:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	e4 f3       	brlt	.-8      	; 0x77c <__mulsf3_pse+0x84>
 784:	98 3e       	cpi	r25, 0xE8	; 232
 786:	d4 f3       	brlt	.-12     	; 0x77c <__mulsf3_pse+0x84>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f7 95       	ror	r31
 792:	e7 95       	ror	r30
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	c1 f7       	brne	.-16     	; 0x788 <__mulsf3_pse+0x90>
 798:	fe 2b       	or	r31, r30
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__fp_mpack>:
 7a6:	9f 3f       	cpi	r25, 0xFF	; 255
 7a8:	31 f0       	breq	.+12     	; 0x7b6 <__fp_mpack_finite+0xc>

000007aa <__fp_mpack_finite>:
 7aa:	91 50       	subi	r25, 0x01	; 1
 7ac:	20 f4       	brcc	.+8      	; 0x7b6 <__fp_mpack_finite+0xc>
 7ae:	87 95       	ror	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_powser>:
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	1f 93       	push	r17
 7c8:	0f 93       	push	r16
 7ca:	ff 92       	push	r15
 7cc:	ef 92       	push	r14
 7ce:	df 92       	push	r13
 7d0:	7b 01       	movw	r14, r22
 7d2:	8c 01       	movw	r16, r24
 7d4:	68 94       	set
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <__fp_powser+0x22>
 7d8:	da 2e       	mov	r13, r26
 7da:	ef 01       	movw	r28, r30
 7dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3x>
 7e0:	fe 01       	movw	r30, r28
 7e2:	e8 94       	clt
 7e4:	a5 91       	lpm	r26, Z+
 7e6:	25 91       	lpm	r18, Z+
 7e8:	35 91       	lpm	r19, Z+
 7ea:	45 91       	lpm	r20, Z+
 7ec:	55 91       	lpm	r21, Z+
 7ee:	a6 f3       	brts	.-24     	; 0x7d8 <__fp_powser+0x16>
 7f0:	ef 01       	movw	r28, r30
 7f2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3x>
 7f6:	fe 01       	movw	r30, r28
 7f8:	97 01       	movw	r18, r14
 7fa:	a8 01       	movw	r20, r16
 7fc:	da 94       	dec	r13
 7fe:	69 f7       	brne	.-38     	; 0x7da <__fp_powser+0x18>
 800:	df 90       	pop	r13
 802:	ef 90       	pop	r14
 804:	ff 90       	pop	r15
 806:	0f 91       	pop	r16
 808:	1f 91       	pop	r17
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	08 95       	ret

00000810 <__umulhisi3>:
 810:	a2 9f       	mul	r26, r18
 812:	b0 01       	movw	r22, r0
 814:	b3 9f       	mul	r27, r19
 816:	c0 01       	movw	r24, r0
 818:	a3 9f       	mul	r26, r19
 81a:	70 0d       	add	r23, r0
 81c:	81 1d       	adc	r24, r1
 81e:	11 24       	eor	r1, r1
 820:	91 1d       	adc	r25, r1
 822:	b2 9f       	mul	r27, r18
 824:	70 0d       	add	r23, r0
 826:	81 1d       	adc	r24, r1
 828:	11 24       	eor	r1, r1
 82a:	91 1d       	adc	r25, r1
 82c:	08 95       	ret

0000082e <_exit>:
 82e:	f8 94       	cli

00000830 <__stop_program>:
 830:	ff cf       	rjmp	.-2      	; 0x830 <__stop_program>
