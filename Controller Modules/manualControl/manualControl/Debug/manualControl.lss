
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  0000029c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000177e  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000beb  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb3  00000000  00000000  00002915  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000348  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e4  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3e  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3d       	cpi	r26, 0xD4	; 212
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ed       	ldi	r26, 0xD4	; 212
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  9e:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:

#include "Joystick.h"

void init_ADC()
{
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <init_ALL>:
}

void init_ALL(void)
{
	//init_USART();
	init_I2C();
  b4:	0e 94 68 00 	call	0xd0	; 0xd0 <init_I2C>
	mpu6050_init();
  b8:	0e 94 a7 00 	call	0x14e	; 0x14e <mpu6050_init>
	init_ADC();
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	SPI_init();
  c0:	0e 94 b5 00 	call	0x16a	; 0x16a <SPI_init>
  c4:	08 95       	ret

000000c6 <main>:
void collect_mpu_data(uint16_t *mpu_data);
void collect_joystick_data(void);

int main(void)
{
	init_ALL();
  c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_ALL>
	float K_AnglePitch = 0, K_UncAnglePitch = 2 * 2;
	float K1DFilterOutput[] = {0,0};	//{angle_prediction, uncertainty_of_prediction}
	float testVal2 = 65.879;
	uint8_t address = 0;
	
	init_nRF();
  ca:	0e 94 00 01 	call	0x200	; 0x200 <init_nRF>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x8>

000000d0 <init_I2C>:
	//Device not Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT);
	while(!(TWCR & (1<<TWINT)));
	
	return TWDR;
}
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	8f 7c       	andi	r24, 0xCF	; 207
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	80 63       	ori	r24, 0x30	; 48
  da:	88 b9       	out	0x08, r24	; 8
  dc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e0:	88 e4       	ldi	r24, 0x48	; 72
  e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e6:	08 95       	ret

000000e8 <I2C_start>:
  e8:	84 ea       	ldi	r24, 0xA4	; 164
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <I2C_start+0xa>
  f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	29 f0       	breq	.+10     	; 0x10c <I2C_start+0x24>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 31       	cpi	r25, 0x10	; 16
 106:	19 f0       	breq	.+6      	; 0x10e <I2C_start+0x26>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <I2C_write>:
 110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <I2C_write+0xe>
 124:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 128:	98 7f       	andi	r25, 0xF8	; 248
 12a:	98 31       	cpi	r25, 0x18	; 24
 12c:	29 f0       	breq	.+10     	; 0x138 <I2C_write+0x28>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	98 32       	cpi	r25, 0x28	; 40
 132:	19 f0       	breq	.+6      	; 0x13a <I2C_write+0x2a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret

0000013c <I2C_stop>:

void I2C_stop(void)
{
	//Stop I2C Communication
	TWCR = STOP;
 13c:	84 e9       	ldi	r24, 0x94	; 148
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	84 fd       	sbrc	r24, 4
 14a:	fd cf       	rjmp	.-6      	; 0x146 <I2C_stop+0xa>
}
 14c:	08 95       	ret

0000014e <mpu6050_init>:

void mpu6050_init(void)
{
	//Initialize mpu6050
	I2C_start();
 14e:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write>
	I2C_write(0x6B);	//Access PWR_MGMT_1 register
 158:	8b e6       	ldi	r24, 0x6B	; 107
 15a:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write>
	I2C_write(0x00);	//Start mpu6050 module
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write>
	I2C_stop();
 164:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_stop>
 168:	08 95       	ret

0000016a <SPI_init>:
	uint8_t data;
	while(!(SPSR & (1<<SPIF)));
	data = SPDR;
	SPSR &= ~(1<<SPIF);
	return SPDR;
}
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	84 b9       	out	0x04, r24	; 4
 16e:	81 e5       	ldi	r24, 0x51	; 81
 170:	8c bd       	out	0x2c, r24	; 44
 172:	08 95       	ret

00000174 <SPI_transmit>:
 174:	cf 93       	push	r28
 176:	8e bd       	out	0x2e, r24	; 46
 178:	0d b4       	in	r0, 0x2d	; 45
 17a:	07 fe       	sbrs	r0, 7
 17c:	19 c0       	rjmp	.+50     	; 0x1b0 <SPI_transmit+0x3c>
 17e:	14 c0       	rjmp	.+40     	; 0x1a8 <SPI_transmit+0x34>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
 18c:	c1 50       	subi	r28, 0x01	; 1
 18e:	49 f4       	brne	.+18     	; 0x1a2 <SPI_transmit+0x2e>
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	89 e1       	ldi	r24, 0x19	; 25
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <SPI_transmit+0x4c>
 1a2:	0d b4       	in	r0, 0x2d	; 45
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	ec cf       	rjmp	.-40     	; 0x180 <SPI_transmit+0xc>
 1a8:	8d b5       	in	r24, 0x2d	; 45
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	8d bd       	out	0x2d, r24	; 45
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <SPI_transmit+0x4c>
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
 1bc:	ca e0       	ldi	r28, 0x0A	; 10
 1be:	f1 cf       	rjmp	.-30     	; 0x1a2 <SPI_transmit+0x2e>
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <conf_CSN>:

uint8_t conf_CSN(uint8_t mode)
{
	if (mode == SELECT)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	49 f4       	brne	.+18     	; 0x1da <conf_CSN+0x16>
	{
		PORTB &= ~(1<<CSN); //Select nRF24L01
 1c8:	2a 98       	cbi	0x05, 2	; 5
		USART_char_transmit("nRF Selected", NEWLINE);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	8a e4       	ldi	r24, 0x4A	; 74
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
	else 
	{
		USART_char_transmit("Invalid Mode Arg - nRF in ambiguous state", NEWLINE);
		return 0;
	}
	return 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	08 95       	ret
	if (mode == SELECT)
	{
		PORTB &= ~(1<<CSN); //Select nRF24L01
		USART_char_transmit("nRF Selected", NEWLINE);
	}
	else if (mode == DESELECT)
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	49 f4       	brne	.+18     	; 0x1f0 <conf_CSN+0x2c>
	{
		PORTB |= (1<<CSN); //Deselect nRF24L01
 1de:	2a 9a       	sbi	0x05, 2	; 5
		USART_char_transmit("nRF Deselected", NEWLINE);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	87 e5       	ldi	r24, 0x57	; 87
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
	else 
	{
		USART_char_transmit("Invalid Mode Arg - nRF in ambiguous state", NEWLINE);
		return 0;
	}
	return 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
		PORTB |= (1<<CSN); //Deselect nRF24L01
		USART_char_transmit("nRF Deselected", NEWLINE);
	}
	else 
	{
		USART_char_transmit("Invalid Mode Arg - nRF in ambiguous state", NEWLINE);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	86 e6       	ldi	r24, 0x66	; 102
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
		return 0;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
 1fe:	08 95       	ret

00000200 <init_nRF>:

void init_nRF(void)
{
	uint8_t status;
	status = conf_CSN(SELECT);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <conf_CSN>
	if (status == 0)
 206:	81 11       	cpse	r24, r1
 208:	07 c0       	rjmp	.+14     	; 0x218 <init_nRF+0x18>
	{
		USART_char_transmit("Init Failed with Error status S0", NEWLINE);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	80 e9       	ldi	r24, 0x90	; 144
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
		return status;
 216:	08 95       	ret
	}
	status = SPI_transmit((W_REGISTER) << 5 | NRF_CONFIG);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 ba 00 	call	0x174	; 0x174 <SPI_transmit>
	if (status == 0)
 21e:	88 23       	and	r24, r24
 220:	71 f0       	breq	.+28     	; 0x23e <init_nRF+0x3e>
	{
		return 0;
	}
	SPI_transmit(1 << PWR_UP);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	0e 94 ba 00 	call	0x174	; 0x174 <SPI_transmit>
	if (status == 0)
	{
		return 0;
	}
	
	status = conf_CSN(DESELECT);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <conf_CSN>
	if (status == 0)
 22e:	81 11       	cpse	r24, r1
 230:	06 c0       	rjmp	.+12     	; 0x23e <init_nRF+0x3e>
	{
		USART_char_transmit("Init Failed with Error status DS0", NEWLINE);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	81 eb       	ldi	r24, 0xB1	; 177
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 20 01 	call	0x240	; 0x240 <USART_char_transmit>
 23e:	08 95       	ret

00000240 <USART_char_transmit>:
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
	UDR0 = 0x0A;	//New Line
}

void USART_char_transmit(const char *buffer, int mode)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	if (mode == NULL)
 244:	61 15       	cp	r22, r1
 246:	71 05       	cpc	r23, r1
 248:	59 f0       	breq	.+22     	; 0x260 <USART_char_transmit+0x20>
	{
		mode = NONE;
	}
	
	if (mode == LOGGING)
 24a:	61 30       	cpi	r22, 0x01	; 1
 24c:	71 05       	cpc	r23, r1
 24e:	41 f4       	brne	.+16     	; 0x260 <USART_char_transmit+0x20>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	20 81       	ld	r18, Z
 256:	25 ff       	sbrs	r18, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <USART_char_transmit+0x14>
		UDR0 = 0x1B;
 25a:	2b e1       	ldi	r18, 0x1B	; 27
 25c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	while(*buffer)
 260:	fc 01       	movw	r30, r24
 262:	20 81       	ld	r18, Z
 264:	22 23       	and	r18, r18
 266:	69 f0       	breq	.+26     	; 0x282 <USART_char_transmit+0x42>
 268:	dc 01       	movw	r26, r24
 26a:	11 96       	adiw	r26, 0x01	; 1
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 26c:	e0 ec       	ldi	r30, 0xC0	; 192
 26e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *buffer; //set UDR0 to character
 270:	c6 ec       	ldi	r28, 0xC6	; 198
 272:	d0 e0       	ldi	r29, 0x00	; 0
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 274:	90 81       	ld	r25, Z
 276:	95 ff       	sbrs	r25, 5
 278:	fd cf       	rjmp	.-6      	; 0x274 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
 27a:	28 83       	st	Y, r18
	if (mode == LOGGING)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
 27c:	2d 91       	ld	r18, X+
 27e:	21 11       	cpse	r18, r1
 280:	f9 cf       	rjmp	.-14     	; 0x274 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
		buffer++;
	}
	if (1)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 282:	e0 ec       	ldi	r30, 0xC0	; 192
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	85 ff       	sbrs	r24, 5
 28a:	fd cf       	rjmp	.-6      	; 0x286 <USART_char_transmit+0x46>
		UDR0 = 0x0A;	
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
