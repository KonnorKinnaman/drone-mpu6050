
manualControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000810  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000810  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014dc  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac6  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a27  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  000033e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d1  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000092a  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000046a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__data_load_end+0x9e>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e0 e1       	ldi	r30, 0x10	; 16
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	ae 30       	cpi	r26, 0x0E	; 14
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>
  e4:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  e8:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <init_ADC>:
void init_ADC()
{
	//DDRC &= ~(1<<DDC0);
	//PORTC |= (1<<PORTC0);
	//ADMUX = 0x00;
	ADMUX = (1<<REFS0);
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  f6:	87 e8       	ldi	r24, 0x87	; 135
  f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	08 95       	ret

000000fe <read_ADC>:
uint16_t read_ADC(uint8_t channel)
{
	uint8_t value1;
	uint8_t value2;
	uint16_t result;
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	
	while (ADCSRA & (1<<ADSC));
 116:	80 81       	ld	r24, Z
 118:	86 fd       	sbrc	r24, 6
 11a:	fd cf       	rjmp	.-6      	; 0x116 <read_ADC+0x18>
	result = ADC;
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return result;
 124:	08 95       	ret

00000126 <init_ALL>:
}

void init_ALL(void)
{
	//init_USART();
	init_I2C();
 126:	0e 94 b3 00 	call	0x166	; 0x166 <init_I2C>
	mpu6050_init();
 12a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <mpu6050_init>
	init_ADC();
 12e:	0e 94 78 00 	call	0xf0	; 0xf0 <init_ADC>
 132:	08 95       	ret

00000134 <main>:
void collect_mpu_data(uint16_t *mpu_data);
void collect_joystick_data(void);

int main(void)
{
	init_ALL();
 134:	0e 94 93 00 	call	0x126	; 0x126 <init_ALL>
		//USART_int_transmit(gy);
		//USART_char_transmit("Accelerometer Output");
		//USART_int_transmit(ax);
		//USART_int_transmit(ay);
		
		joystick_y = read_ADC(JOYSTICK_Y);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 7f 00 	call	0xfe	; 0xfe <read_ADC>
 13e:	ec 01       	movw	r28, r24
		USART_char_transmit("Joystick Data", NEWLINE);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 a0 01 	call	0x340	; 0x340 <USART_char_transmit>
		USART_int_transmit(joystick_y);
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 00 01 	call	0x200	; 0x200 <USART_int_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x24>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x2e>
 162:	00 00       	nop
 164:	e9 cf       	rjmp	.-46     	; 0x138 <main+0x4>

00000166 <init_I2C>:
	//Device not Acknowledged
	TWCR = (1<<TWEN)|(1<<TWINT);
	while(!(TWCR & (1<<TWINT)));
	
	return TWDR;
}
 166:	87 b1       	in	r24, 0x07	; 7
 168:	8f 7c       	andi	r24, 0xCF	; 207
 16a:	87 b9       	out	0x07, r24	; 7
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	80 63       	ori	r24, 0x30	; 48
 170:	88 b9       	out	0x08, r24	; 8
 172:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 176:	88 e4       	ldi	r24, 0x48	; 72
 178:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 17c:	08 95       	ret

0000017e <I2C_start>:
 17e:	84 ea       	ldi	r24, 0xA4	; 164
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	ec f7       	brge	.-6      	; 0x188 <I2C_start+0xa>
 18e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 192:	98 7f       	andi	r25, 0xF8	; 248
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	29 f0       	breq	.+10     	; 0x1a2 <I2C_start+0x24>
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 31       	cpi	r25, 0x10	; 16
 19c:	19 f0       	breq	.+6      	; 0x1a4 <I2C_start+0x26>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret

000001a6 <I2C_write>:
 1a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <I2C_write+0xe>
 1ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1be:	98 7f       	andi	r25, 0xF8	; 248
 1c0:	98 31       	cpi	r25, 0x18	; 24
 1c2:	29 f0       	breq	.+10     	; 0x1ce <I2C_write+0x28>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	98 32       	cpi	r25, 0x28	; 40
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <I2C_write+0x2a>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	08 95       	ret

000001d2 <I2C_stop>:

void I2C_stop(void)
{
	//Stop I2C Communication
	TWCR = STOP;
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 fd       	sbrc	r24, 4
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <I2C_stop+0xa>
}
 1e2:	08 95       	ret

000001e4 <mpu6050_init>:

void mpu6050_init(void)
{
	//Initialize mpu6050
	I2C_start();
 1e4:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_start>
	I2C_write(MPU6050_ADDR << 1);	//Send address with write bit
 1e8:	80 ed       	ldi	r24, 0xD0	; 208
 1ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_write>
	I2C_write(0x6B);	//Access PWR_MGMT_1 register
 1ee:	8b e6       	ldi	r24, 0x6B	; 107
 1f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_write>
	I2C_write(0x00);	//Start mpu6050 module
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_write>
	I2C_stop();
 1fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_stop>
 1fe:	08 95       	ret

00000200 <USART_int_transmit>:
	UBRR0L = ubbr;
}


void USART_int_transmit(uint16_t data)
{
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	2a 97       	sbiw	r28, 0x0a	; 10
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	8c 01       	movw	r16, r24
	//Exception handler for 0
	if (data == 0)
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	49 f4       	brne	.+18     	; 0x23c <USART_int_transmit+0x3c>
	{
		while ((UCSR0A & (1<<UDRE0))==0);
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	85 ff       	sbrs	r24, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <USART_int_transmit+0x2e>
		UDR0 = 0x30;
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23a:	69 c0       	rjmp	.+210    	; 0x30e <USART_int_transmit+0x10e>
	}
	else
	{
		int nDigits = log10(data)+1;
 23c:	bc 01       	movw	r22, r24
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 6f 02 	call	0x4de	; 0x4de <__floatunsisf>
 246:	0e 94 fd 02 	call	0x5fa	; 0x5fa <log10>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	0e 94 cd 01 	call	0x39a	; 0x39a <__addsf3>
 256:	0e 94 39 02 	call	0x472	; 0x472 <__fixsfsi>
 25a:	4b 01       	movw	r8, r22
 25c:	5c 01       	movw	r10, r24
		int numParser;
		char transmit_buffer[10];
		
		//Break data into 'digits' and store each digit as it's ASCII equivalent value
		for (int i = nDigits; i > 0; i--)
 25e:	16 16       	cp	r1, r22
 260:	17 06       	cpc	r1, r23
 262:	bc f5       	brge	.+110    	; 0x2d2 <USART_int_transmit+0xd2>
 264:	fb 01       	movw	r30, r22
 266:	31 96       	adiw	r30, 0x01	; 1
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	8c 0f       	add	r24, r28
 26e:	9d 1f       	adc	r25, r29
 270:	e8 0f       	add	r30, r24
 272:	f9 1f       	adc	r31, r25
 274:	7e 01       	movw	r14, r28
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	e9 0e       	add	r14, r25
 27a:	f1 1c       	adc	r15, r1
		{
			numParser = data % 10;
 27c:	98 01       	movw	r18, r16
 27e:	ad ec       	ldi	r26, 0xCD	; 205
 280:	bc ec       	ldi	r27, 0xCC	; 204
 282:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__umulhisi3>
 286:	ac 01       	movw	r20, r24
 288:	56 95       	lsr	r21
 28a:	47 95       	ror	r20
 28c:	56 95       	lsr	r21
 28e:	47 95       	ror	r20
 290:	56 95       	lsr	r21
 292:	47 95       	ror	r20
 294:	ca 01       	movw	r24, r20
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	48 0f       	add	r20, r24
 2a8:	59 1f       	adc	r21, r25
 2aa:	d8 01       	movw	r26, r16
 2ac:	a4 1b       	sub	r26, r20
 2ae:	b5 0b       	sbc	r27, r21
 2b0:	ad 01       	movw	r20, r26
			data = data / 10;
 2b2:	ad ec       	ldi	r26, 0xCD	; 205
 2b4:	bc ec       	ldi	r27, 0xCC	; 204
 2b6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__umulhisi3>
 2ba:	8c 01       	movw	r16, r24
 2bc:	16 95       	lsr	r17
 2be:	07 95       	ror	r16
 2c0:	16 95       	lsr	r17
 2c2:	07 95       	ror	r16
 2c4:	16 95       	lsr	r17
 2c6:	07 95       	ror	r16
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
 2c8:	40 5d       	subi	r20, 0xD0	; 208
 2ca:	42 93       	st	-Z, r20
		int nDigits = log10(data)+1;
		int numParser;
		char transmit_buffer[10];
		
		//Break data into 'digits' and store each digit as it's ASCII equivalent value
		for (int i = nDigits; i > 0; i--)
 2cc:	ee 15       	cp	r30, r14
 2ce:	ff 05       	cpc	r31, r15
 2d0:	a9 f6       	brne	.-86     	; 0x27c <USART_int_transmit+0x7c>
			data = data / 10;
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
 2d2:	c4 01       	movw	r24, r8
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	91 05       	cpc	r25, r1
 2da:	cc f0       	brlt	.+50     	; 0x30e <USART_int_transmit+0x10e>
 2dc:	ae 01       	movw	r20, r28
 2de:	4e 5f       	subi	r20, 0xFE	; 254
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	4c 01       	movw	r8, r24
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	8c 0f       	add	r24, r28
 2ea:	9d 1f       	adc	r25, r29
 2ec:	88 0e       	add	r8, r24
 2ee:	99 1e       	adc	r9, r25
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 2f0:	e0 ec       	ldi	r30, 0xC0	; 192
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = transmit_buffer[i];
 2f4:	26 ec       	ldi	r18, 0xC6	; 198
 2f6:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 2f8:	80 81       	ld	r24, Z
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <USART_int_transmit+0xf8>
			UDR0 = transmit_buffer[i];
 2fe:	da 01       	movw	r26, r20
 300:	8d 91       	ld	r24, X+
 302:	ad 01       	movw	r20, r26
 304:	d9 01       	movw	r26, r18
 306:	8c 93       	st	X, r24
			data = data / 10;
			transmit_buffer[i] = numParser + '0';	//Convert Decimal to ASCII
		}
		
		//Transmit data
		for (int i = 1; i < nDigits+1; i++)
 308:	84 16       	cp	r8, r20
 30a:	95 06       	cpc	r9, r21
 30c:	a9 f7       	brne	.-22     	; 0x2f8 <USART_int_transmit+0xf8>
		{
			while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
			UDR0 = transmit_buffer[i];
		}
	}
	while ((UCSR0A & (1<<UDRE0))==0);	//wait for flag to be set
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	85 ff       	sbrs	r24, 5
 316:	fd cf       	rjmp	.-6      	; 0x312 <USART_int_transmit+0x112>
	UDR0 = 0x0A;	//New Line
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 31e:	2a 96       	adiw	r28, 0x0a	; 10
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8
 33e:	08 95       	ret

00000340 <USART_char_transmit>:

void USART_char_transmit(const char *buffer, int mode)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
	if (mode == NULL)
 344:	61 15       	cp	r22, r1
 346:	71 05       	cpc	r23, r1
 348:	59 f0       	breq	.+22     	; 0x360 <USART_char_transmit+0x20>
	{
		mode = NONE;
	}
	
	if (mode == LOGGING)
 34a:	61 30       	cpi	r22, 0x01	; 1
 34c:	71 05       	cpc	r23, r1
 34e:	41 f4       	brne	.+16     	; 0x360 <USART_char_transmit+0x20>
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 350:	e0 ec       	ldi	r30, 0xC0	; 192
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	20 81       	ld	r18, Z
 356:	25 ff       	sbrs	r18, 5
 358:	fd cf       	rjmp	.-6      	; 0x354 <USART_char_transmit+0x14>
		UDR0 = 0x1B;
 35a:	2b e1       	ldi	r18, 0x1B	; 27
 35c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	while(*buffer)
 360:	fc 01       	movw	r30, r24
 362:	20 81       	ld	r18, Z
 364:	22 23       	and	r18, r18
 366:	69 f0       	breq	.+26     	; 0x382 <USART_char_transmit+0x42>
 368:	dc 01       	movw	r26, r24
 36a:	11 96       	adiw	r26, 0x01	; 1
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 36c:	e0 ec       	ldi	r30, 0xC0	; 192
 36e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *buffer; //set UDR0 to character
 370:	c6 ec       	ldi	r28, 0xC6	; 198
 372:	d0 e0       	ldi	r29, 0x00	; 0
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 374:	90 81       	ld	r25, Z
 376:	95 ff       	sbrs	r25, 5
 378:	fd cf       	rjmp	.-6      	; 0x374 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
 37a:	28 83       	st	Y, r18
	if (mode == LOGGING)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
		UDR0 = 0x1B;
	}
	while(*buffer)
 37c:	2d 91       	ld	r18, X+
 37e:	21 11       	cpse	r18, r1
 380:	f9 cf       	rjmp	.-14     	; 0x374 <USART_char_transmit+0x34>
		UDR0 = *buffer; //set UDR0 to character
		buffer++;
	}
	if (1)
	{
		while((UCSR0A & (1<<UDRE0)) == 0); //wait for flag to be set
 382:	e0 ec       	ldi	r30, 0xC0	; 192
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	85 ff       	sbrs	r24, 5
 38a:	fd cf       	rjmp	.-6      	; 0x386 <USART_char_transmit+0x46>
		UDR0 = 0x0A;	
 38c:	8a e0       	ldi	r24, 0x0A	; 10
 38e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <__subsf3>:
 398:	50 58       	subi	r21, 0x80	; 128

0000039a <__addsf3>:
 39a:	bb 27       	eor	r27, r27
 39c:	aa 27       	eor	r26, r26
 39e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__addsf3x>
 3a2:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_round>
 3a6:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_pscA>
 3aa:	38 f0       	brcs	.+14     	; 0x3ba <__addsf3+0x20>
 3ac:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_pscB>
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__addsf3+0x20>
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <__addsf3+0x28>
 3b4:	9f 3f       	cpi	r25, 0xFF	; 255
 3b6:	19 f4       	brne	.+6      	; 0x3be <__addsf3+0x24>
 3b8:	26 f4       	brtc	.+8      	; 0x3c2 <__addsf3+0x28>
 3ba:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_nan>
 3be:	0e f4       	brtc	.+2      	; 0x3c2 <__addsf3+0x28>
 3c0:	e0 95       	com	r30
 3c2:	e7 fb       	bst	r30, 7
 3c4:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>

000003c8 <__addsf3x>:
 3c8:	e9 2f       	mov	r30, r25
 3ca:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_split3>
 3ce:	58 f3       	brcs	.-42     	; 0x3a6 <__addsf3+0xc>
 3d0:	ba 17       	cp	r27, r26
 3d2:	62 07       	cpc	r22, r18
 3d4:	73 07       	cpc	r23, r19
 3d6:	84 07       	cpc	r24, r20
 3d8:	95 07       	cpc	r25, r21
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__addsf3x+0x1c>
 3dc:	79 f4       	brne	.+30     	; 0x3fc <__addsf3x+0x34>
 3de:	a6 f5       	brtc	.+104    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3e0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_zero>
 3e4:	0e f4       	brtc	.+2      	; 0x3e8 <__addsf3x+0x20>
 3e6:	e0 95       	com	r30
 3e8:	0b 2e       	mov	r0, r27
 3ea:	ba 2f       	mov	r27, r26
 3ec:	a0 2d       	mov	r26, r0
 3ee:	0b 01       	movw	r0, r22
 3f0:	b9 01       	movw	r22, r18
 3f2:	90 01       	movw	r18, r0
 3f4:	0c 01       	movw	r0, r24
 3f6:	ca 01       	movw	r24, r20
 3f8:	a0 01       	movw	r20, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	ff 27       	eor	r31, r31
 3fe:	59 1b       	sub	r21, r25
 400:	99 f0       	breq	.+38     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 402:	59 3f       	cpi	r21, 0xF9	; 249
 404:	50 f4       	brcc	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 406:	50 3e       	cpi	r21, 0xE0	; 224
 408:	68 f1       	brcs	.+90     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 40a:	1a 16       	cp	r1, r26
 40c:	f0 40       	sbci	r31, 0x00	; 0
 40e:	a2 2f       	mov	r26, r18
 410:	23 2f       	mov	r18, r19
 412:	34 2f       	mov	r19, r20
 414:	44 27       	eor	r20, r20
 416:	58 5f       	subi	r21, 0xF8	; 248
 418:	f3 cf       	rjmp	.-26     	; 0x400 <__EEPROM_REGION_LENGTH__>
 41a:	46 95       	lsr	r20
 41c:	37 95       	ror	r19
 41e:	27 95       	ror	r18
 420:	a7 95       	ror	r26
 422:	f0 40       	sbci	r31, 0x00	; 0
 424:	53 95       	inc	r21
 426:	c9 f7       	brne	.-14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 428:	7e f4       	brtc	.+30     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 42a:	1f 16       	cp	r1, r31
 42c:	ba 0b       	sbc	r27, r26
 42e:	62 0b       	sbc	r22, r18
 430:	73 0b       	sbc	r23, r19
 432:	84 0b       	sbc	r24, r20
 434:	ba f0       	brmi	.+46     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 436:	91 50       	subi	r25, 0x01	; 1
 438:	a1 f0       	breq	.+40     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 43a:	ff 0f       	add	r31, r31
 43c:	bb 1f       	adc	r27, r27
 43e:	66 1f       	adc	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	c2 f7       	brpl	.-16     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 446:	0e c0       	rjmp	.+28     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 448:	ba 0f       	add	r27, r26
 44a:	62 1f       	adc	r22, r18
 44c:	73 1f       	adc	r23, r19
 44e:	84 1f       	adc	r24, r20
 450:	48 f4       	brcc	.+18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 452:	87 95       	ror	r24
 454:	77 95       	ror	r23
 456:	67 95       	ror	r22
 458:	b7 95       	ror	r27
 45a:	f7 95       	ror	r31
 45c:	9e 3f       	cpi	r25, 0xFE	; 254
 45e:	08 f0       	brcs	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	b0 cf       	rjmp	.-160    	; 0x3c2 <__addsf3+0x28>
 462:	93 95       	inc	r25
 464:	88 0f       	add	r24, r24
 466:	08 f0       	brcs	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 468:	99 27       	eor	r25, r25
 46a:	ee 0f       	add	r30, r30
 46c:	97 95       	ror	r25
 46e:	87 95       	ror	r24
 470:	08 95       	ret

00000472 <__fixsfsi>:
 472:	0e 94 40 02 	call	0x480	; 0x480 <__fixunssfsi>
 476:	68 94       	set
 478:	b1 11       	cpse	r27, r1
 47a:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_szero>
 47e:	08 95       	ret

00000480 <__fixunssfsi>:
 480:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fp_splitA>
 484:	88 f0       	brcs	.+34     	; 0x4a8 <__fixunssfsi+0x28>
 486:	9f 57       	subi	r25, 0x7F	; 127
 488:	98 f0       	brcs	.+38     	; 0x4b0 <__fixunssfsi+0x30>
 48a:	b9 2f       	mov	r27, r25
 48c:	99 27       	eor	r25, r25
 48e:	b7 51       	subi	r27, 0x17	; 23
 490:	b0 f0       	brcs	.+44     	; 0x4be <__fixunssfsi+0x3e>
 492:	e1 f0       	breq	.+56     	; 0x4cc <__fixunssfsi+0x4c>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	1a f0       	brmi	.+6      	; 0x4a4 <__fixunssfsi+0x24>
 49e:	ba 95       	dec	r27
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__fixunssfsi+0x14>
 4a2:	14 c0       	rjmp	.+40     	; 0x4cc <__fixunssfsi+0x4c>
 4a4:	b1 30       	cpi	r27, 0x01	; 1
 4a6:	91 f0       	breq	.+36     	; 0x4cc <__fixunssfsi+0x4c>
 4a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_zero>
 4ac:	b1 e0       	ldi	r27, 0x01	; 1
 4ae:	08 95       	ret
 4b0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_zero>
 4b4:	67 2f       	mov	r22, r23
 4b6:	78 2f       	mov	r23, r24
 4b8:	88 27       	eor	r24, r24
 4ba:	b8 5f       	subi	r27, 0xF8	; 248
 4bc:	39 f0       	breq	.+14     	; 0x4cc <__fixunssfsi+0x4c>
 4be:	b9 3f       	cpi	r27, 0xF9	; 249
 4c0:	cc f3       	brlt	.-14     	; 0x4b4 <__fixunssfsi+0x34>
 4c2:	86 95       	lsr	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b3 95       	inc	r27
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__fixunssfsi+0x42>
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__fixunssfsi+0x5c>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__floatunsisf>:
 4de:	e8 94       	clt
 4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <__floatsisf+0x12>

000004e2 <__floatsisf>:
 4e2:	97 fb       	bst	r25, 7
 4e4:	3e f4       	brtc	.+14     	; 0x4f4 <__floatsisf+0x12>
 4e6:	90 95       	com	r25
 4e8:	80 95       	com	r24
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	99 23       	and	r25, r25
 4f6:	a9 f0       	breq	.+42     	; 0x522 <__floatsisf+0x40>
 4f8:	f9 2f       	mov	r31, r25
 4fa:	96 e9       	ldi	r25, 0x96	; 150
 4fc:	bb 27       	eor	r27, r27
 4fe:	93 95       	inc	r25
 500:	f6 95       	lsr	r31
 502:	87 95       	ror	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b7 95       	ror	r27
 50a:	f1 11       	cpse	r31, r1
 50c:	f8 cf       	rjmp	.-16     	; 0x4fe <__floatsisf+0x1c>
 50e:	fa f4       	brpl	.+62     	; 0x54e <__floatsisf+0x6c>
 510:	bb 0f       	add	r27, r27
 512:	11 f4       	brne	.+4      	; 0x518 <__floatsisf+0x36>
 514:	60 ff       	sbrs	r22, 0
 516:	1b c0       	rjmp	.+54     	; 0x54e <__floatsisf+0x6c>
 518:	6f 5f       	subi	r22, 0xFF	; 255
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	16 c0       	rjmp	.+44     	; 0x54e <__floatsisf+0x6c>
 522:	88 23       	and	r24, r24
 524:	11 f0       	breq	.+4      	; 0x52a <__floatsisf+0x48>
 526:	96 e9       	ldi	r25, 0x96	; 150
 528:	11 c0       	rjmp	.+34     	; 0x54c <__floatsisf+0x6a>
 52a:	77 23       	and	r23, r23
 52c:	21 f0       	breq	.+8      	; 0x536 <__floatsisf+0x54>
 52e:	9e e8       	ldi	r25, 0x8E	; 142
 530:	87 2f       	mov	r24, r23
 532:	76 2f       	mov	r23, r22
 534:	05 c0       	rjmp	.+10     	; 0x540 <__floatsisf+0x5e>
 536:	66 23       	and	r22, r22
 538:	71 f0       	breq	.+28     	; 0x556 <__floatsisf+0x74>
 53a:	96 e8       	ldi	r25, 0x86	; 134
 53c:	86 2f       	mov	r24, r22
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	2a f0       	brmi	.+10     	; 0x54e <__floatsisf+0x6c>
 544:	9a 95       	dec	r25
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	da f7       	brpl	.-10     	; 0x544 <__floatsisf+0x62>
 54e:	88 0f       	add	r24, r24
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__fp_inf>:
 558:	97 f9       	bld	r25, 7
 55a:	9f 67       	ori	r25, 0x7F	; 127
 55c:	80 e8       	ldi	r24, 0x80	; 128
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	08 95       	ret

00000564 <__fp_nan>:
 564:	9f ef       	ldi	r25, 0xFF	; 255
 566:	80 ec       	ldi	r24, 0xC0	; 192
 568:	08 95       	ret

0000056a <__fp_pscA>:
 56a:	00 24       	eor	r0, r0
 56c:	0a 94       	dec	r0
 56e:	16 16       	cp	r1, r22
 570:	17 06       	cpc	r1, r23
 572:	18 06       	cpc	r1, r24
 574:	09 06       	cpc	r0, r25
 576:	08 95       	ret

00000578 <__fp_pscB>:
 578:	00 24       	eor	r0, r0
 57a:	0a 94       	dec	r0
 57c:	12 16       	cp	r1, r18
 57e:	13 06       	cpc	r1, r19
 580:	14 06       	cpc	r1, r20
 582:	05 06       	cpc	r0, r21
 584:	08 95       	ret

00000586 <__fp_round>:
 586:	09 2e       	mov	r0, r25
 588:	03 94       	inc	r0
 58a:	00 0c       	add	r0, r0
 58c:	11 f4       	brne	.+4      	; 0x592 <__fp_round+0xc>
 58e:	88 23       	and	r24, r24
 590:	52 f0       	brmi	.+20     	; 0x5a6 <__fp_round+0x20>
 592:	bb 0f       	add	r27, r27
 594:	40 f4       	brcc	.+16     	; 0x5a6 <__fp_round+0x20>
 596:	bf 2b       	or	r27, r31
 598:	11 f4       	brne	.+4      	; 0x59e <__fp_round+0x18>
 59a:	60 ff       	sbrs	r22, 0
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <__fp_round+0x20>
 59e:	6f 5f       	subi	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__fp_split3>:
 5a8:	57 fd       	sbrc	r21, 7
 5aa:	90 58       	subi	r25, 0x80	; 128
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	59 f0       	breq	.+22     	; 0x5c8 <__fp_splitA+0x10>
 5b2:	5f 3f       	cpi	r21, 0xFF	; 255
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <__fp_splitA+0x1a>
 5b6:	47 95       	ror	r20

000005b8 <__fp_splitA>:
 5b8:	88 0f       	add	r24, r24
 5ba:	97 fb       	bst	r25, 7
 5bc:	99 1f       	adc	r25, r25
 5be:	61 f0       	breq	.+24     	; 0x5d8 <__fp_splitA+0x20>
 5c0:	9f 3f       	cpi	r25, 0xFF	; 255
 5c2:	79 f0       	breq	.+30     	; 0x5e2 <__fp_splitA+0x2a>
 5c4:	87 95       	ror	r24
 5c6:	08 95       	ret
 5c8:	12 16       	cp	r1, r18
 5ca:	13 06       	cpc	r1, r19
 5cc:	14 06       	cpc	r1, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <__fp_split3+0xe>
 5d2:	46 95       	lsr	r20
 5d4:	f1 df       	rcall	.-30     	; 0x5b8 <__fp_splitA>
 5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <__fp_splitA+0x30>
 5d8:	16 16       	cp	r1, r22
 5da:	17 06       	cpc	r1, r23
 5dc:	18 06       	cpc	r1, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	f1 cf       	rjmp	.-30     	; 0x5c4 <__fp_splitA+0xc>
 5e2:	86 95       	lsr	r24
 5e4:	71 05       	cpc	r23, r1
 5e6:	61 05       	cpc	r22, r1
 5e8:	08 94       	sec
 5ea:	08 95       	ret

000005ec <__fp_zero>:
 5ec:	e8 94       	clt

000005ee <__fp_szero>:
 5ee:	bb 27       	eor	r27, r27
 5f0:	66 27       	eor	r22, r22
 5f2:	77 27       	eor	r23, r23
 5f4:	cb 01       	movw	r24, r22
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <log10>:
 5fa:	0e 94 0d 03 	call	0x61a	; 0x61a <log>
 5fe:	29 ed       	ldi	r18, 0xD9	; 217
 600:	3b e5       	ldi	r19, 0x5B	; 91
 602:	4e ed       	ldi	r20, 0xDE	; 222
 604:	5e e3       	ldi	r21, 0x3E	; 62
 606:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__mulsf3>
 60a:	16 f0       	brts	.+4      	; 0x610 <log10+0x16>
 60c:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_mpack>
 610:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_nan>
 614:	68 94       	set
 616:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>

0000061a <log>:
 61a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fp_splitA>
 61e:	a8 f3       	brcs	.-22     	; 0x60a <log10+0x10>
 620:	99 23       	and	r25, r25
 622:	c1 f3       	breq	.-16     	; 0x614 <log10+0x1a>
 624:	ae f3       	brts	.-22     	; 0x610 <log10+0x16>
 626:	df 93       	push	r29
 628:	cf 93       	push	r28
 62a:	1f 93       	push	r17
 62c:	0f 93       	push	r16
 62e:	ff 92       	push	r15
 630:	c9 2f       	mov	r28, r25
 632:	dd 27       	eor	r29, r29
 634:	88 23       	and	r24, r24
 636:	2a f0       	brmi	.+10     	; 0x642 <log+0x28>
 638:	21 97       	sbiw	r28, 0x01	; 1
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	da f7       	brpl	.-10     	; 0x638 <log+0x1e>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	40 e8       	ldi	r20, 0x80	; 128
 648:	5f eb       	ldi	r21, 0xBF	; 191
 64a:	9f e3       	ldi	r25, 0x3F	; 63
 64c:	88 39       	cpi	r24, 0x98	; 152
 64e:	20 f0       	brcs	.+8      	; 0x658 <log+0x3e>
 650:	80 3e       	cpi	r24, 0xE0	; 224
 652:	38 f0       	brcs	.+14     	; 0x662 <log+0x48>
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	8f 77       	andi	r24, 0x7F	; 127
 658:	0e 94 cd 01 	call	0x39a	; 0x39a <__addsf3>
 65c:	e8 e6       	ldi	r30, 0x68	; 104
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	04 c0       	rjmp	.+8      	; 0x66a <log+0x50>
 662:	0e 94 cd 01 	call	0x39a	; 0x39a <__addsf3>
 666:	e5 e9       	ldi	r30, 0x95	; 149
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_powser>
 66e:	8b 01       	movw	r16, r22
 670:	be 01       	movw	r22, r28
 672:	ec 01       	movw	r28, r24
 674:	fb 2e       	mov	r15, r27
 676:	6f 57       	subi	r22, 0x7F	; 127
 678:	71 09       	sbc	r23, r1
 67a:	75 95       	asr	r23
 67c:	77 1f       	adc	r23, r23
 67e:	88 0b       	sbc	r24, r24
 680:	99 0b       	sbc	r25, r25
 682:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__floatsisf>
 686:	28 e1       	ldi	r18, 0x18	; 24
 688:	32 e7       	ldi	r19, 0x72	; 114
 68a:	41 e3       	ldi	r20, 0x31	; 49
 68c:	5f e3       	ldi	r21, 0x3F	; 63
 68e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__mulsf3x>
 692:	af 2d       	mov	r26, r15
 694:	98 01       	movw	r18, r16
 696:	ae 01       	movw	r20, r28
 698:	ff 90       	pop	r15
 69a:	0f 91       	pop	r16
 69c:	1f 91       	pop	r17
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__addsf3x>
 6a6:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_round>

000006aa <__mulsf3>:
 6aa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__mulsf3x>
 6ae:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_round>
 6b2:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_pscA>
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <__mulsf3+0x1c>
 6b8:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_pscB>
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <__mulsf3+0x1c>
 6be:	95 23       	and	r25, r21
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <__mulsf3+0x1c>
 6c2:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>
 6c6:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_nan>
 6ca:	11 24       	eor	r1, r1
 6cc:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_szero>

000006d0 <__mulsf3x>:
 6d0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_split3>
 6d4:	70 f3       	brcs	.-36     	; 0x6b2 <__mulsf3+0x8>

000006d6 <__mulsf3_pse>:
 6d6:	95 9f       	mul	r25, r21
 6d8:	c1 f3       	breq	.-16     	; 0x6ca <__mulsf3+0x20>
 6da:	95 0f       	add	r25, r21
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	55 1f       	adc	r21, r21
 6e0:	62 9f       	mul	r22, r18
 6e2:	f0 01       	movw	r30, r0
 6e4:	72 9f       	mul	r23, r18
 6e6:	bb 27       	eor	r27, r27
 6e8:	f0 0d       	add	r31, r0
 6ea:	b1 1d       	adc	r27, r1
 6ec:	63 9f       	mul	r22, r19
 6ee:	aa 27       	eor	r26, r26
 6f0:	f0 0d       	add	r31, r0
 6f2:	b1 1d       	adc	r27, r1
 6f4:	aa 1f       	adc	r26, r26
 6f6:	64 9f       	mul	r22, r20
 6f8:	66 27       	eor	r22, r22
 6fa:	b0 0d       	add	r27, r0
 6fc:	a1 1d       	adc	r26, r1
 6fe:	66 1f       	adc	r22, r22
 700:	82 9f       	mul	r24, r18
 702:	22 27       	eor	r18, r18
 704:	b0 0d       	add	r27, r0
 706:	a1 1d       	adc	r26, r1
 708:	62 1f       	adc	r22, r18
 70a:	73 9f       	mul	r23, r19
 70c:	b0 0d       	add	r27, r0
 70e:	a1 1d       	adc	r26, r1
 710:	62 1f       	adc	r22, r18
 712:	83 9f       	mul	r24, r19
 714:	a0 0d       	add	r26, r0
 716:	61 1d       	adc	r22, r1
 718:	22 1f       	adc	r18, r18
 71a:	74 9f       	mul	r23, r20
 71c:	33 27       	eor	r19, r19
 71e:	a0 0d       	add	r26, r0
 720:	61 1d       	adc	r22, r1
 722:	23 1f       	adc	r18, r19
 724:	84 9f       	mul	r24, r20
 726:	60 0d       	add	r22, r0
 728:	21 1d       	adc	r18, r1
 72a:	82 2f       	mov	r24, r18
 72c:	76 2f       	mov	r23, r22
 72e:	6a 2f       	mov	r22, r26
 730:	11 24       	eor	r1, r1
 732:	9f 57       	subi	r25, 0x7F	; 127
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	9a f0       	brmi	.+38     	; 0x75e <__mulsf3_pse+0x88>
 738:	f1 f0       	breq	.+60     	; 0x776 <__mulsf3_pse+0xa0>
 73a:	88 23       	and	r24, r24
 73c:	4a f0       	brmi	.+18     	; 0x750 <__mulsf3_pse+0x7a>
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	bb 1f       	adc	r27, r27
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	91 50       	subi	r25, 0x01	; 1
 74c:	50 40       	sbci	r21, 0x00	; 0
 74e:	a9 f7       	brne	.-22     	; 0x73a <__mulsf3_pse+0x64>
 750:	9e 3f       	cpi	r25, 0xFE	; 254
 752:	51 05       	cpc	r21, r1
 754:	80 f0       	brcs	.+32     	; 0x776 <__mulsf3_pse+0xa0>
 756:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_inf>
 75a:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_szero>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	e4 f3       	brlt	.-8      	; 0x75a <__mulsf3_pse+0x84>
 762:	98 3e       	cpi	r25, 0xE8	; 232
 764:	d4 f3       	brlt	.-12     	; 0x75a <__mulsf3_pse+0x84>
 766:	86 95       	lsr	r24
 768:	77 95       	ror	r23
 76a:	67 95       	ror	r22
 76c:	b7 95       	ror	r27
 76e:	f7 95       	ror	r31
 770:	e7 95       	ror	r30
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	c1 f7       	brne	.-16     	; 0x766 <__mulsf3_pse+0x90>
 776:	fe 2b       	or	r31, r30
 778:	88 0f       	add	r24, r24
 77a:	91 1d       	adc	r25, r1
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	97 f9       	bld	r25, 7
 782:	08 95       	ret

00000784 <__fp_mpack>:
 784:	9f 3f       	cpi	r25, 0xFF	; 255
 786:	31 f0       	breq	.+12     	; 0x794 <__fp_mpack_finite+0xc>

00000788 <__fp_mpack_finite>:
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	20 f4       	brcc	.+8      	; 0x794 <__fp_mpack_finite+0xc>
 78c:	87 95       	ror	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	88 0f       	add	r24, r24
 796:	91 1d       	adc	r25, r1
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret

000007a0 <__fp_powser>:
 7a0:	df 93       	push	r29
 7a2:	cf 93       	push	r28
 7a4:	1f 93       	push	r17
 7a6:	0f 93       	push	r16
 7a8:	ff 92       	push	r15
 7aa:	ef 92       	push	r14
 7ac:	df 92       	push	r13
 7ae:	7b 01       	movw	r14, r22
 7b0:	8c 01       	movw	r16, r24
 7b2:	68 94       	set
 7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <__fp_powser+0x22>
 7b6:	da 2e       	mov	r13, r26
 7b8:	ef 01       	movw	r28, r30
 7ba:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__mulsf3x>
 7be:	fe 01       	movw	r30, r28
 7c0:	e8 94       	clt
 7c2:	a5 91       	lpm	r26, Z+
 7c4:	25 91       	lpm	r18, Z+
 7c6:	35 91       	lpm	r19, Z+
 7c8:	45 91       	lpm	r20, Z+
 7ca:	55 91       	lpm	r21, Z+
 7cc:	a6 f3       	brts	.-24     	; 0x7b6 <__fp_powser+0x16>
 7ce:	ef 01       	movw	r28, r30
 7d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__addsf3x>
 7d4:	fe 01       	movw	r30, r28
 7d6:	97 01       	movw	r18, r14
 7d8:	a8 01       	movw	r20, r16
 7da:	da 94       	dec	r13
 7dc:	69 f7       	brne	.-38     	; 0x7b8 <__fp_powser+0x18>
 7de:	df 90       	pop	r13
 7e0:	ef 90       	pop	r14
 7e2:	ff 90       	pop	r15
 7e4:	0f 91       	pop	r16
 7e6:	1f 91       	pop	r17
 7e8:	cf 91       	pop	r28
 7ea:	df 91       	pop	r29
 7ec:	08 95       	ret

000007ee <__umulhisi3>:
 7ee:	a2 9f       	mul	r26, r18
 7f0:	b0 01       	movw	r22, r0
 7f2:	b3 9f       	mul	r27, r19
 7f4:	c0 01       	movw	r24, r0
 7f6:	a3 9f       	mul	r26, r19
 7f8:	70 0d       	add	r23, r0
 7fa:	81 1d       	adc	r24, r1
 7fc:	11 24       	eor	r1, r1
 7fe:	91 1d       	adc	r25, r1
 800:	b2 9f       	mul	r27, r18
 802:	70 0d       	add	r23, r0
 804:	81 1d       	adc	r24, r1
 806:	11 24       	eor	r1, r1
 808:	91 1d       	adc	r25, r1
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
